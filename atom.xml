<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nana&#39;s Blog</title>
  <subtitle>Today is the first day of the rest of your life.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-07T09:04:49.325Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Nana Xie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习之入门笔记</title>
    <link href="http://yoursite.com/2018/01/06/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/01/06/机器学习之入门笔记/</id>
    <published>2018-01-06T08:54:59.000Z</published>
    <updated>2018-01-07T09:04:49.325Z</updated>
    
    <content type="html"><![CDATA[<p>1.1<br>机器学习：让机器去学习<br>传统算法：让机器去执行</p>
<p>最早机器学习应用：垃圾邮件分辨</p>
<p>图像识别<br>二分类问题 分辨猫和狗 不是猫就是狗</p>
<p>黑盒子算法 白盒子算法</p>
<p>人脸识别</p>
<p>数字识别 MINST数据集 邮政<br>车库 交通摄像头</p>
<p>人类怎么学习</p>
<p>人类学习过程 典型 经验学习过程</p>
<p>机器学习类似人类学习 </p>
<p>学习得到执行任务的算法-模型  训练模型</p>
<p>资料越来越多，计算机执行效率-算力越来越高</p>
<p>信用卡发放判断风险</p>
<p>google搜索 部分关键字</p>
<p>浏览商品，感兴趣商品</p>
<p>音乐推荐 图书 文章等</p>
<p>语音识别 人脸识别</p>
<p>金融预测 医疗诊断 市场分析</p>
<p>无人驾驶<br>安全领域<br>医疗领域<br>金融领域 市场领域<br>自然语言处理-智能翻译<br>各种专有领域：矿产勘查 宇宙探索 药物研发。。。</p>
<p>1.2<br>机器学习算法<br>人工智能 机器学习 深度学习 </p>
<p>神经网络 深度学习的基础</p>
<p>调库</p>
<p>算法原理学习<br>算法底层编写<br>scikit-learn</p>
<p>1.3<br>技术栈<br>python3<br>框架：scikit-learn<br>numpy matplotlib…</p>
<p>anaconda</p>
<p>高等数学 求导</p>
<p>scikit-learn 内置数据集<br>MINST数据集</p>
<p>真实世界的数据进行预处理过程</p>
<p>不包括神经网络和深度学习</p>
<p>关注监督学习</p>
<p>2.1 机器学习世界的数据<br>鸢尾花数据<br>Iris flower data set</p>
<p>数据整体叫数据集（data set)<br>表格中每一行数据称为一个样本(sample)<br>除了最后一列表达样本的种类，每一列表达样本的一个特征(feature)</p>
<p>X：数据整体特征  矩阵<br>第i个样本行写作X  ?<br>第i个样本第j个特征值X ?</p>
<p>最后一列特殊 机器学习真正要学习的内容</p>
<p>最后一列，称为标记（label)  y  小写，因为它是一个向量<br>X 矩阵  y 向量</p>
<p>y向量：<br>第i个样本的标记写作y?</p>
<p>每一行 特征向量 X ?</p>
<p>向量 行向量 n个特征 1xn<br>列向量 nx1</p>
<p>通常表示为列向量</p>
<p>有点听不懂了。。。</p>
<p>特征空间 feature space</p>
<p>分类任务本质就是在特征空间切分</p>
<p>鸢尾花 四个特征 四维空间</p>
<p>高维空间同理</p>
<p>低维空间推广到高维空间</p>
<p>特征可以很抽象</p>
<p>图像，每一个像素点都是特征</p>
<p>MINST 手写数据集  28<em>28的图像有28</em>28=784个特征</p>
<p>灰度图像 彩色图像</p>
<p>2.2 机器学习的基本任务<br>分类任务 回归任务</p>
<p>分类任务：<br>二分类  判断邮件是垃圾邮件 不是垃圾邮件； 银行判断发放给客户信用卡有风险 没有风险； 医院判断病患良性肿瘤 恶性肿瘤；股票交易 判断某支股票 涨 跌</p>
<p>多分类： 手写数字识别<br>图像识别<br>判断发放给客户信用卡风险评级<br>自动玩2048的人工智能 判断上移 左移 右移 下移<br>下围棋<br>无人车领域 控制方向盘 油门 刹车</p>
<p>一些算法只支持完成二分类的任务<br>但是多分类的任务可以转换成二分类的任务<br>有一些算法天然可以完成多分类任务</p>
<p>多标签分类</p>
<p>房产数据<br>回归任务：结果是一个连续数字的值，而非一个类别<br>？？？ 预测房屋价格<br>市场分析<br>预测学生成绩<br>预测股票价格</p>
<p>有些算法只能解决回归问题<br>有些只能解决分类问题<br>有些都能</p>
<p>一些情况下，回归任务可以简化成分类任务</p>
<p>模型可以理解成函数 f(x)   x样本资料<br>f(x)结果是类别-分类问题 结果是数值-回归问题</p>
<p>监督学习主要处理分类问题和回归问题</p>
<p>2.3<br>机器学习算法分类:<br>监督学习 非监督学习 半监督学习 增强学习</p>
<p>监督学习: 给机器的训练数据拥有“标记”或者“答案”<br>给机器的数据 既有X又有y 既有数据特征 又有数据标记  监督学习<br>k近邻 线性回归和多项式回归 逻辑回归 SVM 决策树和随机森林</p>
<p>非监督学习算法 辅助监督学习算法<br>非监督学习：给机器的训练数据没有任何“标记”或者“答案”<br>对没有“标记”的数据进行分类-聚类分析<br>对数据进行降维处理：<br>特征提取：信用卡的信用评级和人的胖瘦 无关？<br>特征压缩：PCA 尽量少的损失信息的情况下，将高维的特征向量压缩成低维的特征向量</p>
<p>降维处理的意义：方便可视化</p>
<p>人类不能理解四维以上的信息</p>
<p>异常检测</p>
<p>找到样本的一般化的特征</p>
<p>半监督学习：<br>一部分数据有“标记”或者“答案”，另一部分数据没有<br>更常见：各种原因产生的标记缺失</p>
<p>通常先使用无监督学习手段对数据进行处理，是数据变成监督学习的模式。之后使用监督学习手段做模型的训练和预测</p>
<p>增强学习：根据周围环境的情况，采取行动，根据采取行动的结果，学习行为方式。<br>行动 反馈 循环<br>阿尔法狗就是增强学习的应用<br>无人驾驶 机器人<br>监督学习和半监督学习是基础</p>
<p>2.4<br>机器学习的其他分类<br>在线学习和批量学习（离线学习）<br>参数学习和非参数学习</p>
<p>批量学习 离线学习 Batch Learning<br>在线学习 Online Learning</p>
<p>批量学习 离线学习 Batch Learning<br>新的样例不再作为训练集</p>
<p>优点：简单<br>问题：如何适应环境变化？<br>解决方案：定时重新批量学习<br>缺点：每次重新批量学习，运算量巨大；在某些环境变化非常快的情况下，甚至不可能的，如股票数据；</p>
<p>在线学习：<br>优点：及时反映新的环境变化<br>问题：新的数据带来不好的变化<br>解决方案：需要加强对数据进行监控<br>其他：也适用于数据量巨大，完全无法批量学习的环境。</p>
<p>在线学习，很大程度上也是对批量学习的一个改进</p>
<p>参数学习：Parametric Learning<br>非参数学习：Nonparametric Learning</p>
<p>参数学习：Parametric Learning<br>一旦学到了参数，就不再需要原有的数据集<br>最基础的线性回归的方法</p>
<p>统计学 统计模型</p>
<p>非参数学习： 不对模型进行过多假设<br>非参数学习不代表没有参数<br>区别在于不对整个问题进行建模，不把整个问题认为是学习参数</p>
<p>2.5<br>不确定的世界的相关问题</p>
<p>数据记算法？</p>
<p>数据确实非常重要</p>
<p>数据驱动 高度依赖数据本身质量<br>收集更多数据 提高数据质量 提高数据的代表性 研究数据更重要的特征=特征工程</p>
<p>AlphaGo Zero Starting from scratch  算法为王？</p>
<p>如何选择机器学习算法？</p>
<p>奥卡姆的剃刀  简单的就是好的<br>机器学习领域，到底什么叫“简单”？<br>机器学习处理的是不确定的世界的真实的问题</p>
<p>没有免费的午餐定理<br>可以严格的数据推导出：任意两个算法，他们的期望性能是相同的！<br>概率论，期望-平均值</p>
<p>具体到某个特定问题，有些算法可能更好<br>特定的某个特定领域的问题</p>
<p>但没有一种算法，绝对比另一种算法好</p>
<p>脱离具体的问题，谈哪个算法好是没有意义的</p>
<p>在面对一个具体问题的时候，尝试使用多种算法进行对比试验，是必要的。</p>
<p>面对不确定的世界，怎么看待使用机器学习进行预测的结果？</p>
<p>机器伦理学</p>
<p>2.6<br>环境搭建</p>
<p>anaconda<br>python3.6 python2.7-2020年不再更新维护<br>Anaconda-navigator</p>
<p>dai </p>
<p>3.1<br>Jupyter基础<br>待</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.1&lt;br&gt;机器学习：让机器去学习&lt;br&gt;传统算法：让机器去执行&lt;/p&gt;
&lt;p&gt;最早机器学习应用：垃圾邮件分辨&lt;/p&gt;
&lt;p&gt;图像识别&lt;br&gt;二分类问题 分辨猫和狗 不是猫就是狗&lt;/p&gt;
&lt;p&gt;黑盒子算法 白盒子算法&lt;/p&gt;
&lt;p&gt;人脸识别&lt;/p&gt;
&lt;p&gt;数字识别 MIN
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>给print点颜色看看</title>
    <link href="http://yoursite.com/2017/12/24/%E7%BB%99print%E7%82%B9%E9%A2%9C%E8%89%B2%E7%9C%8B%E7%9C%8B/"/>
    <id>http://yoursite.com/2017/12/24/给print点颜色看看/</id>
    <published>2017-12-24T03:17:00.000Z</published>
    <updated>2017-12-24T03:17:00.503Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python之巩固基础篇</title>
    <link href="http://yoursite.com/2017/12/08/python%E4%B9%8B%E5%B7%A9%E5%9B%BA%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://yoursite.com/2017/12/08/python之巩固基础篇/</id>
    <published>2017-12-08T14:40:48.000Z</published>
    <updated>2017-12-17T15:14:51.634Z</updated>
    
    <content type="html"><![CDATA[<p>第1章 Python入门导学</p>
<p>1-1 导学 (11:33)</p>
<p>python2处于维护期</p>
<p>了解语法是编程的先决条件，精通语法是编好程的必要条件</p>
<p>Life is simple, I use python.</p>
<p>如何交换两个变量？ x, y = y, x</p>
<p>Python之禅</p>
<p>1-2 Python的特性 (12:34)</p>
<p>Life is short i use python</p>
<p>面向对象 是一种思想</p>
<p>面向对象 面向过程</p>
<p>1-3 我为什么喜欢Python (09:28)</p>
<p>python 动态脚本 又有面向对象的特性</p>
<p>1-4 Python的缺点 (08:25)</p>
<p>慢 </p>
<p>运行效率和开发效率，鱼与熊掌不可兼得</p>
<p>1-5 一个经典误区 (04:19)</p>
<p>编程是为了解决问题</p>
<p>web只是编程的一个应用方向</p>
<p>1-6 python能做些什么？ (05:44)</p>
<p>python主流功能</p>
<p>遇到问题，拿起python,编写工具</p>
<p>1-7 课程内容与特点 (08:32)</p>
<p>基础知识不够扎实</p>
<p>python高性能与优化</p>
<p>数据结构是扎实的编程功底的基础</p>
<p>数据结构和语言无关</p>
<p>1-8 Python的前景 (05:28)</p>
<p>如果人的一生只能选择一门语言？</p>
<p>1-9 课程维护与提问 (01:45)</p>
<p>慕课手记<br>知乎专栏：小楼昨夜又秋风</p>
<p>第2章 Python环境安装</p>
<p>2-1 下载Python安装包 (03:22)</p>
<p>python3.5以上版本不支持windows XP</p>
<p>2-2 安装Python (02:31)</p>
<p>Add python3.x to PATH</p>
<p>查阅python官方文档</p>
<p>2-3 IDLE与第一段Python代码 (02:55)</p>
<p>IDLE options - config IDLE</p>
<p>python 代码末尾不需要分号</p>
<p>python靠缩进来控制代码格式</p>
<p>第3章 理解什么是写代码与Python的基本类型</p>
<p>3-1 什么是代码，什么是写代码 (04:22)</p>
<p>代码是现实世界事物在计算机世界的映射</p>
<p>写代码是将现实世界中的事物用计算机语言来描述</p>
<p>计算机语言：基本数据类型 逻辑思维 构成</p>
<p>3-2 数字：整形与浮点型 (07:21)</p>
<p>Number:数字   整数 小数      整数int（其他语言short int long,python简化只有int这种数据类型，） 浮点数float(其他语言还分单精度float和双精度double，精度越高，数值越准确) python只有一种类型 因为python支持的就是双精度</p>
<blockquote>
<blockquote>
<blockquote>
<p>type(1)</p>
<p><class 'int'=""><br>type(-1)</class></p>
<p><class 'int'=""><br>type(1.1)</class></p>
<p><class 'float'=""><br>type(-1.111111111111111111111111111111111111111)</class></p>
<class 'float'="">

</class></blockquote>
</blockquote>
</blockquote>
<p>混合计算</p>
<blockquote>
<blockquote>
<blockquote>
<p>type(1+0.1)</p>
<p><class 'float'=""><br>type(1+1)</class></p>
<p><class 'int'=""><br>type(1.1+0.9)</class></p>
<p><class 'float'=""><br>type(1+1.0)</class></p>
<p><class 'float'=""><br>type(1*1)</class></p>
<p><class 'int'=""><br>type(1*1.0)</class></p>
<class 'float'="">


</class></blockquote>
</blockquote>
</blockquote>
<p>注意！！！！！</p>
<blockquote>
<blockquote>
<blockquote>
<p>type(2/2)</p>
<p><class 'float'=""><br>type(2//2)</class></p>
<class 'int'="">

<p>type(2.0//2)</p>
<class 'float'="">

<p>type(2.0//2.0)</p>
<class 'float'="">


<p>2/2<br>1.0<br>2//2<br>1<br>2.0//2.0<br>1.0</p>
</class></class></class></blockquote>
</blockquote>
</blockquote>
<p>1//2？</p>
<blockquote>
<blockquote>
<blockquote>
<p>1//2<br>0</p>
</blockquote>
</blockquote>
</blockquote>
<p>/ 除法  //整除</p>
<p>python2的情况可能不一样，试下</p>
<p>python3 只有int python2 还有long</p>
<p>3-3 10、2、8、16进制 (08:32)</p>
<p>满N进一</p>
<p>0 1 2 3 4 5 6 7 8 9 10 满10进一<br>0 1 10 满2进一<br>二进制的10和十进制的10不是同一个概念</p>
<p>0 1 2 3 4 5 6 7 10</p>
<p>0 1 2 3 4 5 6 7 8 9 A B C D E F 10</p>
<p>还有其他进制 60秒=1分</p>
<p>3-4 - 各进制的表示与转换 (07:35)</p>
<p>不同进制里，python如何区分数字10</p>
<p>python表示二进制：<br>0b<br>0b10 二进制的数字10</p>
<p>二进制转换成10进制</p>
<blockquote>
<blockquote>
<blockquote>
<p>0b10<br>2<br>0b11<br>3</p>
</blockquote>
</blockquote>
</blockquote>
<p>python表示八进制：<br>0o<br>0o10 八进制的10</p>
<blockquote>
<blockquote>
<blockquote>
<p>0o10<br>8<br>0o11<br>9</p>
</blockquote>
</blockquote>
</blockquote>
<p>python表示十六进制：<br>0x<br>0x10 十六进制的10</p>
<blockquote>
<blockquote>
<blockquote>
<p>0x10<br>16<br>0x1F<br>31</p>
</blockquote>
</blockquote>
</blockquote>
<p>IDLE默认转换成十进制</p>
<p>其他进制转化二进制：<br>bin()</p>
<blockquote>
<blockquote>
<blockquote>
<p>bin(10)<br>‘0b1010’<br>bin(0o7)<br>‘0b111’<br>bin(0xE)<br>‘0b1110’</p>
</blockquote>
</blockquote>
</blockquote>
<p>其他进制转化十进制：<br>int()</p>
<blockquote>
<blockquote>
<blockquote>
<p>int(0b111)<br>7<br>int(0o77)<br>63</p>
</blockquote>
</blockquote>
</blockquote>
<p>其他进制转化十六进制：<br>hex()</p>
<blockquote>
<blockquote>
<blockquote>
<p>hex(888)<br>‘0x378’<br>hex(0o777)<br>‘0x1ff’</p>
</blockquote>
</blockquote>
</blockquote>
<p>其他进制转化成八进制:<br>oct()</p>
<blockquote>
<blockquote>
<blockquote>
<p>oct(0b111)<br>‘0o7’<br>oct(0x777)<br>‘0o3567’</p>
</blockquote>
</blockquote>
</blockquote>
<p>3-5 数字：布尔类型与复数 (08:24)</p>
<p>还包括bool 布尔类型：表示真 假</p>
<p>还有complex 复数</p>
<p>注意 T和F是大写的 ！！！</p>
<blockquote>
<blockquote>
<blockquote>
<p>True<br>True<br>False<br>False<br>true<br>Traceback (most recent call last):<br>  File “<pyshell#22>“, line 1, in <module><br>    true<br>NameError: name ‘true’ is not defined<br>false<br>Traceback (most recent call last):<br>  File “<pyshell#23>“, line 1, in <module><br>    false<br>NameError: name ‘false’ is not defined</module></pyshell#23></module></pyshell#22></p>
<p>和其他语言不一样</p>
<p>type(True)</p>
<p><class 'bool'=""><br>type(False)</class></p>
<class 'bool'="">

</class></blockquote>
</blockquote>
</blockquote>
<p>为什么布尔类型会归到数字这个分类下面？</p>
<p>转换十进制：</p>
<blockquote>
<blockquote>
<blockquote>
<p>int(True)<br>1<br>int(False)<br>0</p>
</blockquote>
</blockquote>
</blockquote>
<p>转换成布尔类型：</p>
<blockquote>
<blockquote>
<blockquote>
<p>bool(1)<br>True<br>bool(0)<br>False</p>
</blockquote>
</blockquote>
</blockquote>
<p>一正一反论证了布尔类型在python是属于数字类型的</p>
<p>是不是只有数字1表示True,0表示false?</p>
<p>只要是非0的数字都表示的是布尔真，只有0表示布尔假</p>
<blockquote>
<blockquote>
<blockquote>
<p>bool(2)<br>True<br>bool(2.2)<br>True<br>bool(-1.1)<br>True<br>bool(0)<br>False<br>bool(0b01)<br>True<br>bool(0b0)<br>False</p>
</blockquote>
</blockquote>
</blockquote>
<p>并不是只有数字才能表示布尔类型，或者和布尔类型做转换<br>字符串：</p>
<blockquote>
<blockquote>
<blockquote>
<p>bool(‘abc’)<br>True<br>bool(‘’)<br>False<br>列表：<br>bool([1,2,3])<br>True<br>bool([])<br>False<br>集合：<br>bool({1,2,3})<br>True<br>bool({})<br>False<br>重要！！！<br>数字0和一系列空值都会被认为是布尔假 False<br>非空 True  空值 False</p>
</blockquote>
</blockquote>
</blockquote>
<p>python特殊类型：None</p>
<blockquote>
<blockquote>
<blockquote>
<p>bool(None)<br>False</p>
</blockquote>
</blockquote>
</blockquote>
<p>python如何表示复数？<br>j</p>
<blockquote>
<blockquote>
<blockquote>
<p>36j<br>36j</p>
</blockquote>
</blockquote>
</blockquote>
<p>3-6 字符串：单引号与双引号 (09:08)<br>学习编程：抓大放小</p>
<p>曾经沧海难为水，除却巫山不是云。<br>取次花丛懒回顾，半缘修道半缘君。<br>               ——-唐 元稹</p>
<p>str 字符串</p>
<p>字符串的操作都是必不可少的，非常重要的</p>
<p>python如何表示字符串？<br>单引号 双引号 三引号</p>
<p>1 和 ‘1’ 是同样一个东西吗？</p>
<blockquote>
<blockquote>
<blockquote>
<p>type(1)</p>
<p><class 'int'=""><br>type(‘1’)</class></p>
<p><class 'str'=""><br>很多bug是这个问题引起的</class></p>
</blockquote>
</blockquote>
</blockquote>
<p>中文引号不能表示字符串</p>
<p>python所有的符号都不能是中文的，必须是英文的</p>
<p>为什么除了单引号还要有双引号？</p>
<blockquote>
<blockquote>
<blockquote>
<p>‘let’s go’<br>SyntaxError: invalid syntax<br>“let’s go”<br>“let’s go”</p>
</blockquote>
</blockquote>
</blockquote>
<p>引号表示字符串的时候需要成对出现   里面的引号是文字本事呢的内容</p>
<blockquote>
<blockquote>
<blockquote>
<p>‘let\’s go’<br>“let’s go”<br>\转义字符</p>
</blockquote>
</blockquote>
</blockquote>
<p>“let’s go”  更推荐这种表示方法</p>
<p>3-7 多行字符串 (10:32)<br>python建议 每行宽度最大是79</p>
<blockquote>
<blockquote>
<blockquote>
<p>‘’’hello nana<br>hello nana<br>hello nana<br>‘’’<br>‘hello nana\nhello nana\nhello nana\n’<br>“””hello<br>hello<br>hello<br>“””<br>‘hello\nhello\nhello\n’</p>
</blockquote>
</blockquote>
</blockquote>
<p>三个单引号 三个双引号 都可以<br>效果是一样的</p>
<p>\n 表示回车  敲击回车的动作</p>
<p>tab虽然看不到，但是也是一个字符的存在</p>
<p>反向思维：</p>
<blockquote>
<blockquote>
<blockquote>
<p>‘hello nana\nhello nana\nhello nana\n’<br>‘hello nana\nhello nana\nhello nana\n’<br>不会，会原样显示出来，不会换行</p>
<p>print(‘hello nana\nhello nana\nhello nana\n’)<br>hello nana<br>hello nana<br>hello nana</p>
<p>这样就是换行的</p>
</blockquote>
</blockquote>
</blockquote>
<p>IDLE和print函数的显示特点<br>print函数的显示特点要牢记<br>有些面试会问道IDLE的特性<br>单引号 双引号 也有换行的特性， 不只三引号</p>
<p>常见的理解上的误区：<br>三个引号不一定要换行</p>
<blockquote>
<blockquote>
<blockquote>
<p>“””hello world<br>hello nana”””<br>‘hello world\nhello nana’<br>“””<br>hello world<br>hello nana”””<br>‘\nhello world\nhello nana’</p>
<p>“””<br>hello world<br>hello nana<br>“””<br>‘\nhello world\nhello nana\n’</p>
<p>‘hello<br>SyntaxError: EOL while scanning string literal<br>‘hello\<br>world’<br>‘helloworld’<br>加个反斜杠就不会报错<br>这也是字符串换行的方式 单引号和双引号换行的方式</p>
</blockquote>
</blockquote>
</blockquote>
<p>基本常识牢记，写代码才能写的快</p>
<p>好记性不如烂笔头</p>
<p>3-8 转义字符 (04:24)</p>
<p>特殊的字符 </p>
<p>无法“看见”的字符<br>与语言本身语法有冲突的字符  如单引号 作为普通字符和python语法是有冲突的</p>
<p>\n 换行<br>\’ 单引号<br>\t 横向制表符</p>
<p>注意！！！</p>
<p>\n  换行<br>\r 回车</p>
<p>是不一样的 不是同一个概念</p>
<p>????????</p>
<p>思考：<br>print(‘hello \n world’)  要求\n 也被输出出来</p>
<blockquote>
<blockquote>
<blockquote>
<p>print(‘hello \n world’)<br>hello<br> world</p>
</blockquote>
</blockquote>
</blockquote>
<p>我的尝试：</p>
<blockquote>
<blockquote>
<blockquote>
<p>print(‘hello \n world’)<br>hello \n world<br>print(r’hello \n world’)<br>hello \n world</p>
</blockquote>
</blockquote>
</blockquote>
<p>3-9 原始字符串 (05:44)</p>
<p>输出文件夹的路径；</p>
<blockquote>
<blockquote>
<blockquote>
<p>print(‘c:\northwind\northwest’)<br>c:<br>orthwind<br>orthwest<br>print(‘c:\northwind\northwest’)<br>c:\northwind\northwest<br>print(r’c:\northwind\northwest’)<br>c:\northwind\northwest</p>
</blockquote>
</blockquote>
</blockquote>
<p>加上r，字符串就不是一个普通字符串了，而是一个原始字符串  原始字符串 所见即所得</p>
<blockquote>
<blockquote>
<blockquote>
<p>print(r’let’s go’)</p>
</blockquote>
</blockquote>
</blockquote>
<p>SyntaxError: invalid syntax</p>
<blockquote>
<blockquote>
<blockquote>
<p>为什么？<br>不是一个字符串，更加不可能是一个原始字符串</p>
</blockquote>
</blockquote>
</blockquote>
<p>要么记笔记 要么多写代码</p>
<p>3-10 字符串运算 一 (07:24)</p>
<p>字符串的操作在编程中是用的非常非常多的</p>
<p>字符串合并</p>
<p>字符串只保留一部分</p>
<p>字符串的运算：</p>
<p>字符串拼接：用的非常多</p>
<blockquote>
<blockquote>
<blockquote>
<p>“hello” + “world”<br>‘helloworld’</p>
</blockquote>
</blockquote>
</blockquote>
<p>字符串的乘法：</p>
<blockquote>
<blockquote>
<blockquote>
<p>“hello”*3<br>‘hellohellohello’</p>
</blockquote>
</blockquote>
</blockquote>
<p>字符串乘以字符串会报错：</p>
<blockquote>
<blockquote>
<blockquote>
<p>“hello” <em> “world”<br>Traceback (most recent call last):<br>  File “<pyshell#46>“, line 1, in <module><br>    “hello” </module></pyshell#46></em> “world”<br>TypeError: can’t multiply sequence by non-int of type ‘str’</p>
</blockquote>
</blockquote>
</blockquote>
<p>获取字符串单个字符：</p>
<blockquote>
<blockquote>
<blockquote>
<p>“hello world”[0]<br>‘h’<br>“hello world”[1]<br>‘e’<br>“hello world”[3]<br>‘l’<br>“hello world”[4]<br>‘o’</p>
</blockquote>
</blockquote>
</blockquote>
<p>下标操作符<br>注意！！！下标的序号是从0开始的</p>
<blockquote>
<blockquote>
<blockquote>
<p>“hello world”[-1]<br>‘d’<br>“hello world”[-3]<br>‘r’</p>
</blockquote>
</blockquote>
</blockquote>
<p>正数<br>负数 从末尾往前数n次得到的字符</p>
<p>思考：获取“hello world” w 字符  两种方式</p>
<p>我的：</p>
<blockquote>
<blockquote>
<blockquote>
<p>“hello world”[6]<br>‘w’<br>“hello world”[-5]<br>‘w’</p>
</blockquote>
</blockquote>
</blockquote>
<p>3-11 字符串运算 二 (04:48)</p>
<p>截取一组字符：<br>起点 终点</p>
<blockquote>
<blockquote>
<blockquote>
<p>“hello world”[0:4]<br>‘hell’<br>“hello world”[0:5]<br>‘hello’</p>
</blockquote>
</blockquote>
</blockquote>
<p>最后要截取的字符的下一位</p>
<blockquote>
<blockquote>
<blockquote>
<p>“hello world”[0:-1]<br>‘hello worl</p>
</blockquote>
</blockquote>
</blockquote>
<p>负数 表示步长的概念 长度的概念</p>
<p>思考：<br>”hello world”截取world  两种方式</p>
<p>我的尝试：</p>
<blockquote>
<blockquote>
<blockquote>
<p>“hello world”[6: 11]<br>‘world’<br>“hello world”[6: -1]<br>‘worl’<br>“hello world”[6: 0]<br>‘’<br>“hello world”[6:]<br>‘world’<br>“hello world”[-5:]<br>‘world’</p>
<p>“hello world”[6: 11]<br>‘world’</p>
<p>“hello world”[6:]<br>‘world’</p>
<p>“hello world”[6: 11]<br>‘world’</p>
</blockquote>
</blockquote>
</blockquote>
<p>3-12 字符串运算 三 (08:37)</p>
<p>老师：</p>
<blockquote>
<blockquote>
<blockquote>
<p>“hello world”[6: 20]<br>‘world’<br>保持好奇心</p>
<p>“hello world”[6: 0]<br>‘’<br>“hello world”[6: -0]<br>‘’<br>得到的都是空</p>
<p>“hello python java ruby”[:-4]<br>‘hello python java ‘<br>“hello python java ruby”[0:-4]<br>‘hello python java ‘</p>
<p>“hello python java ruby”[-4:]<br>‘ruby’</p>
</blockquote>
</blockquote>
</blockquote>
<p>原始字符串<br>r R 都可以</p>
<blockquote>
<blockquote>
<blockquote>
<p>r’c:\windows\nana’<br>‘c:\windows\nana’<br>R’c:\windows\nana’<br>‘c:\windows\nana’</p>
</blockquote>
</blockquote>
</blockquote>
<p>为什么变成两条横杆了？？？</p>
<p>笔记 整理思路的过程</p>
<p>第4章 Python中表示“组”的概念与定义</p>
<p>4-1 列表的定义 (06:47)</p>
<p>python如何表示组的概念？</p>
<p>表示组的方法有很多种</p>
<p>python如何定义列表：<br>[1,2,3,4,5,6] 中间逗号分隔</p>
<blockquote>
<blockquote>
<blockquote>
<p>type([1,2,3,4,5,6])</p>
<class 'list'="">


</class></blockquote>
</blockquote>
</blockquote>
<p>内部类型是可以混合的：<br>[‘hello’, ‘world’, 1, 9, True, False]</p>
<blockquote>
<blockquote>
<blockquote>
<p>type([‘hello’, ‘world’, 1, 9, True, False])</p>
<class 'list'="">

<p>type([[1,2],[3,4],[5,6]])</p>
<p><class 'list'=""><br>二维数组  python中叫嵌套列表</class></p>
</class></blockquote>
</blockquote>
</blockquote>
<p>4-2 列表的基本操作 (07:06)</p>
<p>访问列表某个元素<br>[1,2,3,4]</p>
<blockquote>
<blockquote>
<blockquote>
<p>[1,2,3,4][0]<br>1</p>
<p>[1,2,3,4][0:2]<br>[1, 2]</p>
<p>[1,2,3,4][-1:]<br>[4]</p>
</blockquote>
</blockquote>
</blockquote>
<p>注意！！！！！！！<br>单一下标，得到的是数组<br>冒号 得到的是一个列表 哪怕列表只有一个元素<br>细节问题 容易引起代码的Bug</p>
<p>提高写代码效率，基本功必须扎实</p>
<p>列表的截取，同字符串的截取</p>
<p>列表追加元素：<br>列表合并：</p>
<blockquote>
<blockquote>
<blockquote>
<p>[1,2,3,4] + [1,2,3,4]<br>[1, 2, 3, 4, 1, 2, 3, 4]</p>
</blockquote>
</blockquote>
</blockquote>
<p>乘法：</p>
<blockquote>
<blockquote>
<blockquote>
<p>[1,2,3,4]<em>3<br>[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]<br>[1,2,3,4]</em>[1,2,3,4]<br>Traceback (most recent call last):<br>  File “<pyshell#99>“, line 1, in <module><br>    [1,2,3,4]*[1,2,3,4]<br>TypeError: can’t multiply sequence by non-int of type ‘list’</module></pyshell#99></p>
</blockquote>
</blockquote>
</blockquote>
<p>列表的减法：</p>
<blockquote>
<blockquote>
<blockquote>
<p>[1,2,3,4]-[1]<br>Traceback (most recent call last):<br>  File “<pyshell#0>“, line 1, in <module><br>    [1,2,3,4]-[1]<br>TypeError: unsupported operand type(s) for -: ‘list’ and ‘list’<br>没有这样的操作</module></pyshell#0></p>
</blockquote>
</blockquote>
</blockquote>
<p>编程是实践性非常强的工作</p>
<p>经常试一试</p>
<p>思考：世界杯分组情况</p>
<p>4-3 元组 (10:22)<br>有趣的问题，L=[‘’] 字符长度为什么也是1<br>空字符串也是一个元素</p>
<p>元组的访问：<br>和列表 字符串是一样的</p>
<blockquote>
<blockquote>
<blockquote>
<p>(1,2,3,4)[0]<br>1</p>
<p>(1,2,3,4)[0:2]<br>(1, 2)</p>
</blockquote>
</blockquote>
</blockquote>
<p>相加：</p>
<blockquote>
<blockquote>
<blockquote>
<p>(1,2,3,4) + (1,2,3,4)<br>(1, 2, 3, 4, 1, 2, 3, 4)</p>
</blockquote>
</blockquote>
</blockquote>
<p>相乘：</p>
<blockquote>
<blockquote>
<blockquote>
<p>(1,2,3,4) * 3<br>(1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4)</p>
</blockquote>
</blockquote>
</blockquote>
<p>为什么python要区别列表和元组？</p>
<p>int str list tuple</p>
<blockquote>
<blockquote>
<blockquote>
<p>type((1,2,3))</p>
<p><class 'tuple'=""><br>type(1)</class></p>
<p><class 'int'=""><br>type([1,2,3])</class></p>
<p><class 'list'=""><br>type([‘hello’])</class></p>
<class 'list'="">

</class></blockquote>
</blockquote>
</blockquote>
<p>class就是面向对象的类</p>
<p>奇怪的现象：</p>
<blockquote>
<blockquote>
<blockquote>
<p>type((1))</p>
<p><class 'int'=""><br>type((‘hello’))</class></p>
<class 'str'="">

</class></blockquote>
</blockquote>
</blockquote>
<p>为什么不是显示tuple?</p>
<p>因为（）即可以表示元组，也是数学计算的基本符号，数学运算符</p>
<p>python硬性规定：（1）表示数学运算符，type((1))等同于type(1)</p>
<p>如何定义只有一个元素的元组？</p>
<blockquote>
<blockquote>
<blockquote>
<p>(1)<br>1<br>(1,)<br>(1,)<br>type((1,))</p>
<class 'tuple'="">

</class></blockquote>
</blockquote>
</blockquote>
<p>如何表示一个元素都没有的空的元组：</p>
<blockquote>
<blockquote>
<blockquote>
<p>()<br>()<br>type(())</p>
<class 'tuple'="">

</class></blockquote>
</blockquote>
</blockquote>
<p>发散：</p>
<blockquote>
<blockquote>
<blockquote>
<p>type([1])</p>
<class 'list'="">




</class></blockquote>
</blockquote>
</blockquote>
<p>4-4 序列总结 (17:17)</p>
<p>int float bool str list tuple</p>
<p>str list tuple 很多相似之处  —-都是序列</p>
<p>序列都有哪些共有的操作？</p>
<ol>
<li>[n] 中括号和序号获取元素  —-序列每个元素都将被分配一个序号， 都有顺序，也有序号<br>序号的概念</li>
<li>切片：<br>切片还有一种有趣的用法：<blockquote>
<blockquote>
<blockquote>
<p>“hello world”[0:8:2]<br>‘hlow’</p>
</blockquote>
</blockquote>
</blockquote>
</li>
<li>序列可以加和乘</li>
<li>判断序列是否包含某个元素？<br>in 运算符<blockquote>
<blockquote>
<blockquote>
<p>3 in [1,2,3,4,5]<br>True<br>10 in [1,2,3,4,5]<br>False</p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ol>
<p>不在：</p>
<blockquote>
<blockquote>
<blockquote>
<p>3 not in [1,2,3,4,5]<br>False<br>10 not in [1,2,3,4,5]<br>True</p>
<ol>
<li>统计序列元素<br>len([1,2,3,4,5])<br>5</li>
</ol>
<p>len(“hello world”)<br>11<br>注意空格</p>
</blockquote>
</blockquote>
</blockquote>
<ol>
<li>求最大<blockquote>
<blockquote>
<blockquote>
<p>max([1,2,3,4,5])<br>5</p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ol>
<p>7.求最小</p>
<blockquote>
<blockquote>
<blockquote>
<p>min([1,2,3,4,5])<br>1</p>
<p>max(“hello world”)<br>‘w’<br>min(“hello world”)<br>‘ ‘<br>min(“helloworld”)<br>‘d’<br>涉及字符编码，ascii,<br>ord() return the unicode code point for a one-character string<br>ord(‘w’)<br>119<br>ord(‘ ‘)<br>32<br>ord(‘d’)<br>100</p>
</blockquote>
</blockquote>
</blockquote>
<p>还有一种无序的集合类型</p>
<p>4-5 set 集合 (12:19)</p>
<p>集合 set</p>
<p>集合非常重要的特性： 无序</p>
<p>序列是有序的，但是集合最大的特点是无序的</p>
<p>集合定义：</p>
<blockquote>
<blockquote>
<blockquote>
<p>type({1, 1, 2, 3, 4, 5})</p>
<class 'set'="">

<p>{1, 1, 2, 3, 4, 5}[0]<br>Traceback (most recent call last):<br>  File “<pyshell#43>“, line 1, in <module><br>    {1, 1, 2, 3, 4, 5}[0]<br>TypeError: ‘set’ object does not support indexing<br>集合是无序的，没有下标索引</module></pyshell#43></p>
<p>{1, 1, 2, 3, 4, 5}[0:2]<br>Traceback (most recent call last):<br>  File “<pyshell#44>“, line 1, in <module><br>    {1, 1, 2, 3, 4, 5}[0:2]<br>TypeError: ‘set’ object is not subscriptable<br>更不支持切片操作</module></pyshell#44></p>
</class></blockquote>
</blockquote>
</blockquote>
<p>集合的第二个特点：不重复</p>
<blockquote>
<blockquote>
<blockquote>
<p>{1, 1, 2, 2, 3, 3, 4, 4, 5, 5}<br>{1, 2, 3, 4, 5}<br>所有重复元素都被剔除掉</p>
</blockquote>
</blockquote>
</blockquote>
<p>集合支持的操作：</p>
<ol>
<li><p>长度判断：<br>len()</p>
<blockquote>
<blockquote>
<blockquote>
<p>len({1,2,3})<br>3<br>len({1,1,2,2,3,3})<br>3</p>
</blockquote>
</blockquote>
</blockquote>
</li>
<li><p>判断集合是否包含某个元素</p>
<blockquote>
<blockquote>
<blockquote>
<p>1 in {1,1,2,2,3,3}<br>True<br>1 not in {1,1,2,2,3,3}<br>False<br>8 in {1,1,2,2,3,3}<br>False<br>8 not in {1,1,2,2,3,3}<br>True</p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ol>
<p>集合的优势在哪里？<br>{1，2，3，4，5，6} {3，4}<br>如何将第一个集合里面的第二个集合的相关元素给剔除掉？</p>
<blockquote>
<blockquote>
<blockquote>
<p>{1,2,3,4,5,6} - {3, 4}<br>{1, 2, 5, 6}<br>不是减号，而是求两个集合的差值</p>
</blockquote>
</blockquote>
</blockquote>
<p>{1，2，3，4，5，6} {3，4}<br>找两个集合所共有的元素？</p>
<blockquote>
<blockquote>
<blockquote>
<p>{1,2,3,4,5,6} &amp; {3, 4}<br>{3, 4}<br>交集-数学概念</p>
</blockquote>
</blockquote>
</blockquote>
<p>{1，2，3，4，5，6} {3，4，7} 合并集合 不能出现重复元素</p>
<blockquote>
<blockquote>
<blockquote>
<p>{1,2,3,4,5,6} | {3, 4, 7}<br>{1, 2, 3, 4, 5, 6, 7}<br>合集 并集</p>
</blockquote>
</blockquote>
</blockquote>
<ul>
<li>&amp; |  集合的特色</li>
</ul>
<p>如何定义一个空的集合？</p>
<blockquote>
<blockquote>
<blockquote>
<p>type({})</p>
<p><class 'dict'=""><br>set()<br>set()<br>type(set())</class></p>
<class 'set'="">

</class></blockquote>
</blockquote>
</blockquote>
<p>set() 这才是定义空的集合的方法</p>
<blockquote>
<blockquote>
<blockquote>
<p>len(set())<br>0</p>
</blockquote>
</blockquote>
</blockquote>
<p>4-6 dict 字典 (14:51)</p>
<p>字典 dict</p>
<p>key value</p>
<p>通过key关键字，找到value值</p>
<p>一个字典是可以由很多个key和value值来组成的，所以字典也是一个集合类型<br>但是字典不是序列，更像是一个set,字典也是无序的</p>
<p>定义字典：<br>{}<br>{key1:value1,key2:value2…}</p>
<p>字典和集合最大的区别：<br>每个元素定义的方式不同，集合只有一个value值没有key，字典除了value值还有key值，key和value之间用冒号来分隔开</p>
<blockquote>
<blockquote>
<blockquote>
<p>type({1:1, 2:2, 3:3})</p>
<class 'dict'="">

</class></blockquote>
</blockquote>
</blockquote>
<p>有意义的字典，什么情况下适合用字典？</p>
<p>字母和技能之间的关系：<br>{‘Q’:’降龙十八掌’, ‘W’:’吸星大法’, ‘E’:’蹬鼻子上眼’, ‘R’:’轻功’}</p>
<blockquote>
<blockquote>
<blockquote>
<p>type({‘Q’:’降龙十八掌’, ‘W’:’吸星大法’, ‘E’:’蹬鼻子上眼’, ‘R’:’轻功’})</p>
<class 'dict'="">

<p>{‘Q’:’降龙十八掌’, ‘W’:’吸星大法’, ‘E’:’蹬鼻子上眼’, ‘R’:’轻功’}[0]<br>Traceback (most recent call last):<br>  File “<pyshell#64>“, line 1, in <module><br>    {‘Q’:’降龙十八掌’, ‘W’:’吸星大法’, ‘E’:’蹬鼻子上眼’, ‘R’:’轻功’}[0]<br>KeyError: 0</module></pyshell#64></p>
</class></blockquote>
</blockquote>
</blockquote>
<p>下标序号访问是不可以的<br>因为字典也是无序的</p>
<p>字典访问方式：<br>通过key 得到/访问 value</p>
<blockquote>
<blockquote>
<blockquote>
<p>{‘Q’:’降龙十八掌’, ‘W’:’吸星大法’, ‘E’:’蹬鼻子上眼’, ‘R’:’轻功’}[‘Q’]<br>‘降龙十八掌’</p>
</blockquote>
</blockquote>
</blockquote>
<p>字典存在相同的key</p>
<blockquote>
<blockquote>
<blockquote>
<p>{‘Q’:’降龙十八掌’, ‘Q’:’吸星大法’, ‘E’:’蹬鼻子上眼’, ‘R’:’轻功’}[‘Q’]<br>‘吸星大法’<br>{‘Q’:’降龙十八掌’, ‘Q’:’吸星大法’, ‘E’:’蹬鼻子上眼’, ‘R’:’轻功’}<br>{‘Q’: ‘吸星大法’, ‘E’: ‘蹬鼻子上眼’, ‘R’: ‘轻功’}<br>第一个Q已经不在字典里了</p>
</blockquote>
</blockquote>
</blockquote>
<p>字典的特点：字典里是不能有重复的key</p>
<p>字典的key和value只能是字符串？<br>1和’1‘是相同的key吗？</p>
<blockquote>
<blockquote>
<blockquote>
<p>{‘1’:’降龙十八掌’, 1:’吸星大法’, ‘E’:’蹬鼻子上眼’, ‘R’:’轻功’}<br>{‘1’: ‘降龙十八掌’, 1: ‘吸星大法’, ‘E’: ‘蹬鼻子上眼’, ‘R’: ‘轻功’}</p>
</blockquote>
</blockquote>
</blockquote>
<p>字典的键不一定非得是字符串，还可以是数字<br>数字的1和字符串的1会被识别为两个不同的key</p>
<p>value数据类型：<br>可以取python里面任意的一种数据类型，包括但不限于str int float list set dict(甚至可以是dict)</p>
<blockquote>
<blockquote>
<blockquote>
<p>type({‘1’:’降龙十八掌’, 1:’吸星大法’, ‘E’:{1:1}, ‘R’:’轻功’})</p>
<class 'dict'="">

</class></blockquote>
</blockquote>
</blockquote>
<p>字典的value在python中几乎没有任何限制</p>
<p>key数据类型：<br>但是key不能是任意的类型<br>key必须遵循的原则：key必须是不可变的类型  int str</p>
<blockquote>
<blockquote>
<blockquote>
<p>{[1,2]:’降龙十八掌’, 1:’吸星大法’, ‘E’:’蹬鼻子上眼’, ‘R’:’轻功’}<br>Traceback (most recent call last):<br>  File “<pyshell#71>“, line 1, in <module><br>    {[1,2]:’降龙十八掌’, 1:’吸星大法’, ‘E’:’蹬鼻子上眼’, ‘R’:’轻功’}<br>TypeError: unhashable type: ‘list’<br>{(1,2):’降龙十八掌’, 1:’吸星大法’, ‘E’:’蹬鼻子上眼’, ‘R’:’轻功’}<br>{(1, 2): ‘降龙十八掌’, 1: ‘吸星大法’, ‘E’: ‘蹬鼻子上眼’, ‘R’: ‘轻功’}</module></pyshell#71></p>
<p>列表不行 元组可以</p>
</blockquote>
</blockquote>
</blockquote>
<p>思考：空的字典如何定义？<br>我的：</p>
<blockquote>
<blockquote>
<blockquote>
<p>{}<br>{}<br>type({})</p>
<class 'dict'="">

</class></blockquote>
</blockquote>
</blockquote>
<p>bingo</p>
<p>4-7 思维导图总结基本数据类型 (05:06)</p>
<p>字符串和元组是不可变的类型 但是列表是可变的</p>
<p>平时多看看这篇</p>
<p>第5章 变量与运算符</p>
<p>5-1 什么是变量 (09:49)</p>
<p>5-2 变量的命名规则 (11:01)<br>5-3 值类型与引用类型 (15:40)<br>5-4 列表的可变与元组的不可变 (09:28)<br>5-5 运算符号 (07:51)<br>5-6 赋值运算符 (07:40)<br>5-7 比较运算符 (05:58)<br>5-8 不只是数字才能做比较运算_ (08:39)<br>5-9 逻辑运算符 (19:28)<br>5-10 成员运算符 (06:54)<br>5-11 身份运算符 (06:54)<br>5-12 如何判断变量的值、身份与类型 (10:31)<br>5-13 位运算符 (07:44)</p>
<p>第6章 分支、循环、条件与枚举</p>
<p>6-1 什么是表达式 (07:28)<br>6-2 表达式的优先级 (12:38)<br>6-3 表达式优先级练习 (06:44)<br>6-4 在文本文件中编写Python代码 (09:33)<br>6-5 熟悉VSCode开发环境与Python插件安装 (16:37)<br>6-6 流程控制语句之条件控制一 (15:01)<br>6-7 流程控制语句之条件控制 二 (07:24)<br>6-8 常量与Pylint的规范 (17:44)<br>6-9 流程控制语句之条件控制 三 snippet、嵌套分支、代码块的概念 (18:11)<br>6-10 流程控制语句之条件控制 四 elif的优点 (10:54)<br>6-11 思考题解答与改变定势思维 (05:56)</p>
<p>第7章 包、模块、函数与变量作用域</p>
<p>7-1 while循环与使用场景 (09:46)<br>7-2 for与for-else循环 (12:55)<br>7-3 for 与 range (09:32)<br>7-4 新篇章导言 (09:00)<br>7-5 Python工程的组织结构：包、模块儿、类 (07:01)<br>7-6 Python包与模块的名字 (05:17)<br>7-7 import导入模块 (11:05)<br>7-8 from import 导入变量 (08:11)<br>7-9 <strong>init</strong>.py 的用法 (20:34)<br>7-10 包与模块的几个常见错误_ (11:33)<br>7-11 模块内置变量 (15:08)<br>7-12 入口文件和普通模块内置变量的区别 (14:01)<br>7-13 <strong>name</strong>的经典应用 (13:29)<br>7-14 相对导入和绝对导入 一 (18:49)<br>7-15 相对导入和绝对导入 二 (07:37)</p>
<p>第8章 Python函数</p>
<p>8-1 认识函数 (12:07)<br>8-2 函数的定义及运行特点 (16:25)<br>8-3 如何让函数返回多个结果 (12:41)<br>8-4 序列解包与链式赋值 (06:05)<br>8-5 必须参数与关键字参数 (09:26)<br>8-6 默认参数 (17:22)<br>8-7 可变参数 (15:33)<br>8-8 关键字可变参数 (14:00)<br>8-9 变量作用域 (14:06)<br>8-10 作用域链 (04:58)<br>8-11 global关键字 (07:07)<br>8-12 划算还是不划算 (15:27)</p>
<p>第9章 高级部分：面向对象</p>
<p>9-1 类的定义 (17:10)</p>
<p>如何构建一个类：</p>
<p>面向对象两个核心：类 对象</p>
<p>什么是类 什么是对象 他们之间的关系</p>
<p>python使用class关键字来定义一个类</p>
<p>类命名规则和变量是不一样的：<br>1.变量最好小写，类建议第一个字母是要大写；<br>2.变量，两个单词之间使用下划线来进行连接；类，两个单词的首字母都使用大写，如StudentHomework,而不是通过下划线来连接。<br>3.类括号里传的参数和函数里的括号的参数是不一样的</p>
<p>冒号后开始类的类体的编写</p>
<p>类的内部首先可以定义变量</p>
<p>类的内部可以做哪些事情？</p>
<ol>
<li><p>定义若干个变量；<br>class Student():<br> name = ‘’<br> age = 0</p>
</li>
<li><p>定义函数<br>class Student():<br> name = ‘’<br> age = 0</p>
<p> def print_file():</p>
<pre><code>pass
</code></pre></li>
</ol>
<p>类定义完后，如何使用这样一个类？<br>如何调用类里面的函数？<br>要使用类，必须把类实例化<br>实例化的方式，用一个变量来接受实例化的结果</p>
<p>class Student():<br>    name = ‘’<br>    age = 0</p>
<pre><code>def print_file():
    pass
</code></pre><p>student = Student()<br>(其他语言需要使用new关键字来实例化一个类)<br>python直接使用类名加括号来完成实例化的过程</p>
<p>student = Student()<br>student.print_file()<br>就可以调用类下面的方法</p>
<p>方法而不是函数</p>
<p>函数和方法有什么区别呢？</p>
<p>class Student():<br>    name = ‘’<br>    age = 0</p>
<pre><code>def print_file():
    print(&apos;name:&apos; + name)
    print(&apos;age:&apos; + str(age))
</code></pre><p>student = Student()<br>student.print_file()</p>
<p>python xx.py</p>
<p>Traceback (most recent call last):<br>  File “student.py”, line 14, in <module><br>    student.print_file()<br>TypeError: print_file() takes 0 positional arguments but 1 was given</module></p>
<p>报错了<br>不需要传入参数但是却又一个参数传入了</p>
<p>类里编写函数和普通函数是有区别的，必须在参数列表强制传入一个固定的参数self</p>
<p>class Student():<br>    name = ‘’<br>    age = 0</p>
<pre><code>def print_file(self):
    print(&apos;name:&apos; + name)
    print(&apos;age:&apos; + str(age))
</code></pre><p>student = Student()<br>student.print_file()</p>
<p>报错：<br>Traceback (most recent call last):<br>  File “student.py”, line 14, in <module><br>    student.print_file()<br>  File “student.py”, line 10, in print_file<br>    print(‘name:’ + name)<br>NameError: name ‘name’ is not defined<br>之前函数内部直接引用全局变量是没有问题的</module></p>
<p>如何正确引入类下面定义的变量？<br>需要使用self关键字<br>class Student():<br>    name = ‘’<br>    age = 0</p>
<pre><code>def print_file(self):
    print(&apos;name:&apos; + self.name)
    print(&apos;age:&apos; + str(self.age))
</code></pre><p>student = Student()<br>student.print_file()</p>
<p>name:<br>age:0</p>
<p>此时没有问题，正确的打印出了name和age</p>
<p>总结：</p>
<p>使用类把变量和函数封装起来了<br>类没有什么神奇的，类的最基本的概念就是封装一系列的变量和函数<br>类的最基本的作用就是封装代码</p>
<p>类最基本的作用： 封装</p>
<p>不同的变量会被封装在不同的类里面</p>
<p>类下面的函数就是方法，一定要接受一个self的参数<br>其次，类下的方法使用类下定义的变量，需要通过self.这个操作符来引用的，直接使用变量是会报错的</p>
<p>初学python 初学编程 容易犯的错：<br>函数的调用放在类里面去执行<br>class Student():<br>    name = ‘’<br>    age = 0</p>
<pre><code>def print_file(self):
    print(&apos;name:&apos; + self.name)
    print(&apos;age:&apos; + str(self.age))

print_file()
</code></pre><p>报错：<br>Traceback (most recent call last):<br>  File “student.py”, line 6, in <module><br>    class Student():<br>  File “student.py”, line 14, in Student<br>    print_file()<br>TypeError: print_file() missing 1 required positional argument: ‘self’</module></p>
<p>类的最基本的原则：<br>类只负责去定义或者刻画一些东西 描述一些东西，定义一些行为，但是他不会去负责执行代码</p>
<p>运行或调用类，要放在类的外部</p>
<p>类最基本的作用就是封装，如果在类内部调用函数的话，就和模块没什么区别了</p>
<p>类的实例化和类的方法调用写在和类同一个模块下面<br>做项目的时候，不推荐在一个模块下面，又定义类，又去完成类的实例化和类的方法调用<br>建议：定义类的模块只写类的定义；类的实例化和类方法的调用放到另一个模块里</p>
<p>9-2 浅谈函数与方法的区别 (05:38)</p>
<p>如何在另一个模块使用类？<br>from student import Student</p>
<p>student = Student()<br>student.print_file()</p>
<p>如果不这样做，会让你的代码的结构变得很松散</p>
<p>方法和函数的区别？<br>现在，方法和函数没有绝对的区别<br>很多时候在模糊方法和函数的区别</p>
<p>C C++  函数<br>Java C# 方法</p>
<p>方法 设计层面上的一个称谓<br>方法更多是面向对象里面的一个概念<br>而面向对象最重要的是：面向对象更加关注的是一个设计  设计代码的结构 设计你的封装 </p>
<p>函数：程序运行、过程式的一种称谓<br>面向过程的一个概念  没有所谓的设计层面的意义在里面</p>
<p>类里面的函数 称为方法</p>
<p>如果只是把函数定义在模块里面，不要称作方法，还是成为函数</p>
<p>类下面定义的变量</p>
<p>模块里面定义的变量，称为变量<br>类下面定义的变量，python更多的是称为数据成员<br>数据成员在于体现类的封装性<br>每个变量都可以认为是一个数据，这样的数据用来描述类的特征</p>
<p>没有必要特别区分函数和方法 变量和数据成员</p>
<p>9-3 类与对象。 (10:21)</p>
<p>类和对象到底是什么，他们之间的关系？</p>
<p>student = Student()<br>类和对象通过实例化关联起来的</p>
<p>什么是类？</p>
<p>类是显示世界或思维世界中的实体在计算机中的反映。<br>它将数据以及这些数据上的操作封装在一起</p>
<p>数据是类用来刻画某些事物的一些基本特性</p>
<p>除了数据是不够的，还要有一些行为</p>
<p>数据成员刻画特征，方法描述行为</p>
<p>类： 行为与特征</p>
<p>类的设计是一种艺术</p>
<p>print_file强行和student关联在一起并不合适</p>
<p>把握行为的主体是什么的原则</p>
<p>行为没有找对主体，是很多同学在设计面向对象的时候，最容易忽略的一个问题</p>
<p>class Student():<br>    name = ‘’<br>    age = 0</p>
<pre><code>def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><h1 id="class-Printer"><a href="#class-Printer" class="headerlink" title="class Printer():"></a>class Printer():</h1><p>#</p>
<h1 id="def-print-file-self"><a href="#def-print-file-self" class="headerlink" title="def print_file(self):"></a>def print_file(self):</h1><h1 id="print-‘name-’-self-name"><a href="#print-‘name-’-self-name" class="headerlink" title="print(‘name:’ + self.name)"></a>print(‘name:’ + self.name)</h1><h1 id="print-‘age-’-str-self-age"><a href="#print-‘age-’-str-self-age" class="headerlink" title="print(‘age:’ + str(self.age))"></a>print(‘age:’ + str(self.age))</h1><p>类是一个抽象的概念<br>类只是一类事物的总称，它并不具体</p>
<p>如何表示一个具体的学生？<br>对象表示具体的概念</p>
<p>类实例化之后就变成一个具体的对象</p>
<p>实例化的时候，需要向类里面传递类的一些特征和具体值，然后才能得到一个具体的对象<br>如果没有具体的数据，就不是一个对象。因为不具体，还是非常抽象</p>
<p>类是模版，通过模版可以做成各种各样的对象<br>对象具有共同的特性</p>
<p>类可以通过传入各种各样的特征的具体值来产生各种各样不同的对象</p>
<p>9-4 构造函数 (18:45)</p>
<p>实例化 实例化的意义</p>
<p>什么叫不同的对象？ 特征不相同</p>
<p>如何让类的模版生成不同的对象呢？<br>就是实例话要做的事情</p>
<p>student1 = Student()<br>student2 = Student()<br>student3 = Student()<br>这三个对象是一样的<br>因为他们的name和age是相同的<br>特征是相同的</p>
<p>不过不代表他们在计算机就是同一个对象</p>
<p>id()函数 查看他们的内存地址</p>
<p>print(id(student1))<br>print(id(student2))<br>print(id(student3))</p>
<p>2387536817288<br>2387537798816<br>2387537679864</p>
<p>三个对象的内存地址是完全不相同的</p>
<p>实例化过程中如何让对象不相同？</p>
<p>处理函数的过程会定义形参，然后传递不同的实参到函数内部，由此让函数返回不同的结果</p>
<p>实例化，也需要向类传递一系列的参数，让类生成的对象变得不相同</p>
<p>类的内部定义一个特殊的函数：<br>    def <strong>init</strong>(self):<br>        pass</p>
<p>这个特殊的函数，叫构造函数<br>构造函数的概念不是python所独有的，也是很多变成语言通用的概念</p>
<p>构造函数 构造方法</p>
<p>class Student():<br>    name = ‘’<br>    age = 0</p>
<pre><code>def __init__(self):
    print(&apos;student&apos;)

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student()<br>student1.<strong>init</strong>()</p>
<p>student<br>student</p>
<p>奇怪的现象，连续打印了两个student<br>但是我们只调用了一次构造函数</p>
<ol>
<li>构造函数的调用是自动进行的，实例化的时候python会自动调用构造函数；不需要显式调用；</li>
<li>能不能主动显式调用<strong>init</strong>()？ 可以，但是实际变成很少去主动显式调用<strong>init</strong>()。因为实例化的过程，构造函数已经调用过一次了，没必要再显式调用<strong>init</strong>()</li>
</ol>
<p>student1 = Student()<br>a = student1.<strong>init</strong>()<br>print(a)<br>print(type(a))</p>
<p>student<br>student<br>None</p>
<class 'nonetype'="">

<p>返回结果是一个空，<br>    def <strong>init</strong>(self):<br>        print(‘student’)<br>构造函数没有return任何值，相当于return None</p>
<pre><code>def __init__(self):
    print(&apos;student&apos;)
    return None


def __init__(self):
    print(&apos;student&apos;)
    return None
</code></pre><p>不会报错，但是</p>
<pre><code>def __init__(self):
    print(&apos;student&apos;)
    return &apos;hey&apos;
</code></pre><p>Traceback (most recent call last):<br>  File “student.py”, line 17, in <module><br>    student1 = Student()<br>TypeError: <strong>init</strong>() should return None, not ‘str’</module></p>
<p>不能返回字符串</p>
<p>init和普通函数的区别：<br>构造函数不能强行返回除了None之外的类型的值，python要求对于构造函数，只能返回None</p>
<p>养成探索和思考的精神和思维</p>
<p>不要用构造函数来返回东西，用普通函数</p>
<p>构造函数的作用；<br>模版生成不同的对象</p>
<p>通过在构造函数这个特殊函数内增加参数来<br>然后实例化的时候传入参数的值来让对象变得不同</p>
<p>注意实例化的时候传入的参数必须和构造函数的参数一致，不传的话会报错：<br>class Student():<br>    name = ‘’<br>    age = 0</p>
<pre><code>def __init__(self, name, age):
    print(&apos;student&apos;)

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student()</p>
<p>Traceback (most recent call last):<br>  File “student.py”, line 16, in <module><br>    student1 = Student()<br>TypeError: <strong>init</strong>() missing 2 required positional arguments: ‘name’ and ‘age’</module></p>
<p>要求必须传入参数<br>class Student():<br>    name = ‘’<br>    age = 0</p>
<pre><code>def __init__(self, name, age):
    print(&apos;student&apos;)

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)</p>
<p>student</p>
<p>student1 = Student(‘nana’, 18) 这种写法等同于直接点用构造函数</p>
<p>函数内部处理传入的参数</p>
<p>在构造函数的内部，我们通常做的最多的一件事情就是初始化类的特征值，初始化对象的特征</p>
<pre><code>name = &apos;&apos;
age = 0
</code></pre><p>没有意义的初始值</p>
<p>构造函数里把特征值付给初始值，改变变量的初始值<br>从而形成对象的特征</p>
<p>class Student():<br>    name = ‘’<br>    age = 0</p>
<pre><code>def __init__(self, name, age):
    name = name
    age = age
    print(&apos;student&apos;)

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)<br>print(student1.name)</p>
<p>student1.name 访问对象的变量或者方法都是通过.点号来操作的</p>
<p>php例外： student1-&gt;name</p>
<p>终端结果：<br>student</p>
<p>什么都没有打印出来<br>说明构造函数里的赋值，并没有改变name变量的取值</p>
<p>9-5 区别模块变量与类中的变量 (04:59)</p>
<p>回顾 模块的全局变量 局部变量</p>
<p>c = 50</p>
<p>def add(x, y):<br>    c = x + y<br>    print(c)</p>
<h1 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h1><p>add(1,2)<br>print(c)</p>
<p>打印结果 3 50<br>3 打印局部变量<br>50 打印全局变量</p>
<p>如果函数定义了一个和全局变量同名的变量的话，python里的局部变量并不会覆盖全局变量  注意！！！</p>
<p>局部变量的作用与仅仅局限在函数的内部</p>
<p>全局变量的值不会因为局部变量的值而更改</p>
<p>但是类中的变量和模块的变量是不能等同于的<br>类的机制和模块中的全局变量和局部变量的机制是不一样的</p>
<p>打出空值的真正原因：<br>类变量 实例变量</p>
<p>类变量和模块变量的相关行为分别对待</p>
<p>9-6 类变量与实例变量 (13:39)</p>
<p>什么是类变量 实例变量 及 他们的作用<br>类变量是和类相关联的 实例变量是和对象相关联的</p>
<p>student1 = Student(‘nana’, 18)<br>student2 = Student(‘helen’, 19)<br>这两个对象是不一样的<br>不一样在特征值</p>
<p>待 只写代码</p>
<pre><code>self.name = name
self.age = age
</code></pre><p>来保存不同的特征值<br>定义了两个实例变量<br>只和对象相关，和类没有关系<br>。。。。。。</p>
<p>self不能称做是关键字</p>
<p>关键字是固定不变的，但是self是可以变的，比如改成this</p>
<p>类变量和实例变量在语法特性上的不同<br>class Student():<br>    name = ‘hehe’<br>    age = 0</p>
<pre><code>def __init__(self, name, age):
    self.name = name
    self.age = age
    # print(&apos;student&apos;)

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)<br>student2 = Student(‘helen’, 19)<br>print(student1.name)<br>print(student2.name)<br>print(Student.name)</p>
<p>nana<br>helen<br>hehe</p>
<p>对象的name和类的name不是一个东西</p>
<p>类变量的定义有没有意义？</p>
<pre><code>sum = 0
name = &apos;&apos;
age = 0
</code></pre><p>做对比<br>类变量和具体的对象无关</p>
<p>9-7 类与对象的变量查找顺序 (12:51)</p>
<p>类变量和实例变量的特性</p>
<p>动态语言最大的缺点就是坑挺多</p>
<p>class Student():<br>    name = ‘’<br>    age = 0</p>
<pre><code>def __init__(self, name, age):
    name = name
    age = age

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)<br>print(student1.name)</p>
<p>打印出来是空字符串</p>
<p>class Student():<br>    name = ‘xixi’<br>    age = 0</p>
<pre><code>def __init__(self, name, age):
    name = name
    age = age

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)<br>print(student1.name)<br>打印出来的是 xixi</p>
<p>为什么想打印的是实例变量，最终打印出来的却是类变量？<br>打印类变量的正确方法：Student.name</p>
<p>对象隐藏的变量<strong>dict</strong> python内置的变量</p>
<p>class Student():<br>    name = ‘xixi’<br>    age = 0</p>
<pre><code>def __init__(self, name, age):
    name = name
    age = age

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)<br>print(student1.<strong>dict</strong>)</p>
<p>打印：{}<br>空的字典</p>
<p><strong>dict</strong>是个字典，保存着当前对象所有的相关变量</p>
<p>class Student():<br>    name = ‘xixi’<br>    age = 0</p>
<pre><code>def __init__(self, name, age):
    self.name = name
    self.age = age

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)<br>print(student1.<strong>dict</strong>)</p>
<p>打印：{‘name’: ‘nana’, ‘age’: 18}</p>
<p>python寻找相关变量的机制：<br>实例变量找不到 会去类变量里面找<br>如果在类里面没有找到，会去父类里寻找</p>
<p>还可以打印类的<strong>dict</strong></p>
<p>class Student():<br>    name = ‘xixi’<br>    age = 0</p>
<pre><code>def __init__(self, name, age):
    self.name = name
    self.age = age

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)<br>print(student1.<strong>dict</strong>)<br>print(Student.<strong>dict</strong>)</p>
<p>{‘name’: ‘nana’, ‘age’: 18}<br>{‘<strong>module</strong>‘: ‘<strong>main</strong>‘, ‘sum’: 0, ‘name’: ‘xixi’, ‘age’: 0, ‘<strong>init</strong>‘: <function student.__init__="" at="" 0x00000206f21b07b8="">, ‘do_homework’: <function student.do_homework="" at="" 0x00000206f2439ea0="">, ‘<strong>dict</strong>‘: <a ttribute="" '__dict__'="" of="" 'student'="" objects="">, ‘<strong>weakref</strong>‘: <attribute '__weakref__'="" of="" 'student'="" objects="">, ‘<strong>doc</strong>‘: None}</attribute></a></function></function></p>
<p>sum这样的统计数字是和类绑定在一起的</p>
<p>class Student():<br>    sum = 0</p>
<pre><code>def __init__(self, name, age):
    self.name = name
    self.age = age

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>思考；<br>class Student():<br>    name = ‘xixi’<br>    age = 0</p>
<pre><code>def __init__(self, name, age):
    self.name = name
    self.age = age
    print(age)
    print(name)

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)</p>
<p>问：print(age)<br>print(name) 打印的是什么</p>
<p>我：猜想的是类变量 实际终端输出的是<br>18<br>nana<br>实例变量的值<br>？？？？？？</p>
<p>方法里不一定是构造函数里，能不能访问类的变量？</p>
<p>9-8 self与实例方法 (08:01)</p>
<p>实例方法 参数第一个必须是self</p>
<p>类下面的实例方法，默认会有一个python所规定的参数，和我们自定义的参数是不同的</p>
<p>定义实例方法需要传入self，但是调用实例方法的时候，不需要传入self. self是python为我们默认传入的，我们自己不需要为self参数来赋值</p>
<p>self的两个特点：<br>定义实例方法的时候，self必须出现<br>调用实例方法的时候，不需要对self传参</p>
<p>self这个概念在其他编程语言里面也是有的<br>其他语言不需要显式的指定这样的一个参数，python特殊，强制要求必须显式指定<br>很多其他语言是使用this来代替python里面的self</p>
<p>只不过python要求：<br>1.必须显式定义<br>2.不叫this，叫self</p>
<p>self可以不叫self,可以改成任意喜欢的名字</p>
<p>class Student():<br>    sum = 0<br>    name = ‘xixi’<br>    age = 0</p>
<pre><code>def __init__(this, name, age):
    this.name = name
    this.age = age

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)<br>print(student1.<strong>dict</strong>)</p>
<p>输出：{‘name’: ‘nana’, ‘age’: 18}</p>
<p>总结：通过this一样可以指定这样的一个对象的实例变量，但是python建议使用self这样的实例变量</p>
<p>显胜于隐</p>
<p>self就是当前调用某一个方法的对象</p>
<p>student1.do_homework()<br>此时do_homework()的self指的就是student1</p>
<p>student2.do_homework()<br>self指的就是student2</p>
<p>self只和对象有关，和类没有关系<br>谁调用了这个方法，self就指代的就是谁</p>
<p>self代表的是实例，而不是类<br>self.name = name 就是对这样的一个实例变量在赋值</p>
<p>实例变量  和对象 也就是类生成的实例相关联的变量</p>
<p>实例方法   和对象 也就是类生成的实例相关联的方法，也就是实例可以调用的方法<br>最大特点：第一个参数需要传入self</p>
<p>self可以改成别的，所以self不是关键字</p>
<p>9-9 在实例方法中访问实例变量与类变量 (16:00)</p>
<p>思维导图 理清楚思路和结构</p>
<p>Python类：<br>变量：类变量 实例变量<br>方法：实例方法 后面类方法，静态方法<br>构造函数</p>
<p>这节实践 需要认真听</p>
<p>方法代表类的行为，而变量代表刻画类的特征</p>
<p>方法和变量的关系：<br>方法需要对变量做一系列的运算或者逻辑上的操作，最终改变变量的状态，这是方法最本质的意义<br>方法也可以完全不操作变量 少数</p>
<p>方法操作变量，方法如何访问变量？</p>
<p>实例方法操作实例变量，因为它们都是和对象相关联的<br>self.实例变量 给实例变量赋值 或读取实例变量</p>
<p>实例方法内部可以访问类变量吗？</p>
<p>1.构造方法可以看作特殊的实例方法，调用方式和实例方法不一样，调用构造函数是通过类后面的括号的方式来调用。调用普通的实例方法是通过对象.实例方法的方式如student1.do_homework()的方式来调用的<br>2.它们的意义不一样，实例方法主要用来描述类的行为，构造函数主要用来初始化类的各种特征的</p>
<p>不加self也可以访问实例变量<br>print(self.name)<br>print(name)</p>
<p>但是最好用self.name，经典错误如下：</p>
<p>self.name 和 name 是不等价的</p>
<h1 id="self-name-与-name"><a href="#self-name-与-name" class="headerlink" title="self.name 与 name"></a>self.name 与 name</h1><p>class Student():<br>    sum = 0</p>
<pre><code>def __init__(self, name, age):
    self.name = name
    self.age = age
    print(self.name)
    print(name)

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)</p>
<p>输出：<br>nana<br>nana</p>
<p>产生了假象</p>
<p>构造函数的形参改为name1</p>
<h1 id="self-name-与-name-1"><a href="#self-name-与-name-1" class="headerlink" title="self.name 与 name"></a>self.name 与 name</h1><p>class Student():<br>    sum = 0</p>
<pre><code>def __init__(self, name1, age):
    self.name = name1
    self.age = age
    print(self.name)
    print(name)

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)</p>
<p>输出：<br>此时报错了<br>nana<br>Traceback (most recent call last):<br>  File “C:/Users/Administrator/PycharmProjects/Native_Spider/student.py”, line 99, in <module><br>    student1 = Student(‘nana’, 18)<br>  File “C:/Users/Administrator/PycharmProjects/Native_Spider/student.py”, line 94, in <strong>init</strong><br>    print(name)<br>NameError: name ‘name’ is not defined</module></p>
<p>self.name 读取了对象的实例变量，并且打印出来了<br>name 并不是读取了对象的实例变量，它读取的是形参name</p>
<p>另一个误解：<br><strong>dict</strong>的查找机制</p>
<pre><code>print(self.name)
print(self.__dict__)
</code></pre><p>nana<br>{‘name’: ‘nana’, ‘age’: 18}<br>确实有name的变量存在<br>但是打印print(name) 依然会出错<br>要强调的误区：<br>实例方法内部，想通过一个name去进行<strong>dict</strong>的查找是不可以的，这种查找机制仅仅在通过在类的对象的外部调用的时候是可以的</p>
<p>实例方法如何访问类变量：</p>
<h1 id="实例方法如何访问类变量"><a href="#实例方法如何访问类变量" class="headerlink" title="实例方法如何访问类变量"></a>实例方法如何访问类变量</h1><p>class Student():<br>    sum = 0</p>
<pre><code>def __init__(self, name1, age):
    self.name = name1
    self.age = age
    print(sum)

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)</p>
<p>输出；<built-in function="" sum=""><br>把python内置函数sum给打印出来了</built-in></p>
<p>class Student():<br>    sum1 = 0</p>
<pre><code>def __init__(self, name1, age):
    self.name = name1
    self.age = age
    print(sum1)

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)<br>sum改成sum1,输出：<br>Traceback (most recent call last):<br>  File “C:/Users/Administrator/PycharmProjects/Native_Spider/student.py”, line 116, in <module><br>    student1 = Student(‘nana’, 18)<br>  File “C:/Users/Administrator/PycharmProjects/Native_Spider/student.py”, line 111, in <strong>init</strong><br>    print(sum1)<br>NameError: name ‘sum1’ is not defined</module></p>
<p>如何在类的外部访问类变量呢？<br>print(Studeng.name) 类名.类变量来访问类变量<br>外部可以这样使用，内部也可以这样使用</p>
<p>class Student():<br>    sum1 = 0</p>
<pre><code>def __init__(self, name1, age):
    self.name = name1
    self.age = age
    print(Student.sum1)

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)<br>print(Student.sum1)</p>
<p>print(Student.sum1)，输出：<br>0<br>0</p>
<p>实例方法访问类变量的第二种方式：<br>class Student():<br>    sum1 = 0</p>
<pre><code>def __init__(self, name1, age):
    self.name = name1
    self.age = age
    # print(Student.sum1)
    print(self.__class__.sum1)

def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)</p>
<p>输出：0</p>
<p>9-10 类方法 (15:40)</p>
<p>为什么会有类方法以及类方法的作用：</p>
<p>如何在方法里操作sum?</p>
<p>self.<strong>class</strong>.sum，这是数字，别忘了str(self.<strong>class</strong>.sum)<br>每当实例化一个对象，sum的基数就会增加1</p>
<p>class Student():<br>    sum = 0</p>
<pre><code>def __init__(self, name1, age):
    self.name = name1
    self.age = age
    # print(Student.sum1)
    self.__class__.sum += 1
    print(&apos;当前班级学生总数为：&apos; + str(self.__class__.sum))


def do_homework(self):
    print(&apos;homework&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)<br>student2 = Student(‘betty’, 17)<br>student3 = Student(‘jessica’, 16)</p>
<p>当前班级学生总数为：1<br>当前班级学生总数为：2<br>当前班级学生总数为：3</p>
<p>类变量和实例变量的区别？ 类变量的作用<br>类变量的正确使用场景是什么</p>
<p>可以放在别的方法，但是要调用那个方法才能生效</p>
<p>class Student():<br>    sum = 0</p>
<pre><code>def __init__(self, name1, age):
    self.name = name1
    self.age = age
    # print(Student.sum1)
    # self.__class__.sum += 1
    # print(&apos;当前班级学生总数为：&apos; + str(self.__class__.sum))


def do_homework(self):
    print(&apos;homework&apos;)
    self.__class__.sum += 1
    print(&apos;当前班级学生总数为：&apos; + str(self.__class__.sum))
</code></pre><p>student1 = Student(‘nana’, 18)<br>student1.do_homework()<br>student2 = Student(‘betty’, 17)<br>student2.do_homework()<br>student3 = Student(‘jessica’, 16)<br>student3.do_homework()</p>
<p>输出：<br>homework<br>当前班级学生总数为：1<br>homework<br>当前班级学生总数为：2<br>homework<br>当前班级学生总数为：3</p>
<p>类方法专门用来操作类变量的<br>类方法如何定义：</p>
<pre><code>def plus_sum(cls):
    pass
</code></pre><p>这个就是类方法吗？不是的</p>
<pre><code>@classmethod
def plus_sum(cls):
    pass
</code></pre><p>cls就是class的简写，@classmethod是装饰器</p>
<p>类方法的作用是用来操作和类相关的一些变量<br>    @classmethod<br>    def plus_sum(cls):<br>        cls.sum += 1<br>        print(cls.sum)<br>完成了最简单的类方法</p>
<p>类方法如何调用：<br>类方法只和类相关，和对象没什么关系<br>class Student():<br>    sum = 0</p>
<pre><code>def __init__(self, name1, age):
    self.name = name1
    self.age = age
    # self.__class__.sum += 1
    # print(&apos;当前班级学生总数为：&apos; + str(self.__class__.sum))


def do_homework(self):
    print(&apos;homework&apos;)

@classmethod
def plus_sum(cls):
    cls.sum += 1
    print(cls.sum)
</code></pre><p>student1 = Student(‘nana’, 18)<br>Student.plus_sum()<br>student2 = Student(‘nana’, 18)<br>Student.plus_sum()<br>student3 = Student(‘jessica’, 16)<br>Student.plus_sum()</p>
<p>输出：<br>1<br>2<br>3<br>cls可以叫别的名字吗？<br>可以，实例方法可以更改，类方法也可以更改</p>
<pre><code>@classmethod
def plus_sum(self):
    self.sum += 1
    print(self.sum)
</code></pre><p>输出：<br>1<br>2<br>3<br>是一样的</p>
<p>是不是实例方法和self cls没有关系</p>
<p>类方法和实例方法的区别：<br>类与对象的区别<br>实例方法关联的是对象这样一个事物<br>而类方法关联的是类本身</p>
<p>可以在实例方法操作类变量，还要类方法做什么？</p>
<p>self与cls的区别<br>self代表student1 student2 student3等对象<br>cls代表Student这个类</p>
<p>重要！！！<br>可以用对象来调用类方法吗？<br>可以</p>
<p>class Student():<br>    sum = 0</p>
<pre><code>def __init__(self, name1, age):
    self.name = name1
    self.age = age
    self.__class__.sum += 1
    print(&apos;当前班级学生总数为：&apos; + str(self.__class__.sum))

def do_homework(self):
    print(&apos;homework&apos;)

@classmethod
def plus_sum(self):
    self.sum += 1
    print(self.sum)
</code></pre><p>student1 = Student(‘nana’, 18)<br>student1.plus_sum()</p>
<p>输出：<br>当前班级学生总数为：1<br>2</p>
<p>但是最好不要。逻辑上说不通</p>
<p>9-11 静态方法 (09:08)</p>
<p>python静态方法应该如何调用？</p>
<pre><code>@staticmethod
def add(x,y):
    pass
</code></pre><p>静态方法和实例方法 类方法有什么不同？</p>
<ol>
<li>最大不同：不需要强制传入self或者cls; 就是一个普通的方法；</li>
<li>一个函数要成为静态方法需要加@staticmethod装饰器</li>
</ol>
<p>如何调用静态方法？<br>对象和类都可以调用静态方法</p>
<p>class Student():<br>    sum = 0</p>
<pre><code>def __init__(self, name1, age):
    self.name = name1
    self.age = age
    self.__class__.sum += 1
    print(&apos;当前班级学生总数为：&apos; + str(self.__class__.sum))

def do_homework(self):
    print(&apos;homework&apos;)

@classmethod
def plus_sum(self):
    self.sum += 1
    print(self.sum)

@staticmethod
def add(x, y):
    print(&apos;This is a static method&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)<br>student1.add(1, 2)<br>Student.add(1, 2)</p>
<p>输出：<br>当前班级学生总数为：1<br>This is a static method<br>This is a static method</p>
<p>静态方法内部可以访问类变量吗？<br>可以</p>
<pre><code>@staticmethod
def add(x, y):
    print(Student.sum)
    print(&apos;This is a static method&apos;)
</code></pre><p>输出：<br>1<br>This is a static method<br>1<br>This is a static method</p>
<p>为什么不是1和2？？？</p>
<p>类方法和静态方法可以访问实例变量吗？<br>class Student():<br>    sum = 0</p>
<pre><code>def __init__(self, name, age):
    self.name = name
    self.age = age
    self.__class__.sum += 1
    # print(&apos;当前班级学生总数为：&apos; + str(self.__class__.sum))

def do_homework(self):
    print(&apos;homework&apos;)

@classmethod
def plus_sum(self):
    print(self.name)

@staticmethod
def add(x, y):
    print(self.name)
</code></pre><p>student1 = Student(‘nana’, 18)<br>student1.add(1, 2)<br>Student.add(1, 2)<br>student1.plus_sum()<br>Student.plus_sum()</p>
<p>Traceback (most recent call last):<br>  File “C:/Users/Administrator/PycharmProjects/Native_Spider/student.py”, line 216, in <module><br>    student1.add(1, 2)<br>  File “C:/Users/Administrator/PycharmProjects/Native_Spider/student.py”, line 213, in add<br>    print(self.name)<br>NameError: name ‘self’ is not defined<br>会报错</module></p>
<p>class Student():<br>    sum = 0</p>
<pre><code>def __init__(self, name, age):
    self.name = name
    self.age = age
    self.__class__.sum += 1
    # print(&apos;当前班级学生总数为：&apos; + str(self.__class__.sum))

def do_homework(self):
    print(&apos;homework&apos;)

@classmethod
def plus_sum(self):
    print(name)

@staticmethod
def add(x, y):
    print(name)
</code></pre><p>student1 = Student(‘nana’, 18)<br>student1.add(1, 2)<br>Student.add(1, 2)<br>student1.plus_sum()<br>Student.plus_sum()</p>
<p>Traceback (most recent call last):<br>  File “C:/Users/Administrator/PycharmProjects/Native_Spider/student.py”, line 216, in <module><br>    student1.add(1, 2)<br>  File “C:/Users/Administrator/PycharmProjects/Native_Spider/student.py”, line 213, in add<br>    print(name)<br>NameError: name ‘name’ is not defined<br>还是会报错</module></p>
<p>Traceback (most recent call last):<br>  File “C:/Users/Administrator/PycharmProjects/Native_Spider/student.py”, line 218, in <module><br>    student1.plus_sum()<br>  File “C:/Users/Administrator/PycharmProjects/Native_Spider/student.py”, line 209, in plus_sum<br>    print(self.name)<br>AttributeError: type object ‘Student’ has no attribute ‘name’<br>报错</module></p>
<p>静态方法作用：<br>能用静态方法的地方，都可以用静态方法来代替<br>类方法更方便，而且静态方法还需要写类的全称才能访问类变量<br>建议静态方法不要经常使用，而且静态方法和面向对象的关联性非常弱</p>
<p>当一个函数和类和对象没有什么关联的时候，可以使用静态方法</p>
<p>Python的静态方法和其他语言的静态方法是不太一样的<br>C#的静态方法更像python里的类方法</p>
<p>思维导图总结</p>
<p>9-12 成员可见性：公开和私有 (23:12)</p>
<p>并非python所独有，绝大多数面向对象的语言都有</p>
<p>成员： 变量和方法</p>
<p>类是有内外之分的</p>
<p>类的外部 类的内部：</p>
<p>student1 = Student(‘nana’, 18)<br>student1.do_homework()<br>类的外部调用和访问类的方法</p>
<pre><code>def do_homework(self):
    self.do_english_homework()
    print(&apos;homework&apos;)

def do_english_homework(self):
    print(&apos;do english homework&apos;)
</code></pre><p>在类的内部调用</p>
<p>不仅方法有内外调用的区别，类变量和实例变量也有内外调用的区别。</p>
<p>类的最基本作用：封装代码</p>
<p>类的不安全</p>
<p>class Student():<br>    sum = 0</p>
<pre><code>def __init__(self, name, age, score):
    self.name = name
    self.age = age
    self.score = score
    self.__class__.sum += 1

def do_homework(self):
    self.do_english_homework()
    print(&apos;homework&apos;)

def do_english_homework(self):
    print(&apos;do english homework&apos;)

@classmethod
def plus_sum(self):
    pass

@staticmethod
def add(x, y):
    pass
</code></pre><p>student1 = Student(‘nana’, 18)</p>
<h1 id="student1-add-1-2"><a href="#student1-add-1-2" class="headerlink" title="student1.add(1, 2)"></a>student1.add(1, 2)</h1><h1 id="Student-add-1-2"><a href="#Student-add-1-2" class="headerlink" title="Student.add(1, 2)"></a>Student.add(1, 2)</h1><p>student1.plus_sum()<br>Student.plus_sum()<br>student1.score = -1</p>
<p>student1.score = -1<br>造成类的内部数据的不安全<br>只应该由类的内部的方法来操作类内部的变量<br>class Student():<br>    sum = 0</p>
<pre><code>def __init__(self, name, age):
    self.name = name
    self.age = age
    self.score = 0
    self.__class__.sum += 1

def marking(self, score):
    self.score = score
    print(self.name + &apos;同学本次开始分数为:&apos; + str(self.score))

def do_homework(self):
    self.do_english_homework()
    print(&apos;homework&apos;)

def do_english_homework(self):
    print(&apos;do english homework&apos;)

@classmethod
def plus_sum(self):
    pass

@staticmethod
def add(x, y):
    pass
</code></pre><p>student1 = Student(‘nana’, 18)<br>student1.marking(90)</p>
<p>输出：<br>nana同学本次开始分数为:90</p>
<p>student1.marking(-1)<br>student1.score = -1</p>
<p>通过方法的话，可以判断的<br>class Student():<br>    sum = 0</p>
<pre><code>def __init__(self, name, age):
    self.name = name
    self.age = age
    self.score = 0
    self.__class__.sum += 1

def marking(self, score):
    if score &lt; 0:
        # score = 0
            return &apos;不能够给别人打负分&apos;
    self.score = score
    print(self.name + &apos;同学本次开始分数为:&apos; + str(self.score))

def do_homework(self):
    self.do_english_homework()
    print(&apos;homework&apos;)

def do_english_homework(self):
    print(&apos;do english homework&apos;)

@classmethod
def plus_sum(self):
    pass

@staticmethod
def add(x, y):
    pass
</code></pre><p>student1 = Student(‘nana’, 18)<br>result = student1.marking(-1)</p>
<h1 id="student1-score-1"><a href="#student1-score-1" class="headerlink" title="student1.score = -1"></a>student1.score = -1</h1><p>print(result)</p>
<p>输出：不能够给别人打负分</p>
<p>编程提倡的规范：<br>一个类下面的数据变量是类非常重要的特征数据<br>如果要修改类的特征值，不应该直接通过访问变量的方式来改变变量的状态，<br>正确：所有对于类变量的更改都应该通过方法来完成，几乎所有语言都是这样来提倡的</p>
<p>在类的外部依然可以对类的变量进行赋值，解决？<br>涉及成员的可见性问题</p>
<p>student1.score = -1<br>成员可见性是公开的 public  类的外部可以直接访问 赋值或者读取</p>
<p>私有 private  类的外部无法直接访问 赋值或者读取</p>
<p>如何变成私有的？</p>
<p>其他语言，成员的可见性是非常明显的标记</p>
<p>python如何决定成员的可见性？</p>
<p>如果变量或者方法开头没有双下划线，都会认为变量或者方法是公开的</p>
<p>变量或者方法开头加了双下划线，就会认为变量或者方法是私有的</p>
<pre><code>def __marking(self, score):
    if score &lt; 0:
        # score = 0
            return &apos;不能够给别人打负分&apos;
    self.score = score
    print(self.name + &apos;同学本次开始分数为:&apos; + str(self.score))
</code></pre><p>Traceback (most recent call last):<br>  File “C:/Users/Administrator/PycharmProjects/Native_Spider/student.py”, line 255, in <module><br>    result = student1.<strong>marking(-1)<br>AttributeError: ‘Student’ object has no attribute ‘</strong>marking’<br>因为它已经变成了私有方法</module></p>
<p>为什么构造函数的前面有双下划线，我们依然可以在外部调用？<br>构造函数属于python特有的函数，确实是可以从外部访问的<br><strong>init</strong>前面有双下划线，后面也有双下划线。这样的命名方式，python不会认为是私有的</p>
<pre><code>def __marking__(self, score):
    if score &lt; 0:
        # score = 0
            return &apos;不能够给别人打负分&apos;
    self.score = score
    print(self.name + &apos;同学本次开始分数为:&apos; + str(self.score))
</code></pre><p>输出：不能够给别人打负分</p>
<p>如果想让变量或者方法变成私有的，只需在前面加双下划线，不要在后面也加双下划线</p>
<p><strong>init</strong>  这种命名风格是python内置变量的命名庚哥</p>
<p>score加双下划线：<br>class Student():<br>    sum = 0</p>
<pre><code>def __init__(self, name, age):
    self.name = name
    self.age = age
    self.__score = 0
    self.__class__.sum += 1

def __marking__(self, score):
    if score &lt; 0:
        # score = 0
            return &apos;不能够给别人打负分&apos;
    self.__score = score
    print(self.name + &apos;同学本次开始分数为:&apos; + str(self.__score))

def do_homework(self):
    self.do_english_homework()
    print(&apos;homework&apos;)

def do_english_homework(self):
    print(&apos;do english homework&apos;)

@classmethod
def plus_sum(self):
    pass

@staticmethod
def add(x, y):
    pass
</code></pre><p>student1 = Student(‘nana’, 18)<br>result = student1.<strong>marking</strong>(-1)<br>student1.__score = -1<br>print(result)</p>
<p>输出：不能够给别人打负分</p>
<p>并没有报错，为什么__score没有报错？</p>
<p>9-13 没有什么是不能访问 (09:21)</p>
<p>student1.<strong>score = -1<br>print(student1.</strong>score)<br>输出：<br>不能够给别人打负分<br>-1</p>
<p>赋值和读取都成功了</p>
<p>student1.__score = -1，实际上是给student1新添加了一个实例变量<br>python是可以通过.的方式来新添加一个新的实例变量</p>
<p>student1 = Student(‘nana’, 18)<br>student2 = Student(‘nana’, 18)</p>
<p>student1.<strong>score = -1<br>print(student1.</strong>score)</p>
<p>print(student2.__score)</p>
<p>输出：<br>-1<br>Traceback (most recent call last):<br>  File “C:/Users/Administrator/PycharmProjects/Native_Spider/student.py”, line 266, in <module><br>    print(student2.<strong>score)<br>AttributeError: ‘Student’ object has no attribute ‘</strong>score’</module></p>
<p>student1.<strong>score = -1  并不是类里面定义的</strong>score</p>
<p>python动态语言的特性</p>
<p>student1.<strong>score = -1<br>print(student1.</strong>dict<strong>)<br>输出：<br>{‘name’: ‘nana’, ‘age’: 18, ‘_Student</strong>score’: 0, ‘__score’: -1}<br>打印dict的内置变量</p>
<p>‘_Student<strong>score’就是我们原来定义的私有变量<br>双下划线</strong>score<br>python存储私有变量的时候会做一个更改</p>
<p>‘__score’是我们在外面动态添加的</p>
<p>为什么python访问私有变量或者方法的时候会报错呢？<br>‘_Student__score’  因为python已经把私有变量或者方法的名字给改了</p>
<p>print(student2.<strong>dict</strong>)</p>
<p>{‘name’: ‘nana’, ‘age’: 18, ‘_Student<strong>score’: 0}<br>没有’</strong>score’</p>
<p>python对私有变量的保护机制</p>
<p>所以不能通过动态的方式来访问私有变量，否则还是能访问到</p>
<p>严格意义上来将，python是没有私有变量的<br>print(student2._Student<strong>score)<br>输出；0<br>可以通过这种方式来访问私有变量：_Student</strong>score<br>间接读取私有变量</p>
<p>9-14 继承. (24:55)</p>
<p>面向对象三大特性：继承性 封装性 多态性<br>最难讲清楚 变化最多的反而是封装性<br>继承性 多态性 实实在在的语法问题</p>
<p>封装性抽象程度非常高</p>
<p>继承性作用：<br>类由两大块组成：类的特征和类的行为</p>
<p>1.避免我们定义重复的方法和重复的变量；</p>
<p>学生本质是一个人 学生和人构成继承关系</p>
<p>Python虽然可以在一个模块写多个类，但是建议一个模块只写一个类</p>
<p>一个文件定义一个类，结构上也是比较清晰的</p>
<p>from people import People<br>class Student(People):<br>    sum = 0</p>
<pre><code>def __init__(self, name, age):
    self.name = name
    self.age = age
    self.__score = 0
    self.__class__.sum += 1

def do_homework(self):
    print(&apos;english homework&apos;)
</code></pre><p>类括号里的空格是用来填写类的父类的</p>
<p>People是Student的父类<br>而Student是People的子类</p>
<p>什么是有意义的继承？</p>
<p>from human import Human<br>class Student(Human):</p>
<pre><code># sum = 0

# def __init__(self, name, age):
#     self.name = name
#     self.age = age
#     self.__score = 0
#     self.__class__.sum += 1

def do_homework(self):
    print(&apos;english homework&apos;)
</code></pre><p>student1 = Student()<br>print(student1.sum)<br>print(Student.sum)<br>print(student1.name)<br>print(student1.age)</p>
<p>输出；<br>Traceback (most recent call last):<br>  File “C:/Users/Administrator/PycharmProjects/Native_Spider/student.py”, line 286, in <module><br>    student1 = Student()<br>TypeError: <strong>init</strong>() missing 2 required positional arguments: ‘name’ and ‘age’<br>构造函数的继承性</module></p>
<p>print(Student.sum)<br>输出：0</p>
<p>TypeError: <strong>init</strong>() missing 2 required positional arguments: ‘name’ and ‘age’<br>实例化类的时候还是需要传入name和age</p>
<p>父类需要传入name和age，所以实例化子类的时候也需要传入name和age</p>
<p>from human import Human<br>class Student(Human):</p>
<pre><code># sum = 0

# def __init__(self, name, age):
#     self.name = name
#     self.age = age
#     self.__score = 0
#     self.__class__.sum += 1

def do_homework(self):
    print(&apos;english homework&apos;)
</code></pre><p>student1 = Student(‘nana’, 18)<br>print(student1.sum)<br>print(Student.sum)<br>print(student1.name)<br>print(student1.age)</p>
<p>0<br>0<br>nana<br>18</p>
<p>类变量和实例变量同样可以被子类继承</p>
<p>student1.get_name()<br>输出：nana</p>
<p>子类也能继承父类的方法</p>
<p>python可以多继承  一个子类可以继承多个父类</p>
<p>一个子类只能有一个父类 单继承</p>
<p>单继承可以让整个的继承链条变得清晰</p>
<p>子类需要有自己的特征变量</p>
<p>子类调用父类的构造函数；<br>class Student(Human):</p>
<pre><code># sum = 0

def __init__(self, school, name, age):
    self.school = school
    Human.__init__(name, age)
</code></pre><p>显式调用父类的构造函数</p>
<p>from human import Human<br>class Student(Human):</p>
<pre><code># sum = 0

def __init__(self, school, name, age):
    self.school = school
    Human.__init__(name, age)
    # self.__score = 0
    # self.__class__.sum += 1

def do_homework(self):
    print(&apos;english homework&apos;)
</code></pre><p>student1 = Student(‘牛逼小学’,’nana’, 18)</p>
<h1 id="print-student1-sum"><a href="#print-student1-sum" class="headerlink" title="print(student1.sum)"></a>print(student1.sum)</h1><h1 id="print-Student-sum"><a href="#print-Student-sum" class="headerlink" title="print(Student.sum)"></a>print(Student.sum)</h1><p>print(student1.school)<br>print(student1.name)<br>print(student1.age)</p>
<p>输出：<br>Traceback (most recent call last):<br>  File “C:/Users/Administrator/PycharmProjects/Native_Spider/student.py”, line 286, in <module><br>    student1 = Student(‘牛逼小学’,’nana’, 18)<br>  File “C:/Users/Administrator/PycharmProjects/Native_Spider/student.py”, line 278, in <strong>init</strong><br>    Human.<strong>init</strong>(name, age)<br>TypeError: <strong>init</strong>() missing 1 required positional argument: ‘age’</module></p>
<pre><code>Human.__init__(self,name, age)
</code></pre><p>输出：<br>牛逼小学<br>nana<br>18</p>
<p>为什么要传self?</p>
<p>9-15 子类方法调用父类方法：super关键字 (15:17)</p>
<p>Human.<strong>init</strong>(self,name, age)<br>类去调用实例方法是说不通的<br>但是python不限制你强行这么做</p>
<p>对象调用实例方法不需要传入self</p>
<p>Student.do_homework()<br>输出：<br>  File “C:/Users/Administrator/PycharmProjects/Native_Spider/student.py”, line 292, in <module><br>    Student.do_homework()<br>TypeError: do_homework() missing 1 required positional argument: ‘self’</module></p>
<p>Student.do_homework(student1)<br>输出：english homework</p>
<p>Student.do_homework(student1)<br>但是这种方式可笑 并且多此一举</p>
<p>Student.do_homework(‘’)<br>没有报错</p>
<p>通过类来调用，self变成普通参数了</p>
<p>更改类的代码的行为，是非常不可取的</p>
<p>编程 开闭原则  扩展代码是开放的，但是更改本身代码是关闭的</p>
<p>第二种调用构造函数的方式：</p>
<p>class Student(Human):</p>
<pre><code># sum = 0

def __init__(self, school, name, age):
    self.school = school
    # Human.__init__(self,name, age)
    super(Student, self).__init__(name,age)
</code></pre><p>输出：<br>牛逼小学<br>nana<br>18</p>
<p>super关键字并不是只能用在构造函数里面</p>
<p>class Human():<br>    sum = 0<br>    def <strong>init</strong>(self, name, age):<br>        self.name = name<br>        self.age = age</p>
<pre><code>def get_name(self):
    print(self.name)

def do_homework(self):
    print(&apos;This ia a parent method&apos;)
</code></pre><p>from human import Human<br>class Student(Human):</p>
<pre><code># sum = 0

def __init__(self, school, name, age):
    self.school = school
    # Human.__init__(self,name, age)
    super(Student, self).__init__(name,age)
    # self.__score = 0
    # self.__class__.sum += 1

def do_homework(self):
    print(&apos;english homework&apos;)
</code></pre><p>student1 = Student(‘牛逼小学’,’nana’, 18)<br>student1.do_homework()</p>
<p>输出： english homework</p>
<p>子类和父类出现同名方法，python不会报错，会优先调用子类方法</p>
<pre><code>def do_homework(self):
    super(Student, self).do_homework()
    print(&apos;english homework&apos;)
</code></pre><p>输出：<br>This ia a parent method<br>english homework</p>
<p>super也可以用于普通的实例方法</p>
<p>第10章 正则表达式与JSON</p>
<p>10-1 初识正则表达式 (13:24)<br>10-2 元字符与普通字符 (09:10)<br>10-3 字符集 (07:31)<br>10-4 概括字符集 (10:33)<br>10-5 数量词 (05:43)<br>10-6 贪婪与非贪婪 (05:09)<br>10-7 匹配0次1次或者无限多次 (10:45)<br>10-8 边界匹配符 (07:59)<br>10-9 组 (03:36)<br>10-10 匹配模式参数 (06:46)<br>10-11 re.sub正则替换 (16:02)<br>10-12 把函数作为参数传递 (07:52)<br>10-13 search与match函数 (09:02)<br>10-14 group分组 (12:55)<br>10-15 一些关于学习正则的建议 (04:36)<br>10-16 理解JSON (10:28)<br>10-17 反序列化 (16:28)<br>10-18 序列化 (10:51)<br>10-19 小谈JSON、JSON对象与JSON字符串 (09:29)</p>
<p>第11章 Python的高级语法与用法</p>
<p>11-1 枚举其实是一个类 (08:54)<br>11-2 枚举和普通类相比有什么优势 (08:48)<br>11-3 枚举类型、枚举名称与枚举值 (05:11)<br>11-4 枚举的比较运算 (04:33)<br>11-5 枚举注意事项 (05:18)<br>11-6 枚举转换 (05:59)<br>11-7 枚举小结 (09:09)<br>11-8 进阶内容开场白 (06:00)<br>11-9 一切皆对象 (12:45)<br>11-10 什么是闭包 (15:41)<br>11-11 一个事例看看闭包 (04:24)<br>11-12 闭包的经典误区 (08:08)<br>11-13 出个题,用闭包解决! (04:29)<br>11-14 我先用非闭包解决一下 (09:21)<br>11-15 再用闭包解决一下_ (09:55)<br>11-16 小谈函数式编程 (08:10)</p>
<p>第12章 函数式编程： 匿名函数、高阶函数、装饰器</p>
<p>12-1 lambda表达式。 (10:12)<br>12-2 三元表达式 (06:30)<br>12-3 map (07:30)<br>12-4 map与lambda (06:41)<br>12-5 reduce (14:19)<br>12-6 filter (06:15)<br>12-7 命令式编程vs函数式编程 (06:47)<br>12-8 装饰器 一 (13:04)<br>12-9 装饰器 二 (08:43)<br>12-10 装饰器 三 (08:46)<br>12-11 装饰器 四 (07:38)<br>12-12 装饰器 五 (07:35)<br>12-13 装饰器 六 (08:43)</p>
<p>第13章 实战：原生爬虫</p>
<p>13-1 分析抓取目的确定抓取页面 (07:30)<br>13-2 整理爬虫常规思路 (09:38)<br>13-3 VSCode中调试代码 (11:57)<br>13-4 HTML结构分析基本原则二条 (08:23)<br>13-5 数据提取层级分析及原则三 (13:07)<br>13-6 正则分析HTML (15:12)<br>13-7 正则分析获取名字和人数 (06:05)<br>13-8 数据精炼 (06:53)<br>13-9 sorted 排序 (12:11)<br>13-10 案例总结 (19:10)</p>
<p>第14章 Pythonic与Python杂记</p>
<p>14-1 导言 (05:30)<br>14-2 用字典映射代替switch case语句 (13:57)<br>14-3 列表推导式 (09:36)<br>14-4 字典如何编写列表推导式 (05:19)<br>14-5 None (08:53)<br>14-6 对象存在并不一定是True (05:56)<br>14-7 <strong>len</strong>与<strong>bool</strong>内置方法 (10:16)<br>14-8 装饰器的副作用 (08:27)</p>
</class>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第1章 Python入门导学&lt;/p&gt;
&lt;p&gt;1-1 导学 (11:33)&lt;/p&gt;
&lt;p&gt;python2处于维护期&lt;/p&gt;
&lt;p&gt;了解语法是编程的先决条件，精通语法是编好程的必要条件&lt;/p&gt;
&lt;p&gt;Life is simple, I use python.&lt;/p&gt;
&lt;p&gt;如何
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>为元组元素命名提高程序可读性</title>
    <link href="http://yoursite.com/2017/12/01/%E4%B8%BA%E5%85%83%E7%BB%84%E5%85%83%E7%B4%A0%E5%91%BD%E5%90%8D%E6%8F%90%E9%AB%98%E7%A8%8B%E5%BA%8F%E5%8F%AF%E8%AF%BB%E6%80%A7/"/>
    <id>http://yoursite.com/2017/12/01/为元组元素命名提高程序可读性/</id>
    <published>2017-12-01T13:23:01.000Z</published>
    <updated>2017-12-01T14:56:39.364Z</updated>
    
    <content type="html"><![CDATA[<p>数据格式固定，意味字段总数是确定的，字段相对位置也是确定的。这时可以使用元组存储信息。元组优势存储空间小，访问速度快。但是使用元组的时候会遇到一些问题，访问是，使用引索index访问，大量引索降低程序可读性。</p>
<p>student = (‘Jim’, 16, ‘male’, ‘jim8721@gmail.com’)</p>
<h1 id="name"><a href="#name" class="headerlink" title="name"></a>name</h1><p>print student[0]</p>
<h1 id="age"><a href="#age" class="headerlink" title="age"></a>age</h1><p>if student[1] &gt;= 18:<br>…</p>
<h1 id="sex"><a href="#sex" class="headerlink" title="sex"></a>sex</h1><p>if student[2] == ‘male’:<br>…</p>
<p>程序将大量充斥着0 1 2 3这样的一些引索值，这些数字对于程序的维护是不利的，因为很难一眼就看出这些0 1 2代表是什么含义</p>
<p>C语言<br>宏定义</p>
<p>#define NAME 0</p>
<p>#define AGE 1</p>
<p>c语言的枚举类型<br>enum Studnet {<br>    NAME,<br>    AGE,<br>    SEX<br>}<br>它们分别等于0 1 2这些数字</p>
<p>方案1： 定义类似于其他语言的枚举类型，也就是定义一系列数值常量。<br>方案2：使用标准库中collections.nametuple替代内置tuple</p>
<p>方案1： 定义类似于其他语言的枚举类型，也就是定义一系列数值常量。</p>
<p>python没有真正的枚举类型，但是我们可以定义一些常量，访问元组的字段就可以用这些常量了。<br>NAME = 0<br>AGE = 1<br>SEX = 2<br>EMAIL = 3</p>
<p>student = (‘Jim’, 16, ‘male’, ‘jim8721@gmail.com’)</p>
<h1 id="name-1"><a href="#name-1" class="headerlink" title="name"></a>name</h1><p>print student[NAME]</p>
<h1 id="age-1"><a href="#age-1" class="headerlink" title="age"></a>age</h1><p>if student[AGE] &gt;= 18:<br>…</p>
<h1 id="sex-1"><a href="#sex-1" class="headerlink" title="sex"></a>sex</h1><p>if student[SEX] == ‘male’:<br>…</p>
<p>列表拆包的形式：<br>NAME. AGE, SEX, EMAIL = xrange(4)</p>
<p>student = (‘Jim’, 16, ‘male’, ‘jim8721@gmail.com’)</p>
<h1 id="name-2"><a href="#name-2" class="headerlink" title="name"></a>name</h1><p>print student[NAME]</p>
<h1 id="age-2"><a href="#age-2" class="headerlink" title="age"></a>age</h1><p>if student[AGE] &gt;= 18:<br>…</p>
<h1 id="sex-2"><a href="#sex-2" class="headerlink" title="sex"></a>sex</h1><p>if student[SEX] == ‘male’:<br>…<br>会分别把0 1 2 3赋给这些变量</p>
<p>方案2：使用标准库中collections.nametuple替代内置tuple</p>
<p>from collections import nametuple</p>
<p>Student = nametuple(‘Student’, [‘name’, ‘age’, ‘sex’, ‘email’])</p>
<p>nametuple函数能返回一个内置元组的子类<br>第一个参数，新创建的类起个名字<br>然后传入每个引索的名字<br>相当于类的工厂</p>
<p>s就是一个命名的元组</p>
<p>s = Student(‘Jim’, 16, ‘male’, ‘jim@gmail.com’)<br>s<br>Student(name=’Jim’, age=16, sex=’male’, email=’jim@gmail.com’)</p>
<p>位置传参</p>
<p>还可以使用关键字传参<br>s2 = Student(name=’Jim’, age=16, sex=’male’, email=’jim@gmail.com’)</p>
<p>s.name<br>s.age<br>s.sex</p>
<p>我们以类对象的形式访问元组，整个开销仅比普通元组大了一点点</p>
<p>并且s是内置元组的子类</p>
<p>任何使用普通元组的地方都可以使用nametuple</p>
<blockquote>
<blockquote>
<blockquote>
<p>from collections import nametuple<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>ImportError: cannot import name nametuple<br>????</module></stdin></p>
</blockquote>
</blockquote>
</blockquote>
<p>这是怎么回事？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据格式固定，意味字段总数是确定的，字段相对位置也是确定的。这时可以使用元组存储信息。元组优势存储空间小，访问速度快。但是使用元组的时候会遇到一些问题，访问是，使用引索index访问，大量引索降低程序可读性。&lt;/p&gt;
&lt;p&gt;student = (‘Jim’, 16, ‘ma
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>列表字典集合中根据条件筛选数据</title>
    <link href="http://yoursite.com/2017/11/30/%E5%88%97%E8%A1%A8%E5%AD%97%E5%85%B8%E9%9B%86%E5%90%88%E4%B8%AD%E6%A0%B9%E6%8D%AE%E6%9D%A1%E4%BB%B6%E7%AD%9B%E9%80%89%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2017/11/30/列表字典集合中根据条件筛选数据/</id>
    <published>2017-11-30T13:29:16.000Z</published>
    <updated>2017-11-30T14:23:14.242Z</updated>
    
    <content type="html"><![CDATA[<p>实际案例；</p>
<ol>
<li>过滤掉列表[3,9,-1,10,20,-2…中的负数]</li>
<li>筛出字典{‘Lilei’:79, ‘Jim’:88, ‘Lucy’:92…}中值高于90的项</li>
<li>筛出集合{77，89，32，20…}中能被3整除的元素</li>
</ol>
<p>通用做法=迭代：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">data = [1, 5, -3, -2, 6, 0 , 9]</div><div class="line"></div><div class="line">res = []</div><div class="line">for x in data:  依次迭代列表中每个项</div><div class="line">	if x &gt;= 0:	条件判断</div><div class="line">		res.append(x)</div><div class="line">print res</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">函数式编程 解析等</div><div class="line"></div><div class="line">解决方案：</div><div class="line">## 列表</div><div class="line">#### filter函数 filter(lambda x: x &gt;=0, data)</div><div class="line">#### 列表解析 [x for x in data if x &gt;= 0]</div><div class="line"></div><div class="line">## 字典</div><div class="line">#### 字典解析 &#123;k:v for k,v in d.iteritems() if v &gt; 90&#125;</div><div class="line"></div><div class="line">## 集合</div><div class="line">#### 集合解析 &#123;x for x in s if x % 3 == 0&#125;</div><div class="line"></div><div class="line">生成随机列表 </div><div class="line">from random import randint</div><div class="line">data = [randint(-10, 10) for _ in xrange(10)]</div><div class="line">过滤掉其中负数</div><div class="line"></div><div class="line">### filter函数</div><div class="line">filter(lambda x: x &gt;= 0, data)</div></pre></td></tr></table></figure></p>
<p>C:\Windows\system32&gt;python2<br>Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:24:40) [MSC v.1500 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.</p>
<blockquote>
<blockquote>
<blockquote>
<p>from random import randint<br>data = [randint(-10, 10) for _ in xrange(10)]<br>data<br>[-1, 8, 9, 9, 4, 1, -9, 7, -7, -1]<br>filter?<br>  File “<stdin>“, line 1<br>    filter?<br>          ^<br>SyntaxError: invalid syntax<br>filter</stdin></p>
<p><built-in function="" filter=""><br>help(filter)<br>Help on built-in function filter in module <strong>builtin</strong>:</built-in></p>
</blockquote>
</blockquote>
</blockquote>
<p>filter(…)<br>    filter(function or None, sequence) -&gt; list, tuple, or string</p>
<pre><code>Return those items of sequence for which function(item) is true.  If
function is None, return the items that are true.  If sequence is a tuple
or string, return the same type, else return a list.
</code></pre><blockquote>
<blockquote>
<blockquote>
<p>filter(lambda x: x &gt;= 0, data)<br>[8, 9, 9, 4, 1, 7]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">### 列表解析</div></pre></td></tr></table></figure>
<p>[x for x in data if x &gt;= 0]<br>[8, 9, 9, 4, 1, 7]<br>```</p>
</blockquote>
</blockquote>
</blockquote>
<p>filter和列表解析对比</p>
<p>timeit filter(lambda x:x &gt;= 0, data)</p>
<blockquote>
<blockquote>
<blockquote>
<p>timeit filter(lambda x: x &gt;= 0, data)<br>  File “<stdin>“, line 1<br>    timeit filter(lambda x: x &gt;= 0, data)<br>                ^<br>SyntaxError: invalid syntax<br>timeit<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>NameError: name ‘timeit’ is not defined<br>help(timeit)<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>NameError: name ‘timeit’ is not defined<br>import timeit<br>timeit filter(lambda x: x &gt;= 0, data)<br>  File “<stdin>“, line 1<br>    timeit filter(lambda x: x &gt;= 0, data)<br>                ^<br>SyntaxError: invalid syntax<br>timeit(‘filter(lambda x: x &gt;= 0, data)’)<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>TypeError: ‘module’ object is not callable<br>from timeit import timeit<br>timeit(‘filter(lambda x: x &gt;= 0, data)’)<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>  File “C:\Python27\lib\timeit.py”, line 237, in timeit<br>    return Timer(stmt, setup, timer).timeit(number)<br>  File “C:\Python27\lib\timeit.py”, line 202, in timeit<br>    timing = self.inner(it, self.timer)<br>  File “<timeit-src>“, line 6, in inner<br>NameError: global name ‘data’ is not defined<br>from random import randint<br>data = [randint(-10, 10) for <em> in xrange(10)]<br>data<br>[-10, -6, 8, 2, -6, -1, -3, -6, -9, -7]<br>filter(lambda x: x &gt;= 0, data)<br>[8, 2]<br>from timeit import timeit<br>timeit(‘filter(lambda x: x &gt;= 0, data)’)<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>  File “C:\Python27\lib\timeit.py”, line 237, in timeit<br>    return Timer(stmt, setup, timer).timeit(number)<br>  File “C:\Python27\lib\timeit.py”, line 202, in timeit<br>    timing = self.inner(it, self.timer)<br>  File “<timeit-src>“, line 6, in inner<br>NameError: global name ‘data’ is not defined<br>from timeit import timeit<br>from random import randint<br>timeit(‘filter(lambda x: x &gt;= 0, data=[randint(-10, 10) for </timeit-src></module></stdin></em> in xrange(10)])’)<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>  File “C:\Python27\lib\timeit.py”, line 237, in timeit<br>    return Timer(stmt, setup, timer).timeit(number)<br>  File “C:\Python27\lib\timeit.py”, line 202, in timeit<br>    timing = self.inner(it, self.timer)<br>  File “<timeit-src>“, line 6, in inner<br>NameError: global name ‘randint’ is not defined<br>timeit filter(lambda x:x &gt;= 0, [-1, 8, 9, 9, 4, 1, -9, 7, -7, -1])<br>  File “<stdin>“, line 1<br>    timeit filter(lambda x:x &gt;= 0, [-1, 8, 9, 9, 4, 1, -9, 7, -7, -1])<br>                ^<br>SyntaxError: invalid syntax<br>timeit(‘filter(lambda x: x &gt;= 0, [-1, 8, 9, 9, 4, 1, -9, 7, -7, -1])’)<br>4.256596223743941</stdin></timeit-src></module></stdin></timeit-src></module></stdin></module></stdin></stdin></module></stdin></module></stdin></stdin></p>
<p>timeit(‘[x for x in [-1, 8, 9, 9, 4, 1, -9, 7, -7, -1] if x &gt;= 0]’)<br>2.2746409958225513</p>
</blockquote>
</blockquote>
</blockquote>
<p>通常认为列表解析更快一点，首选也是列表解析<br>这两种方式都远快于迭代的方式</p>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>d = {x：randint(60, 100) for x in xrange(1, 21)}</p>
<blockquote>
<blockquote>
<blockquote>
<p>from random import randint<br>d = {x：randint(60, 100) for x in xrange(1, 21)}<br>  File “<stdin>“, line 1<br>    d = {x：randint(60, 100) for x in xrange(1, 21)}<br>          ^<br>SyntaxError: invalid syntax<br>d = {x: randint(60, 100) for x in xrange(1, 21)}<br>d<br>{1: 67, 2: 87, 3: 79, 4: 76, 5: 78, 6: 61, 7: 75, 8: 97, 9: 83, 10: 71, 11: 94, 12: 87, 13: 65, 14: 88, 15: 90, 16: 91, 17: 76, 18: 73, 19: 67, 20: 77}</stdin></p>
</blockquote>
</blockquote>
</blockquote>
<p>{k: v for k, v in d.iteritems() if v &gt; 90}</p>
<blockquote>
<blockquote>
<blockquote>
<p>from random import randint<br>d = {x：randint(60, 100) for x in xrange(1, 21)}<br>  File “<stdin>“, line 1<br>    d = {x：randint(60, 100) for x in xrange(1, 21)}<br>          ^<br>SyntaxError: invalid syntax<br>d = {x: randint(60, 100) for x in xrange(1, 21)}<br>d<br>{1: 67, 2: 87, 3: 79, 4: 76, 5: 78, 6: 61, 7: 75, 8: 97, 9: 83, 10: 71, 11: 94, 12: 87, 13: 65, 14: 88, 15: 90, 16: 91, 17: 76, 18: 73, 19: 67, 20: 77}<br>{k: v for k, v in d.iteritems() if v &gt; 90}<br>{8: 97, 16: 91, 11: 94}</stdin></p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>data转换成集合<br>s = set(data)<br>集合解析类似字典解析<br>{x for x in s if x % 3 == 0}</p>
<blockquote>
<blockquote>
<blockquote>
<p>from random import randint<br>data = [randint(-10, 10) for _ in xrange(10)]<br>data<br>[-8, -6, 6, -3, 10, -10, 8, -5, 2, 9]<br>s = set(data)<br>{for x in s if x % 3 == 0}<br>  File “<stdin>“, line 1<br>    {for x in s if x % 3 == 0}<br>       ^<br>SyntaxError: invalid syntax<br>{x for x in s if x % 3 == 0}<br>set([9, -6, -3, 6])</stdin></p>
</blockquote>
</blockquote>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实际案例；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;过滤掉列表[3,9,-1,10,20,-2…中的负数]&lt;/li&gt;
&lt;li&gt;筛出字典{‘Lilei’:79, ‘Jim’:88, ‘Lucy’:92…}中值高于90的项&lt;/li&gt;
&lt;li&gt;筛出集合{77，89，32，20…}中能被3整除的
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python错误与异常</title>
    <link href="http://yoursite.com/2017/11/28/python%E9%94%99%E8%AF%AF%E4%B8%8E%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2017/11/28/python错误与异常/</id>
    <published>2017-11-28T14:29:34.000Z</published>
    <updated>2017-11-28T21:20:54.028Z</updated>
    
    <content type="html"><![CDATA[<p>错误：</p>
<ol>
<li>语法错误：代码不符合解释器或者编译器语法；</li>
<li>逻辑错误：不完成或者不合法输入或者计算出现问题。</li>
</ol>
<p>异常：执行过程中出现问题导致程序无法执行</p>
<ol>
<li>程序遇到逻辑或者算法问题；</li>
<li>运行过程中计算机错误（内存不够或者IO错误）</li>
</ol>
<p>错误与异常区别：<br>错误：<br>代码运行前的语法或者逻辑错误；<br>语法错误在执行前修改，逻辑错误无法修改。</p>
<p>异常分为两个步骤：<br>1.异常产生，检查到错误且解释器认为是异常，抛出异常；</p>
<ol>
<li>异常处理，截获一场，忽略或者终止程序处理异常。</li>
</ol>
<p>python常见错误：</p>
<ol>
<li>a:NameError<br>Python 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 16:02:32) [MSC v.1900 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.<blockquote>
<blockquote>
<blockquote>
<p>a<br>Traceback (most recent call last):<br>File “<stdin>“, line 1, in <module><br>NameError: name ‘a’ is not defined</module></stdin></p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ol>
<p>C:\Windows\system32&gt;python2<br>Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:24:40) [MSC v.1500 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.</p>
<blockquote>
<blockquote>
<blockquote>
<p>a<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>NameError: name ‘a’ is not defined</module></stdin></p>
</blockquote>
</blockquote>
</blockquote>
<ol>
<li>if True: SyntaxError<br>Python 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 16:02:32) [MSC v.1900 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.<blockquote>
<blockquote>
<blockquote>
<p>if a<br>File “<stdin>“, line 1<br> if a</stdin></p>
<pre><code>^
</code></pre><p>SyntaxError: invalid syntax</p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ol>
<p>Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:24:40) [MSC v.1500 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.</p>
<blockquote>
<blockquote>
<blockquote>
<p>if a<br>  File “<stdin>“, line 1<br>    if a<br>       ^<br>SyntaxError: invalid syntax</stdin></p>
</blockquote>
</blockquote>
</blockquote>
<p>Python 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 16:02:32) [MSC v.1900 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.</p>
<blockquote>
<blockquote>
<blockquote>
<p>if a:<br>…     print a<br>  File “<stdin>“, line 2<br>    print a<br>          ^<br>SyntaxError: Missing parentheses in call to ‘print’<br>if a:<br>…     print (a)<br>…<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>NameError: name ‘a’ is not defined</module></stdin></stdin></p>
</blockquote>
</blockquote>
</blockquote>
<p>Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:24:40) [MSC v.1500 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.</p>
<blockquote>
<blockquote>
<blockquote>
<p>if a:<br>…     print a<br>…<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>NameError: name ‘a’ is not defined</module></stdin></p>
</blockquote>
</blockquote>
</blockquote>
<ol>
<li>f=open(‘1.txt’): IOError<br>Python 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 16:02:32) [MSC v.1900 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.<blockquote>
<blockquote>
<blockquote>
<p>f = open(‘test.txt’)<br>Traceback (most recent call last):<br>File “<stdin>“, line 1, in <module><br>FileNotFoundError: [Errno 2] No such file or directory: ‘test.txt’</module></stdin></p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ol>
<p>Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:24:40) [MSC v.1500 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.</p>
<blockquote>
<blockquote>
<blockquote>
<p>f = open(‘test.txt’)<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>IOError: [Errno 2] No such file or directory: ‘test.txt’</module></stdin></p>
</blockquote>
</blockquote>
</blockquote>
<ol>
<li>10/0: ZeroDivisionError<br>Python 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 16:02:32) [MSC v.1900 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.<blockquote>
<blockquote>
<blockquote>
<p>10/0<br>Traceback (most recent call last):<br>File “<stdin>“, line 1, in <module><br>ZeroDivisionError: division by zero</module></stdin></p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ol>
<p>Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:24:40) [MSC v.1500 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.</p>
<blockquote>
<blockquote>
<blockquote>
<p>10/0<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>ZeroDivisionError: integer division or modulo by zero</module></stdin></p>
</blockquote>
</blockquote>
</blockquote>
<p>5: a = int(‘dd’): ValueError</p>
<p>Python 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 16:02:32) [MSC v.1900 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.</p>
<blockquote>
<blockquote>
<blockquote>
<p>a = int(‘100’)<br>a<br>100<br>a = int(‘a100’)<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>ValueError: invalid literal for int() with base 10: ‘a100’</module></stdin></p>
</blockquote>
</blockquote>
</blockquote>
<p>Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:24:40) [MSC v.1500 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.</p>
<blockquote>
<blockquote>
<blockquote>
<p>a = int(‘100’)<br>a<br>100<br>a = int(‘a100’)<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>ValueError: invalid literal for int() with base 10: ‘a100’</module></stdin></p>
</blockquote>
</blockquote>
</blockquote>
<p>ctrl+C 杀掉程序<br>Python 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 16:02:32) [MSC v.1900 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.</p>
<blockquote>
<blockquote>
<blockquote>
<p>import time<br>for i in range(10):<br>…     time.sleep(2)<br>…<br>Traceback (most recent call last):<br>  File “<stdin>“, line 2, in <module><br>KeyboardInterrupt</module></stdin></p>
</blockquote>
</blockquote>
</blockquote>
<p>Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:24:40) [MSC v.1500 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.</p>
<blockquote>
<blockquote>
<blockquote>
<p>import time<br>for i in range(10):<br>…     time.sleep(2)<br>…<br>Traceback (most recent call last):<br>  File “<stdin>“, line 2, in <module><br>KeyboardInterrupt</module></stdin></p>
</blockquote>
</blockquote>
</blockquote>
<p>try-except: 异常处理<br>try:<br>    try_suite<br>except Exception [e]:<br>    exception_block</p>
<ol>
<li>try用来捕获try_suite中的错误，并且将错误交给except处理</li>
<li>except用来处理异常，如果处理异常和设置捕获异常一致，使用exception_block处理异常。不一致会被系统解释器进行处理。<br>错误信息保存在变量域中</li>
</ol>
<p>vi error.py<br>a<br>print “exec over”</p>
<p>C:\Users\Administrator\Desktop&gt;python2 error.py<br>Traceback (most recent call last):<br>  File “error.py”, line 1, in <module><br>    a<br>NameError: name ‘a’ is not defined</module></p>
<p>try:<br>    a<br>except NameError, e:<br>    print “catch Error:”, e<br>print “exec over”</p>
<p>C:\Users\Administrator\Desktop&gt;python2 error.py<br>catch Error: name ‘a’ is not defined<br>exec over</p>
<p>C:\Users\Administrator\Desktop&gt;</p>
<p>a = 0<br>try:<br>    a<br>except NameError, e:<br>    print “catch Error:”, e<br>print “exec over”</p>
<p>C:\Users\Administrator\Desktop&gt;python2 error.py<br>exec over</p>
<p>except后面没有加任何参数，就是捕捉到所有的异常</p>
<p>try-except捕获异常分析:<br>try:<br>    undef<br>except:<br>    print “catch an except”</p>
<p>try:<br>    if undef<br>except:<br>    print “catch an except”</p>
<p>try:<br>    undef<br>except:<br>    print “catch an except”<br>C:\Users\Administrator\Desktop&gt;python2 error.py<br>catch an except</p>
<p>try:<br>    if undef<br>except:<br>    print “catch an except”<br>C:\Users\Administrator\Desktop&gt;python2 error.py<br>  File “error.py”, line 25<br>    if undef<br>           ^<br>SyntaxError: invalid syntax<br>这里并没有捕获到异常，而是打印了语法错误</p>
<p>case1: 可以捕获异常，因为是运行时错误<br>case2；不能捕获异常，因为是语法错误，运行前错误</p>
<p>python代码执行过程，首先由py文件生成二进制的字节码文件，字节码文件由python解释器生成，生成过程python解释器会自动对我们的语法进行检查，发现语法有问题，自动在转化的过程中，就会把错误抛出来。这时代码还没有真正运行，所以说python解释器是没有办法截获到异常的。</p>
<p>try:<br>    undef<br>except NameError, e:<br>    print “catch an except:”, e</p>
<p>try:<br>    if undef<br>except IOError, e:<br>    print “catch an except:”, e</p>
<p>try:<br>    undef<br>except NameError, e:<br>    print “catch an except:”, e<br>C:\Users\Administrator\Desktop&gt;python2 error.py<br>catch an except: name ‘undef’ is not defined</p>
<p>try:<br>    if undef<br>except IOError, e:<br>    print “catch an except:”, e<br>C:\Users\Administrator\Desktop&gt;python2 error.py<br>  File “error.py”, line 35<br>    if undef<br>           ^<br>SyntaxError: invalid syntax</p>
<p>try:<br>    undef<br>except IOError, e:<br>    print “catch an except:”, e<br>C:\Users\Administrator\Desktop&gt;python2 error.py<br>Traceback (most recent call last):<br>  File “error.py”, line 40, in <module><br>    undef<br>NameError: name ‘undef’ is not defined<br>这里没有捕获到NameError,而是被python解释器给捕获到了</module></p>
<p>case3: 可以捕获异常，因为设置捕获NameError异常<br>case4: 不能捕获异常，因为设置IOError,不会处理NameError<br>往上抛，抛给python解释器。python解释器会处理这个NameError，终止当前代码的执行</p>
<p>猜数字游戏</p>
<p>import random</p>
<p>num = random.randiant(0, 100)</p>
<p>while True:<br>    guess = int(raw_input(“Enter 1~100:”))<br>    if guess &gt; num:<br>        print “guess Bigger:”, guess<br>    elif guess &lt; num:<br>        print “guess Smaller:”, guess<br>    else:<br>        print “Guess OK, Game Over”<br>        break<br>    print “\n”<br>C:\Users\Administrator\Desktop&gt;python2 error.py<br>Traceback (most recent call last):<br>  File “error.py”, line 47, in <module><br>    num = random.randiant(0, 100)<br>AttributeError: ‘module’ object has no attribute ‘randiant’</module></p>
<p>import random</p>
<p>num = random.randint(0, 100)</p>
<p>while True:<br>    guess = int(raw_input(“Enter 1~100:”))<br>    if guess &gt; num:<br>        print “guess Bigger:”, guess<br>    elif guess &lt; num:<br>        print “guess Smaller:”, guess<br>    else:<br>        print “Guess OK, Game Over”<br>        break<br>    print “\n”<br>C:\Users\Administrator\Desktop&gt;python2 error.py<br>Enter 1~100:80<br>guess Bigger: 80</p>
<p>Enter 1~100:70<br>guess Bigger: 70</p>
<p>Enter 1~100:60<br>guess Bigger: 60</p>
<p>Enter 1~100:50<br>guess Bigger: 50</p>
<p>Enter 1~100:40<br>guess Bigger: 40</p>
<p>Enter 1~100:30<br>guess Bigger: 30</p>
<p>Enter 1~100:20<br>guess Bigger: 20</p>
<p>Enter 1~100:10<br>guess Bigger: 10</p>
<p>Enter 1~100:5<br>guess Bigger: 5</p>
<p>Enter 1~100:1<br>guess Smaller: 1</p>
<p>Enter 1~100:2<br>guess Smaller: 2</p>
<p>Enter 1~100:3<br>Guess OK, Game Over<br>C:\Users\Administrator\Desktop&gt;python2 error.py<br>Enter 1~100:50<br>guess Smaller: 50</p>
<p>Enter 1~100:40d<br>Traceback (most recent call last):<br>  File “error.py”, line 67, in <module><br>    guess = int(raw_input(“Enter 1~100:”))<br>ValueError: invalid literal for int() with base 10: ‘40d’<br>这时代码没法正常执行</module></p>
<p>允许用户错误输入， try except对代码进行保护</p>
<p>import random</p>
<p>num = random.randint(0, 100)</p>
<p>while True:<br>    try:<br>        guess = int(raw_input(“Enter 1~100:”))<br>    except ValueError, e:<br>        print “Enter 1~100”<br>    if guess &gt; num:<br>        print “guess Bigger:”, guess<br>    elif guess &lt; num:<br>        print “guess Smaller:”, guess<br>    else:<br>        print “Guess OK, Game Over”<br>        break<br>    print “\n”<br>C:\Users\Administrator\Desktop&gt;python2 error.py<br>Enter 1~100:45<br>guess Smaller: 45</p>
<p>Enter 1~100:3d<br>Enter 1~100<br>guess Smaller: 45</p>
<p>Enter 1~100:</p>
<p>import random</p>
<p>num = random.randint(0, 100)</p>
<p>while True:<br>    try:<br>        guess = int(raw_input(“Enter 1~100:”))<br>    except ValueError, e:<br>        print “Enter 1~100”<br>        continue<br>    if guess &gt; num:<br>        print “guess Bigger:”, guess<br>    elif guess &lt; num:<br>        print “guess Smaller:”, guess<br>    else:<br>        print “Guess OK, Game Over”<br>        break<br>    print “\n”<br>continue后面代码就不执行了<br>C:\Users\Administrator\Desktop&gt;python2 error.py<br>Enter 1~100:35<br>guess Smaller: 35</p>
<p>Enter 1~100:5f<br>Enter 1~100<br>Enter 1~100:</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;错误：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;语法错误：代码不符合解释器或者编译器语法；&lt;/li&gt;
&lt;li&gt;逻辑错误：不完成或者不合法输入或者计算出现问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;异常：执行过程中出现问题导致程序无法执行&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;程序遇到逻辑或者算法问题；&lt;/l
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python Cookbook学习笔记（持续更新）</title>
    <link href="http://yoursite.com/2017/11/27/Python%20Cookbook%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/11/27/Python Cookbook学习笔记/</id>
    <published>2017-11-27T14:35:08.000Z</published>
    <updated>2017-11-27T14:56:45.962Z</updated>
    
    <content type="html"><![CDATA[<p>第一章 数据结构和算法<br>python内置了很多有用的数据结构，如列表（list）、集合（set）、字典（dictionary）。collections模块包含了针对各种数据结构的解决方案。<br>1.1 将序列分解为单独的变量<br>问题：将一个包含N个元素的元组或序列，分解为N个单独的变量。<br>解决：任何序列（或可迭代的对象）都可以通过一个简单的赋值操作来分解为单独的变量。唯一要求：变量总数和结构要与序列相吻合。<br>python2.7：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; p=(4,5)</div><div class="line">&gt;&gt;&gt; x,y=p</div><div class="line">&gt;&gt;&gt; x</div><div class="line">4</div><div class="line">&gt;&gt;&gt; y</div><div class="line">5</div><div class="line"></div><div class="line">&gt;&gt;&gt; data = [&apos;ACME&apos;, 50, 91.1, (2013,12,21)]</div><div class="line">&gt;&gt;&gt; name, shares, price, date = data0</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">NameError: name &apos;data0&apos; is not defined</div><div class="line">&gt;&gt;&gt; name, shares, price, date = data</div><div class="line">&gt;&gt;&gt; name</div><div class="line">&apos;ACME&apos;</div><div class="line">&gt;&gt;&gt; shares</div><div class="line">50</div><div class="line">&gt;&gt;&gt; price</div><div class="line">91.1</div><div class="line">&gt;&gt;&gt; data</div><div class="line">[&apos;ACME&apos;, 50, 91.1, (2013, 12, 21)]</div><div class="line">&gt;&gt;&gt; date</div><div class="line">(2013, 12, 21)</div><div class="line"></div><div class="line">&gt;&gt;&gt; name, shares, price, (year, mon, day) = data</div><div class="line">&gt;&gt;&gt; name</div><div class="line">&apos;ACME&apos;</div><div class="line">&gt;&gt;&gt; year</div><div class="line">2013</div><div class="line">&gt;&gt;&gt; mon</div><div class="line">12</div><div class="line">&gt;&gt;&gt; day</div><div class="line">21</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<p>元素数量不匹配，错误提示：</p>
<blockquote>
<blockquote>
<blockquote>
<p>p=(4,5)<br>x,y,z=p<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>ValueError: need more than 2 values to unpack</module></stdin></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">不仅仅只是元组或列表，只要对象是可迭代的，就可以执行分解操作，包括字符串，文件，迭代器，生成器。</div></pre></td></tr></table></figure>
<p>s = ‘hello’<br>a,b,c,d,e=s<br>a<br>‘h’<br>b<br>‘e’<br>c<br>‘l’<br>d<br>‘l’<br>e<br>‘o’</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">分解操作丢弃某些特定的值。可以选一个用不到的变量名，来作为丢弃的值的名称。</div></pre></td></tr></table></figure>
<p>data = [‘ACME’, 50, 91.1, (2012, 12, 21)]<br><em>, shares, price, </em> = data<br>shares<br>50<br>price<br>91.1<br><em><br>(2012, 12, 21)
</em><br>(2012, 12, 21)</p>
<p>```<br>但是需要确保选择的变量名没有在其他地方用到过。<br>Nana：<br>_<br>(2012, 12, 21)</p>
</blockquote>
</blockquote>
</blockquote>
<p>python3:<br>C:\Windows\system32&gt;python<br>Python 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 16:02:32) [MSC v.1900 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.</p>
<blockquote>
<blockquote>
<blockquote>
<p>^Z</p>
</blockquote>
</blockquote>
</blockquote>
<p>C:\Windows\system32&gt;python2<br>Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:24:40) [MSC v.1500 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.</p>
<blockquote>
<blockquote>
<blockquote>
<p>p=(4,5)<br>x,y=-p<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>TypeError: bad operand type for unary -: ‘tuple’<br>x,y=p<br>x<br>4<br>y<br>5<br>data = [‘ACME’, 50, 91.1, (2013,12,21)]<br>name, shares, price, date = data0<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>NameError: name ‘data0’ is not defined<br>name, shares, price, date = data<br>name<br>‘ACME’<br>shares<br>50<br>price<br>91.1<br>data<br>[‘ACME’, 50, 91.1, (2013, 12, 21)]<br>date<br>(2013, 12, 21)<br>name, shares, price, (year, mon, day) = data<br>name<br>‘ACME’<br>year<br>2013<br>mon<br>12<br>day<br>21<br>p=(4,5)<br>x,y.,z=p<br>  File “<stdin>“, line 1<br>    x,y.,z=p<br>        ^<br>SyntaxError: invalid syntax<br>x,y,z=p<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>ValueError: need more than 2 values to unpack<br>s = ‘hello’<br>a,b,c,d,e=a<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>NameError: name ‘a’ is not defined<br>a,b,c,d,e=s<br>a<br>‘h’<br>b<br>‘e’<br>c<br>‘l’<br>d<br>‘l’<br>e<br>‘o’<br>data = [‘ACME’, 50, 91.1, (2012, 12, 21)]<br><em>, shares, price, </em> = data<br>shares<br>50<br>price<br>91.1<br><em><br>(2012, 12, 21)
</em><br>(2012, 12, 21)<br>^Z</module></stdin></module></stdin></stdin></module></stdin></module></stdin></p>
</blockquote>
</blockquote>
</blockquote>
<p>C:\Windows\system32&gt;python<br>Python 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 16:02:32) [MSC v.1900 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.</p>
<blockquote>
<blockquote>
<blockquote>
<p>p=(4,5)<br>x,y=p<br>x<br>4<br>y<br>5<br>data = [‘ACME’, 50, 91.1, (2013,12,21)]<br>name, shares, price, date = data<br>name<br>‘ACME’<br>shares<br>50<br>price<br>91.1<br>data<br>[‘ACME’, 50, 91.1, (2013, 12, 21)]<br>date<br>(2013, 12, 21)<br>name, shares, price, (year, mon, day) = data<br>name<br>‘ACME’<br>year<br>2013<br>mon<br>12<br>day<br>21<br>p=(4,5)<br>x,y,z=p<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>ValueError: not enough values to unpack (expected 3, got 2)<br>s = ‘hello’<br>a,b,c,d,e=s<br>a<br>‘h’<br>b<br>‘e’<br>c<br>‘l’<br>d<br>‘l’<br>e<br>‘o’<br>data = [‘ACME’, 50, 91.1, (2012, 12, 21)]<br><em>, shares, price, </em> = data<br>shares<br>50<br>price<br>91.1<br>_<br>(2012, 12, 21)</module></stdin></p>
</blockquote>
</blockquote>
</blockquote>
<p>基本一样，除了ValueError: not enough values to unpack (expected 3, got 2)这个错误提示</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一章 数据结构和算法&lt;br&gt;python内置了很多有用的数据结构，如列表（list）、集合（set）、字典（dictionary）。collections模块包含了针对各种数据结构的解决方案。&lt;br&gt;1.1 将序列分解为单独的变量&lt;br&gt;问题：将一个包含N个元素的元组或序
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Django REST framework相关笔记</title>
    <link href="http://yoursite.com/2017/11/08/Django%20REST%20framework%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/11/08/Django REST framework相关笔记/</id>
    <published>2017-11-08T13:38:36.000Z</published>
    <updated>2017-11-11T12:42:38.856Z</updated>
    
    <content type="html"><![CDATA[<p>前后端分离技术</p>
<p>restful api 开发</p>
<p>Sentry线上系统的错误日志监控和告警</p>
<p>本地调试远程服务器代码</p>
<p>动态设置permission</p>
<p>文档自动化管理</p>
<p>django rest framework的缓存</p>
<p>Throttling 用户和ip进行限速</p>
<p>线上系统出现的本地系统不能重现的bug</p>
<p>api文档管理问题</p>
<p>针对api的访问频率进行限制</p>
<p>数据加入缓存，加速某些api的访问速度</p>
<p>pycharm调试远程服务器代码</p>
<p>docker搭建sentry错误日志监控系统 线上错误栈 发生系统错误时收到邮件通知</p>
<p>第三方框架设置某些api的缓存</p>
<p>Django信号量</p>
<p>独立使用Django的model</p>
<p>json web token登录</p>
<p>支付宝沙箱环境</p>
<p>Linux 通过命令启动Pycharm:<br>bin/pycharm.sh文件<br>/bin$ ./pycharm.sh<br>另一种更快捷的方式：<br>Linux建立自己的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vim ~/.bashrc</div><div class="line">shift+G到最后一行</div><div class="line">alias pycharm=&quot;bash /home/nana/xxx/pycharm-xxx/bin/pycharm.sh&quot;</div><div class="line">调用pycharm命令 就会完成这个操作</div><div class="line">注意：编辑完成之后，一定要运行一个source命令来让配置文件生效</div><div class="line">source ~/.bashrc</div><div class="line">pycharm</div><div class="line">pycharm快捷启动方式</div></pre></td></tr></table></figure></p>
<p>Linux安装MySQL<br>```<br>sudo apt-get install mysql-server<br>系统软件要加sudo<br>ps aux|grep mysqld查看mysql有没有启动成功 进程号</p>
<p>外部navacat连接虚拟机的mysql<br>bind-address = 0.0.0.0<br>重启mysql: sudo service mysql restart<br>Host xxx is not allowed to connect to this MySQL server<br>mysql权限设置的命令： GRANTxxxxxxx权限赋值命令   flush privileges刷新权限命令 赋值后必须刷新才能生效</p>
<p><a href="http://www.cnblogs.com/da19951208/p/6403607.html" target="_blank" rel="external">navicat安装</a><br>栏位相当于列</p>
<p>另一个数据库的同步：<br>数据传输<br>如本地数据库和线上数据库的传输<br>还可以把整个数据库转存sql文件，保存数据库-转储sql文件<br>然后需要用到数据库文件的，使用运行sql文件的命令</p>
<p>Linux下同时安装python2和python3<br>指明python版本<br>sudo apt-get install python3.5<br>python命令会进入默认的python2<br>python3会进入python3的版本</p>
<p>python虚拟环境的安装和配置<br>sudo apt-get install python-virtualenv<br>virtualenv xxx(name)<br>cd xxx/ 进入虚拟环境目录下  注意：目录结构和windows下面不太一样，脚本是在bin目录下面<br>cd bin/<br>启动方式也不一样<br>source activate  启动 进入虚拟环境<br>如何新建python3的虚拟环境？<br>virtualenv -p /usr/bin/python3 xxx(name)     python3脚本的目录</p>
<p>pip install virtualenvwrapper<br>注意 不能像windows直接调用mkvirtualenv<br>sudo find / -name virtualenvwrapper.sh  根目录下通过name来寻找virtualenvwrapper.sh这个文件的存放路径<br>因为不同系统可能存放的路径是不一样的<br>配置source文件<br>vim ~/.bashrc<br>指明虚拟环境在哪里<br>source virtualenvwrapper.sh文件的路径<br>export WORKON_HOME=$HOME/.virtualenvs<br>source /home/nana/.local/bin/virtualenvwrapper.sh<br>注意，不同系统的目录不一样<br>source ~/.bashrc<br>cd ~/.virtualenvs  查看虚拟环境<br>删掉虚拟环境 rm -rf xxx(name)/<br>新建python3版本的虚拟环境：mkvirtualenv –python=/usr/bin/python3 xxx(name)  调用python3 通过python3来新建我们的虚拟环境<br>mkvirtualenv –python=/usr/bin/python3 xxx(name)<br>python 查看虚拟环境python版本</p>
<p>windows 找不到workon命令<br>尽量不要在Scripts下运行pip install virtualenvwrapper命令，因为xxx</p>
<p>vue开发环境搭建<br>nodejs cnpm   npm包管理工具，安装nodejs时会有的<br>nodejs 安装.msi类似exe文件   <a href="http://nodejs.cn/download/" target="_blank" rel="external">Node.js 中文网</a><br>测试 node –version<br>cnpm  npm的淘宝镜像  <a href="http://npm.taobao.org/" target="_blank" rel="external">http://npm.taobao.org/</a><br>node_modules<br>cnpm run dev 前端项目就会独立运行起来<br>注意：如果不同电脑项目运行不起来，就将node_modules包删掉，然后重新install</p>
<p>码云 CODING 私有仓库代码托管  可免费新建私有仓库</p>
<p><a href="http://www.django-rest-framework.org/" target="_blank" rel="external">Django REST Framework</a></p>
<p>pip install djangorestframework<br>pip install markdown django-filter<br> the browsable API???</p>
<p>解释器实际上就是我们的python.exe文件</p>
<p>WORKON_HOME  新建虚拟环境的存放路径</p>
<p>Enable Django admin 不勾选</p>
<p>‘OPTIONS’: {‘init_command’: ‘SET default_storage_engine=INNODB;’}  # mysql的INNODB引擎</p>
<p>MySQL—python不支持python3 不建议 mysqlclient用来替代MySQL_python的<br>mysqlclient安装出错解决：<br>Unofficial Windows Binaries for Python Extension Packages –window系统的python第三方包文件<br><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>
<p>db_tools 数据库初始化等等</p>
<p>Mark as source root</p>
<p>import sys<br>BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(<strong>file</strong>)))   获取项目根目录<br>sys.path.insert(0, BASE_DIR)<br>sys.path.insert(0, os.path.join(BASE_DIR, “apps”))<br>sys.path.insert(0, os.path.join(BASE_DIR, “extra_apps”))</p>
<p>user 0719</p>
<p>5.1<br>restfulapi也就是jsonapi???<br>django实现restapi，也就是json的返回</p>
<p>django cbv class base view  代码可重用性比较高  fbv function base view</p>
<p><a href="http://python.usyiyi.cn/translate/Django_111/index.html" target="_blank" rel="external">http://python.usyiyi.cn/translate/Django_111/index.html</a>         Django1.11.6的中文文档</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前后端分离技术&lt;/p&gt;
&lt;p&gt;restful api 开发&lt;/p&gt;
&lt;p&gt;Sentry线上系统的错误日志监控和告警&lt;/p&gt;
&lt;p&gt;本地调试远程服务器代码&lt;/p&gt;
&lt;p&gt;动态设置permission&lt;/p&gt;
&lt;p&gt;文档自动化管理&lt;/p&gt;
&lt;p&gt;django rest fram
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python操作MySQL数据库</title>
    <link href="http://yoursite.com/2017/10/28/python%E6%93%8D%E4%BD%9CMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2017/10/28/python操作MySQL数据库/</id>
    <published>2017-10-28T07:47:09.000Z</published>
    <updated>2017-10-28T08:57:50.512Z</updated>
    
    <content type="html"><![CDATA[<p>内容简介：<br>Python开发数据库程序的通用接口规范<br>搭建Python开发数据库程序的开发环境<br>了解通用接口规范中的connection、cursor两大对象<br>如何增删改查数据库<br>实例代码演示数据库程序的开发流程</p>
<h2 id="1-基本知识"><a href="#1-基本知识" class="headerlink" title="1. 基本知识"></a>1. 基本知识</h2><h3 id="1-1-前置知识"><a href="#1-1-前置知识" class="headerlink" title="1.1 前置知识"></a>1.1 前置知识</h3><p>客户端-业务逻辑层-数据访问层(底层、核心技术)-数据库<br>目标：能够开发完整的数据库操作程序<br>内容：</p>
<ol>
<li>Python访问DB的官方接口规范</li>
<li>Python开发DB程序的开发环境</li>
<li>Python访问DB的connection、cursor两大对象</li>
<li>Python执行增删改查操作的实例讲解</li>
<li>完整实例： 银行转账实现<h3 id="1-2-Python-DB-API介绍"><a href="#1-2-Python-DB-API介绍" class="headerlink" title="1.2 Python DB API介绍"></a>1.2 Python DB API介绍</h3>背景： 没有Python DB API之前，接口程序混乱。<br><a href="https://www.python.org/dev/peps/pep-0249/" target="_blank" rel="external">Python DB API</a>： Python访问数据库的统一接口规范。</li>
</ol>
<p>Module Interface 模块接口<br>    Constructors 构造器<br>    Globals 全局变量<br>    Exceptions 异常<br>Connection Objects connection对象<br>    Connection methods<br>Cursor Objects cursor对象<br>    Cursor attributes<br>    Cursor methods</p>
<p>还有其他文档说明 </p>
<p>使用Python DB API就能完成针对不同数据库的访问</p>
<p>Python DB API：<br>Python程序<br>数据库连接对象 Connection<br>数据库交互对象 Cursor<br>事故 exceptions</p>
<p>使用Python DB API访问数据库流程：<br>开始-创建connection-获取cursor-执行查询执行命令获取数据处理数据-关闭cursor-关闭connection-结束。</p>
<h3 id="1-3-Python开发MySQL环境"><a href="#1-3-Python开发MySQL环境" class="headerlink" title="1.3 Python开发MySQL环境"></a>1.3 Python开发MySQL环境</h3><p>Python代码编辑器如Eclipse&amp;Pydev—–&gt;Python代码（包含SQL语句)—–&gt;Python 2.7 客户端 and Python-MySQL connector(<a href="https://sourceforge.net/projects/mysql-python/?source=directory)-----&gt;MySQL服务器5.6" target="_blank" rel="external">https://sourceforge.net/projects/mysql-python/?source=directory)-----&gt;MySQL服务器5.6</a>&lt;—–MySQL客户端工具SQLyog</p>
<p>MySQL for Python<br>MySQL database connector for Python programming</p>
<h2 id="2-python操作数据库对象"><a href="#2-python操作数据库对象" class="headerlink" title="2. python操作数据库对象"></a>2. python操作数据库对象</h2><h3 id="2-1-Python-数据库连接对象connection"><a href="#2-1-Python-数据库连接对象connection" class="headerlink" title="2.1 Python-数据库连接对象connection"></a>2.1 Python-数据库连接对象connection</h3><p>连接对象：建立Python客户端与数据库的网络连接<br>创建方法：MySQLdb.Connect(参数)<br>host-字符串: 127.0.0.1是回送地址，指本地机，一般用来测试使用。<br>port-数字：3306 MySQL的默认端口<br>user-字符串 数据库用户名<br>password-字符串 数据库密码<br>db-字符串 数据库名称<br>charset-字符串 连接编码 utf8-防止中文出现乱码</p>
<p>connect对象支持的方法：<br>cursor()    使用该连接创建并返回游标<br>commit()    提交当前事务<br>rollback()  回滚当前事务<br>close()     关闭连接<br>实例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">待</div></pre></td></tr></table></figure></p>
<p>连接MYSQL，并且获取了cursor对象</p>
<p>python操作MySQL五大步：<br>1.import 导入标准库；<br>2.建立连接对象connector;<br>3.建立游标对象cursor,并通过游标对象的参数属性来操作数据库;<br>4.操作完毕后，关闭游标对象；<br>5.关闭连接对象</p>
<h3 id="2-2-Python-游标对象cursor"><a href="#2-2-Python-游标对象cursor" class="headerlink" title="2.2 Python-游标对象cursor"></a>2.2 Python-游标对象cursor</h3><p>游标对象：用于执行查询和获取结果<br>cursor对象支持的方法：<br>execute(op[,args])执行一个数据库查询(select)和命令(update insert delete)<br>如下方式可以对execute方法执行结果进行各种各样的遍历<br>fetchone() 取得结果集的下一行<br>fetchmany(size) 指定size变量，获取结果集的多行<br>fetchall() 获取结果集的剩下的所有行，注意，不是将结果集所有的数据返回，而是将没有遍历过的所有数据返回<br>rowcount 最近一次excute返回数据的行数和影响行数。 注意，这不是方法，它返回excute方法执行的结果数据的行数或影响的行数<br>close（）关闭游标对象</p>
<p>各种方法详解</p>
<h2 id="3-Python增删改查数据库"><a href="#3-Python增删改查数据库" class="headerlink" title="3. Python增删改查数据库"></a>3. Python增删改查数据库</h2><h3 id="3-1-Python-实例演示select数据"><a href="#3-1-Python-实例演示select数据" class="headerlink" title="3.1 Python-实例演示select数据"></a>3.1 Python-实例演示select数据</h3><h3 id="3-2-Python-实例演示inset-update-delete数据"><a href="#3-2-Python-实例演示inset-update-delete数据" class="headerlink" title="3.2 Python-实例演示inset-update-delete数据"></a>3.2 Python-实例演示inset-update-delete数据</h3><h2 id="4-使用Python实现实例"><a href="#4-使用Python实现实例" class="headerlink" title="4. 使用Python实现实例"></a>4. 使用Python实现实例</h2><h3 id="4-1-Python操作MySQL-银行转账实例-代码流程"><a href="#4-1-Python操作MySQL-银行转账实例-代码流程" class="headerlink" title="4.1 [Python操作MySQL]银行转账实例-代码流程"></a>4.1 [Python操作MySQL]银行转账实例-代码流程</h3><h3 id="4-1-Python操作MySQL-准备数据表和代码编写"><a href="#4-1-Python操作MySQL-准备数据表和代码编写" class="headerlink" title="4.1 [Python操作MySQL]准备数据表和代码编写"></a>4.1 [Python操作MySQL]准备数据表和代码编写</h3><p><a href="http://www.imooc.com/learn/475" target="_blank" rel="external">更详细的资料参考课程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容简介：&lt;br&gt;Python开发数据库程序的通用接口规范&lt;br&gt;搭建Python开发数据库程序的开发环境&lt;br&gt;了解通用接口规范中的connection、cursor两大对象&lt;br&gt;如何增删改查数据库&lt;br&gt;实例代码演示数据库程序的开发流程&lt;/p&gt;
&lt;h2 id=&quot;1-基
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Django开发心得与笔记</title>
    <link href="http://yoursite.com/2017/10/28/Django%E5%BC%80%E5%8F%91%E5%BF%83%E5%BE%97%E4%B8%8E%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/10/28/Django开发心得与笔记/</id>
    <published>2017-10-28T07:40:32.000Z</published>
    <updated>2017-10-29T14:49:29.380Z</updated>
    
    <content type="html"><![CDATA[<p>Pycharm是专门用于python开发的一款IDE<br>免费版将不能新建django项目<br>Mysql for windows  安装注意：记住注册当初设置的密码，因为连接过程需要用到密码<br>python2.7 windows x86-64 MSI installer</p>
<p>数据库其实安装完成以后， 没有一套管理系统来进行管理会觉得很麻烦， 所以mysql-server实际上就是数据库， 你安装mysql-cli的话才能连接上数据库进行管理， navicat也是用来管理数据库的， 所以一般开发的时候你只需要安装mysql-server， 然后安装navicat来连接数据库进行管理就行了</p>
<p>系统环境变量的设置：<br>ComSpec  %SystemRoot%\system32\cmd.exe<br>Path：<br>C:\Python27<br>C:\Python27\Scripts<br>C:\Users\Administrator\AppData\Local\Programs\Python\Python35<br>C:\Users\Administrator\AppData\Local\Programs\Python\Python35\Scripts<br>C:\Users\Administrator\AppData\Local\Programs\Python\Python36<br>C:\Users\Administrator\AppData\Local\Programs\Python\Python36\Scripts</p>
<p>使用pip install xxx报错<br>UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xc0 in position 0: ordinal not in range(128)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1、在Python的安装目录C:/Python27/Lib/里找到mimetypes.py文件；</div><div class="line">2、打开mimetypes.py文件，在import结束后添加以下代码：</div><div class="line"></div><div class="line">import sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(&apos;utf-8&apos;)</div><div class="line"></div><div class="line">保存文件 重新执行pip</div><div class="line">即可</div></pre></td></tr></table></figure></p>
<p>pip install virtualenv<br>virtualenv xxx<br>Virtualenv 安装目录默认放在当前命令的运行目录下</p>
<p>进入和退出虚拟环境: 进入Scripts目录，activate.bat  deactivate.bat</p>
<p>上面的方法需要我们知道当前安装的虚拟环境的目录，比较麻烦。下面这种方法可以很方便的进入虚拟环境：<br>pip install virtualenvwrapper(注意windows下virtualenvwrapper-win)<br>mkvirtualenv xxx<br>进入 退出虚拟环境 workon xxx  deactivate</p>
<p>百度 virtualenvwrapper 默认虚拟环境目录的设置</p>
<p>pip install timeout问题<br>pip –default-timeout=100 install -U pip<br>或者使用国内镜像 豆瓣源 清华源等</p>
<p>pycharm配置虚拟环境：<br>Interpreter: xxx/python.exe<br>pycharm设置快捷键 settings-keymap-Eclipse<br>全局搜索Ctrl+H</p>
<p>Run-Edit Configuration-Host:0.0.0.0 通过IP地址访问<br>Invalid HTTP_HOST header: ‘192.168.x.xxx:8000’. You may need to add u’192.168.x.xxx’ to ALLOWED_HOSTS.<br>settings.py文件中有个参数 ALLOWED_HOSTS 你搜索一下， 将这个值设置为 ALLOWED_HOSTS = [‘*’]<br> 就行了</p>
<p>cmd-ipconfig 查看本地IP地址（Linux ifconfig）<br>设置source root</p>
<p>navicat<br>创建到数据库的连接 连接测试<br>新建数据库<br>字符集一定要选utf8<br>排序规则：utf8_general_ci<br>设计表<br>新加列-添加栏位<br>navicat执行sql语句 查询-新建查询-输入sql语句-select * from users  所有sql语句都可以在这里执行<br>快速表的复制  复制-粘贴<br>数据库传输：右键-数据传输-源到目标  复制操作还是剪切操作？？？<br>数据库的导入和导出：运行SQL文件 转储SQL文件</p>
<p>先讲一下什么是ping：Ping是Windows下的一个命令。在Unix和Linux下也有这个命令。ping也属于一个通信协议，是TCP/IP协议的一部分利用“ping”命令可以检查网络是否连通，可以很好地帮助我们分析和判定网络故障。应用格式：Ping空格IP地址。该命令还可以加许多参数使用，具体是键入Ping按回车即可看到详细说明。</p>
<p>新建app<br>Tools-Run manage.py Task-startapp xxx<br>static目录存放静态文件-普通文件夹<br>log文件夹存放日志-普通文件夹<br>media目录存放用户上传的文件-普通文件夹<br>apps文件夹用于存放各个app-可导入的包，含init.py文件</p>
<p>apps mark as source root 不需要输入apps的路径 但是这样命令行会报错No module named xxx<br>BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(<strong>file</strong>)))<br>sys.path.insert(0, os.path.join(BASE_DIR, ‘apps’))<br>sys.path.insert(0, os.path.join(BASE_DIR, ‘extra_apps’))<br>这样设置</p>
<p>django请求到响应的完整过程</p>
<p>配置settings连接数据库<br>数据库创建好以后<br>DATABASES = {<br>    ‘default’: {<br>        ‘ENGINE’: ‘django.db.backends.mysql’,</p>
<pre><code>#&apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),
&apos;NAME&apos;: &apos;xxxxxx&apos;,
&apos;USER&apos;: &apos;root&apos;,
&apos;PASSWORD&apos;: &apos;xxx&apos;,
&apos;HOST&apos;: &apos;127.0.0.1&apos;,
</code></pre><!--         'OPTIONS': {
            "init_command": 'SET foreign_key_checks=0;',
        } -->
<pre><code>}
</code></pre><p>}</p>
<p>生成django默认的数据表<br>Run-Run manage.py Task<br>报错：提示没有mysqlDB 这就是django需要用到的驱动，连接mysql的驱动<br>Error loading MySQLdb module: No module name MySQLdb<br>解决：pip install mysql-python<br>pip install mysql-python安装过程报错：<br>error: command ‘C:\Program Files (x86)\Microsoft\Visual Studio\14.0\VC\BIN\amd64\link.exe’ failed with exit status 1120<br>windows安装MySQL驱动的时候都会出现这个问题<br><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a> 下载对应的驱动<br>下载目录安装对应的驱动 如pip install MySQL_python-1.2.5-cp27-none-win_amd64.whl<br>新玉建议安装pymysql 使用pymysql需要在<strong>init</strong>中导入模块<br>import pymysql<br>pymysql.install_as_MySQLdb()</p>
<p>makemigrations-migrate</p>
<p>创建url映射<br>url(r’^form/$’, getform)  getform不需要括号，只需要名字即可<br>^表示以form为开头,$表示以/结尾的地址<br>配置相应的view来做处理</p>
<p>Ctrl 加鼠标左键 跟踪到render函数里  Alt+左箭头回来<br>不能直接用form.html这个名称，因为django内置了很多html页面，这个名称，django会自动收集django本身的html文件  右键-Refactor-Rename</p>
<p>ctrl+s pycharm会自动重启项目</p>
<p>报错TemplateDoesNotExist<br>解决：settings-TEMPLATES-DIRS需要指明templates的目录，django就可以在该目录寻找html文件<br>‘DIRS’: [os.path.join(BASE_DIR, ‘templates’)],<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">TEMPLATES = [</div><div class="line">    &#123;</div><div class="line">        &apos;BACKEND&apos;: &apos;django.template.backends.django.DjangoTemplates&apos;,</div><div class="line">        &apos;DIRS&apos;: [os.path.join(BASE_DIR, &apos;templates&apos;)],</div><div class="line">        &apos;APP_DIRS&apos;: True,</div><div class="line">        &apos;OPTIONS&apos;: &#123;</div><div class="line">            &apos;context_processors&apos;: [</div><div class="line">                &apos;django.template.context_processors.debug&apos;,</div><div class="line">                &apos;django.template.context_processors.request&apos;,</div><div class="line">                &apos;django.contrib.auth.context_processors.auth&apos;,</div><div class="line">                &apos;django.contrib.messages.context_processors.messages&apos;,</div><div class="line">                &apos;django.core.context_processors.media&apos;,</div><div class="line">            ],</div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>页面可以显示，但是样式没有：css路径有问题<br>涉及setting中静态路径的配置<br>默认：STATIC_URL = ‘/static/‘<br>因为没有配置static的根路径<br>之前只是建了个static的文件夹，并没有跟django说该文件夹就是static的路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">STATICFILES_DIRS = [</div><div class="line">    os.path.join(BASE_DIR, &quot;static&quot;)</div><div class="line">]</div><div class="line">或者</div><div class="line">STATICFILES_DIRS = (</div><div class="line">    os.path.join(BASE_DIR, &quot;static&quot;),</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>变量名DIRS复数形式，可以设置多个static的路径</p>
<p><img src="https://i.loli.net/2017/10/29/59f5de4b882a7.png" alt="项目配置流程" title="项目配置流程"></p>
<p>mysql-python与mysqlclient</p>
<p>tab与shift+tab</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def __unicode__(self):</div><div class="line">    return self.username</div></pre></td></tr></table></figure>
<p>以字符串的形式显示对象，和java里面的类的tostring方法一样</p>
<p>django orm与model</p>
<p>CharField类型必须指定默认长度 max-length, 否则会报错CharField must define a ‘max_length’ attribute. MySQL does not allow unique CharFields to hava a max_length &gt; 255.<br>verbose_name=u”昵称” 在后台管理系统会发挥很大的用处<br>EmailField 专门对邮箱做验证</p>
<pre><code>class Meta:
    verbose_name = &quot;用户信息&quot;    指定数据表显示名称
    verbose_name_plural = verbose_name
</code></pre><p>如果编辑models.py后，makemigrations显示No changes detected in app xxx, 是因为没有将新建的app注册到settings里面</p>
<p>报错：<br>SyntaxError: Non-ASCII character ‘\xe4’ in xxx , but no encoding declared<br>解决：<br>因为model中用到了中文，但文件开头并没有定义好utf编码</p>
<h1 id="encoding-utf-8"><a href="#encoding-utf-8" class="headerlink" title="* encoding:utf-8 *"></a><em>*</em> encoding:utf-8 <em>*</em></h1><p>django默认生成数据表的结构：app名称_model名称  所有小写 如message_usermessage</p>
<p>django model的Field类型<br>EmailField<br>ForeignKey<br>DateTimeField<br>IntegerField<br>IPAddressField<br>FileField<br>ImageField</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&apos;AutoField&apos;, &apos;BLANK_CHOICE_DASH&apos;, &apos;BigIntegerField&apos;, &apos;BinaryField&apos;,</div><div class="line">&apos;BooleanField&apos;, &apos;CharField&apos;, &apos;CommaSeparatedIntegerField&apos;, &apos;DateField&apos;,</div><div class="line">&apos;DateTimeField&apos;, &apos;DecimalField&apos;, &apos;DurationField&apos;, &apos;EmailField&apos;, &apos;Empty&apos;,</div><div class="line">&apos;Field&apos;, &apos;FieldDoesNotExist&apos;, &apos;FilePathField&apos;, &apos;FloatField&apos;,</div><div class="line">&apos;GenericIPAddressField&apos;, &apos;IPAddressField&apos;, &apos;IntegerField&apos;, &apos;NOT_PROVIDED&apos;,</div><div class="line">&apos;NullBooleanField&apos;, &apos;PositiveIntegerField&apos;, &apos;PositiveSmallIntegerField&apos;,</div><div class="line">&apos;SlugField&apos;, &apos;SmallIntegerField&apos;, &apos;TextField&apos;, &apos;TimeField&apos;, &apos;URLField&apos;,</div><div class="line">&apos;UUIDField&apos;</div></pre></td></tr></table></figure>
<p>该字段可以为空，null=True, blank=True</p>
<p>设定默认值，default=u””自动赋值为空</p>
<p>不指定主键会自动生成id,可以自己指定主键primary_key=True</p>
<p>报错：<br>You are trying to add a non-nullable field ‘xxx’ to xxx without a default<br>解决：<br>default=””<br>有些疑问，主键可以默认设置为空吗？</p>
<p>django的meta信息<br>class Meta:<br>    verbose_name = “用户信息”<br>    verbose_name_plural = verbose_name<br>    db_table = “xxx”  指定数据表名称<br>    ordering = “xxx”  默认排序 query的时候自动排序 加上-就是倒序的排列 就不需要通过order_by了</p>
<p>from .models import xxx   .代表同级目录下的文件</p>
<p>all_courses = Course.objects.all().order_by(“-add_time”)<br>objects 类默认的数据表管理器 这个管理器给我们提供了很多方法<br>all()数据库所有的记录返回<br>返回来的all_courses变量是queryset类型，django的内置类型，这种类型可以让我们进行for循环</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Pycharm是专门用于python开发的一款IDE&lt;br&gt;免费版将不能新建django项目&lt;br&gt;Mysql for windows  安装注意：记住注册当初设置的密码，因为连接过程需要用到密码&lt;br&gt;python2.7 windows x86-64 MSI instal
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Django社区网站项目-自学笔记</title>
    <link href="http://yoursite.com/2017/10/27/Django%E7%A4%BE%E5%8C%BA%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/10/27/Django社区网站项目-自学笔记/</id>
    <published>2017-10-27T14:24:26.000Z</published>
    <updated>2017-10-28T05:09:33.589Z</updated>
    
    <content type="html"><![CDATA[<p>最近在项目技术上遇到了瓶颈问题，正好看到这个bilibili上的django自学项目有讲到我需要用到django-guadian包，心里好奇，就开始学习折腾这个社区网站自学项目了。</p>
<p>Python是内功，框架是武功。</p>
<p>Python学习手册</p>
<p>Python3.5.1</p>
<p>确保勾选Add Python3.X to PATH</p>
<p>繁花嗅用Python3.4.2做演示</p>
<p>Python虚拟环境的介绍和创建</p>
<p>虚拟环境就是一个文件夹，文件夹里包含了最基本的python运行的文件</p>
<p>python3.3以后的版本，有个内置的命令，很方便就能创建一个虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">C:\Windows\system32&gt;python</div><div class="line">Python 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 16:02:32) [MSC v.1900 64 bit (AMD64)] on win32</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt; ^Z</div><div class="line"></div><div class="line"></div><div class="line">C:\Windows\system32&gt;python -n venv fanhuaxiu</div><div class="line">Unknown option: -n</div><div class="line">usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...</div><div class="line">Try `python -h&apos; for more information.</div><div class="line"></div><div class="line">C:\Windows\system32&gt;python -m venv fanhuaxiu</div><div class="line"></div><div class="line">C:\Windows\system32&gt;</div></pre></td></tr></table></figure>
<p>我用的python版本是Python 3.5.3， 注意是python -m venv fanhuaxiu，不是python -n venv fanhuaxiu</p>
<p>进入虚拟环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">C:\Windows\system32&gt;cd fanhuaxiu</div><div class="line"></div><div class="line">C:\Windows\System32\fanhuaxiu&gt;activate.bat</div><div class="line">&apos;activate.bat&apos; 不是内部或外部命令，也不是可运行的程序</div><div class="line">或批处理文件。</div><div class="line"></div><div class="line">C:\Windows\System32\fanhuaxiu&gt;cd scripts</div><div class="line"></div><div class="line">C:\Windows\System32\fanhuaxiu\Scripts&gt;activate.bat</div><div class="line">(fanhuaxiu) C:\Windows\System32\fanhuaxiu\Scripts&gt;</div></pre></td></tr></table></figure></p>
<p>安装django</p>
<p>pip install django   缺点速度慢</p>
<p>官网下载安装包，本地直接安装</p>
<p>djangoxx.tar.gz文件下载到fanhuaxiu文件夹下面  与script文件夹同级<br>亲测，这种安装方式也是比较慢的。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(fanhuaxiu) C:\Windows\System32\fanhuaxiu\Scripts&gt;cd ..</div><div class="line"></div><div class="line">(fanhuaxiu) C:\Windows\System32\fanhuaxiu&gt;pip install Django-1.9.13.tar.gz</div><div class="line">Processing c:\windows\system32\fanhuaxiu\django-1.9.13.tar.gz</div><div class="line">Installing collected packages: Django</div><div class="line">  Running setup.py install for Django ... done</div><div class="line">Successfully installed Django-1.9.13</div><div class="line"></div><div class="line">(fanhuaxiu) C:\Windows\System32\fanhuaxiu&gt;</div></pre></td></tr></table></figure></p>
<p>pip freeze 查看当前环境中已经安装的所有库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(fanhuaxiu) C:\Windows\System32\fanhuaxiu&gt;pip freeze</div><div class="line">Django==1.9.13</div></pre></td></tr></table></figure></p>
<p>退出虚拟环境，查看系统默认环境下有没有django库，结果是没有的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">C:\Windows\system32&gt;pip freeze</div><div class="line">astroid==1.5.3</div><div class="line">colorama==0.3.9</div><div class="line">isort==4.2.15</div><div class="line">lazy-object-proxy==1.3.1</div><div class="line">mccabe==0.6.1</div><div class="line">mysqlclient==1.3.12</div><div class="line">pylint==1.7.4</div><div class="line">pyserial==3.4</div><div class="line">six==1.11.0</div><div class="line">wrapt==1.10.11</div></pre></td></tr></table></figure></p>
<p>创建django工程<br>django-admin startproject<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(fanhuaxiu) C:\Windows\System32\fanhuaxiu&gt;django-admin startproject communityweb</div><div class="line"></div><div class="line">(fanhuaxiu) C:\Windows\System32\fanhuaxiu&gt;</div></pre></td></tr></table></figure></p>
<p>django项目文件夹所在  与script文件夹同级</p>
<p>Nana-CMD显示文件目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(fanhuaxiu) C:\Windows\System32\fanhuaxiu\communityweb&gt;tree /f</div><div class="line">卷 OS 的文件夹 PATH 列表</div><div class="line">卷序列号为 DE02-71F0</div><div class="line">C:.</div><div class="line">│  manage.py</div><div class="line">│</div><div class="line">└─communityweb</div><div class="line">        settings.py</div><div class="line">        urls.py</div><div class="line">        wsgi.py</div><div class="line">        __init__.py</div></pre></td></tr></table></figure></p>
<p><a href="https://jingyan.baidu.com/article/19020a0a27740c529d2842d6.html" target="_blank" rel="external">参考网页</a></p>
<p>进入项目目录<br>python manage.py runserver<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">(fanhuaxiu) C:\Windows\System32\fanhuaxiu&gt;cd communityweb</div><div class="line"></div><div class="line">(fanhuaxiu) C:\Windows\System32\fanhuaxiu\communityweb&gt;python manage.py runserver</div><div class="line">Performing system checks...</div><div class="line"></div><div class="line">System check identified no issues (0 silenced).</div><div class="line"></div><div class="line">You have unapplied migrations; your app may not work properly until they are applied.</div><div class="line">Run &apos;python manage.py migrate&apos; to apply them.</div><div class="line">October 27, 2017 - 23:31:15</div><div class="line">Django version 1.9.13, using settings &apos;communityweb.settings&apos;</div><div class="line">Starting development server at http://127.0.0.1:8000/</div><div class="line">Quit the server with CTRL-BREAK.</div></pre></td></tr></table></figure></p>
<p>浏览器访问 <a href="http://127.0.0.1:8000/" target="_blank" rel="external">http://127.0.0.1:8000/</a> 或者 localhost:8000<br>显示信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">It worked!</div><div class="line">Congratulations on your first Django-powered page.</div><div class="line"></div><div class="line">Of course, you haven&apos;t actually done any work yet. Next, start your first app by running python manage.py startapp [app_label].</div><div class="line">You&apos;re seeing this message because you have DEBUG = True in your Django settings file and you haven&apos;t configured any URLs. Get to work!</div></pre></td></tr></table></figure></p>
<p>创建的django默认网站成功了</p>
<p>如何查看文档？<br><a href="https://docs.djangoproject.com/en/1.11/intro/install/" target="_blank" rel="external">安装</a><br><a href="https://docs.djangoproject.com/en/1.11/intro/tutorial01/" target="_blank" rel="external">Part 1: Requests and responses</a></p>
<p>第一节完成了，哈哈，其实很多都很熟悉了，但是又重新巩固了下，也学到了不同的用法，温故知新。</p>
<p>下节课 app相关</p>
<p>什么是网站？<br>人 你问他一个问题，他给你一个问题<br>聊天微信，朋友交流，一问一答<br>通过你的电脑，跟远方的电脑互相交流。 远方的电脑-服务器</p>
<p>接收信号 处理信号 然后把接口回馈给你   最复杂的是处理信号</p>
<p>所有的框架万变不离其宗</p>
<p>First steps¶</p>
<p>Are you new to Django or to programming? This is the place to start!</p>
<p>From scratch: Overview | Installation<br>Tutorial: Part 1: Requests and responses | Part 2: Models and the admin site | Part 3: Views and templates | Part 4: Forms and generic views | Part 5: Testing | Part 6: Static files | Part 7: Customizing the admin site<br>Advanced Tutorials: How to write reusable apps | Writing your first patch for Django</p>
<p>Requests and responses 信息的一个进一个出</p>
<p>Models and the admin site  Models数据库</p>
<p>Views and templates  Views处理数据的过程 处理和渲染的过程</p>
<p>Forms and generic views  表格和输入过程</p>
<p>Testing 测试</p>
<p>Static files  静态文件 </p>
<p>Customizing the admin site 后台管理</p>
<p>The model layer¶</p>
<p>Django provides an abstraction layer (the “models”) for structuring and manipulating the data of your Web application. Learn more about it below:</p>
<p>Models: Introduction to models | Field types | Indexes | Meta options | Model class<br>QuerySets: Making queries | QuerySet method reference | Lookup expressions<br>Model instances: Instance methods | Accessing related objects<br>Migrations: Introduction to Migrations | Operations reference | SchemaEditor | Writing migrations<br>Advanced: Managers | Raw SQL | Transactions | Aggregation | Search | Custom fields | Multiple databases | Custom lookups | Query Expressions | Conditional Expressions | Database Functions<br>Other: Supported databases | Legacy databases | Providing initial data | Optimize database access | PostgreSQL specific features</p>
<p>数据库</p>
<p>The view layer¶</p>
<p>Django has the concept of “views” to encapsulate the logic responsible for processing a user’s request and for returning the response. Find all you need to know about views via the links below:</p>
<p>The basics: URLconfs | View functions | Shortcuts | Decorators<br>Reference: Built-in Views | Request/response objects | TemplateResponse objects<br>File uploads: Overview | File objects | Storage API | Managing files | Custom storage<br>Class-based views: Overview | Built-in display views | Built-in editing views | Using mixins | API reference | Flattened index<br>Advanced: Generating CSV | Generating PDF<br>Middleware: Overview | Built-in middleware classes</p>
<p>分析和逻辑处理</p>
<p>The template layer¶</p>
<p>The template layer provides a designer-friendly syntax for rendering the information to be presented to the user. Learn how this syntax can be used by designers and how it can be extended by programmers:</p>
<p>The basics: Overview<br>For designers: Language overview | Built-in tags and filters | Humanization<br>For programmers: Template API | Custom tags and filters<br>模板 页面显示</p>
<p>Forms¶</p>
<p>Django provides a rich framework to facilitate the creation of forms and the manipulation of form data.</p>
<p>The basics: Overview | Form API | Built-in fields | Built-in widgets<br>Advanced: Forms for models | Integrating media | Formsets | Customizing validation<br>严格说属于template<br>表单输入信息</p>
<p>The development process¶</p>
<p>Learn about the various components and tools to help you in the development and testing of Django applications:</p>
<p>Settings: Overview | Full list of settings<br>Applications: Overview<br>Exceptions: Overview<br>django-admin and manage.py: Overview | Adding custom commands<br>Testing: Introduction | Writing and running tests | Included testing tools | Advanced topics<br>Deployment: Overview | WSGI servers | Deploying static files | Tracking code errors by email<br>开发处理的过程</p>
<p>The admin¶</p>
<p>Find all you need to know about the automated admin interface, one of Django’s most popular features:</p>
<p>Admin site<br>Admin actions<br>Admin documentation generator<br>自带后台处理<br>默认简单的后台管理系统</p>
<p>Security¶</p>
<p>Security is a topic of paramount importance in the development of Web applications and Django provides multiple protection tools and mechanisms:</p>
<p>Security overview<br>Disclosed security issues in Django<br>Clickjacking protection<br>Cross Site Request Forgery protection<br>Cryptographic signing<br>Security Middleware<br>网络安全问题 数据库安全问题</p>
<p>Internationalization and localization¶</p>
<p>Django offers a robust internationalization and localization framework to assist you in the development of applications for multiple languages and world regions:</p>
<p>Overview | Internationalization | Localization | Localized Web UI formatting and form input<br>Time zones<br>国际化和本地化</p>
<p>Performance and optimization¶</p>
<p>There are a variety of techniques and tools that can help get your code running more efficiently - faster, and using fewer system resources.</p>
<p>Performance and optimization overview<br>性能优化</p>
<p>Python compatibility¶</p>
<p>Django aims to be compatible with multiple different flavors and versions of Python:</p>
<p>Jython support<br>Python 3 compatibility<br>python兼容</p>
<p>Geographic framework¶</p>
<p>GeoDjango intends to be a world-class geographic Web framework. Its goal is to make it as easy as possible to build GIS Web applications and harness the power of spatially enabled data.<br>地理框架 根据不同的方位来访问网站<br>不同的地区不同的显示内容</p>
<p>Common Web application tools¶</p>
<p>Django offers multiple tools commonly needed in the development of Web applications:</p>
<p>Authentication: Overview | Using the authentication system | Password management | Customizing authentication | API Reference<br>Caching<br>Logging<br>Sending emails<br>Syndication feeds (RSS/Atom)<br>Pagination<br>Messages framework<br>Serialization<br>Sessions<br>Sitemaps<br>Static files management<br>Data validation<br>内置的工具</p>
<p>(fanhuaxiu) C:\Windows\System32\fanhuaxiu\communityweb&gt;tree /f<br>卷 OS 的文件夹 PATH 列表<br>卷序列号为 DE02-71F0<br>C:.<br>│  db.sqlite3<br>│  manage.py<br>│<br>└─communityweb<br>    │  settings.py<br>    │  urls.py<br>    │  wsgi.py<br>    │  <strong>init</strong>.py<br>    │<br>    └─<strong>pycache</strong><br>            settings.cpython-35.pyc<br>            urls.cpython-35.pyc<br>            wsgi.cpython-35.pyc<br>            <strong>init</strong>.cpython-35.pyc</p>
<p>db.sqlite3 这个文件是项目运行后生成的  数据库<br>简单的数据库 只是处理小的项目可以用的数据库<br>大项目 装一些商业的数据库</p>
<p>启动项目<br>python manage.py runserver<br>把网站运行起来</p>
<p>不同端口 如9000 打开<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(fanhuaxiu) C:\Windows\System32\fanhuaxiu\communityweb&gt;python manage.py runserver 9000</div><div class="line">Performing system checks...</div><div class="line"></div><div class="line">System check identified no issues (0 silenced).</div><div class="line"></div><div class="line">You have unapplied migrations; your app may not work properly until they are applied.</div><div class="line">Run &apos;python manage.py migrate&apos; to apply them.</div><div class="line">October 28, 2017 - 10:24:23</div><div class="line">Django version 1.9.13, using settings &apos;communityweb.settings&apos;</div><div class="line">Starting development server at http://127.0.0.1:9000/</div><div class="line">Quit the server with CTRL-BREAK.</div></pre></td></tr></table></figure></p>
<p>什么是app 一个app就是一个功能的集成</p>
<p>创建app<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(fanhuaxiu) C:\Windows\System32\fanhuaxiu\communityweb&gt;python manage.py startapp blog</div><div class="line"></div><div class="line">(fanhuaxiu) C:\Windows\System32\fanhuaxiu\communityweb&gt;</div></pre></td></tr></table></figure></p>
<p>manage.py 相当于一个路由器一样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">(fanhuaxiu) C:\Windows\System32\fanhuaxiu\communityweb&gt;tree /f</div><div class="line">卷 OS 的文件夹 PATH 列表</div><div class="line">卷序列号为 DE02-71F0</div><div class="line">C:.</div><div class="line">│  db.sqlite3</div><div class="line">│  manage.py</div><div class="line">│</div><div class="line">├─blog</div><div class="line">│  │  admin.py</div><div class="line">│  │  apps.py</div><div class="line">│  │  models.py</div><div class="line">│  │  tests.py</div><div class="line">│  │  views.py</div><div class="line">│  │  __init__.py</div><div class="line">│  │</div><div class="line">│  └─migrations</div><div class="line">│          __init__.py</div><div class="line">│</div><div class="line">└─communityweb</div><div class="line">    │  settings.py</div><div class="line">    │  urls.py</div><div class="line">    │  wsgi.py</div><div class="line">    │  __init__.py</div><div class="line">    │</div><div class="line">    └─__pycache__</div><div class="line">            settings.cpython-35.pyc</div><div class="line">            urls.cpython-35.pyc</div><div class="line">            wsgi.cpython-35.pyc</div><div class="line">            __init__.cpython-35.pyc</div><div class="line"></div><div class="line">├─blog</div><div class="line">│  │  admin.py</div><div class="line">│  │  apps.py</div><div class="line">│  │  models.py</div><div class="line">│  │  tests.py</div><div class="line">│  │  views.py</div><div class="line">│  │  __init__.py</div><div class="line">│  │</div><div class="line">│  └─migrations</div><div class="line">│          __init__.py</div></pre></td></tr></table></figure></p>
<p>最基础的文件夹和文件 搭好一个架子</p>
<p>│  └─migrations<br>│          <strong>init</strong>.py<br>数据库修改记录<br>数据库操作记录</p>
<p><strong>init</strong>.py<br>文件夹当模块一样来用</p>
<p>admin.py<br>后台操作的命令</p>
<p>apps.py  django1.9以后出现的<br>关于app参数的设置<br>以前设置到整个项目settings.py</p>
<p>models.py<br>数据库</p>
<p>tests.py 测试</p>
<p>views.py 业务逻辑</p>
<p>下节课 数据库</p>
<p>django的数据库配置，安装和数据模型的创建</p>
<p>数据库本质上就是一个一个的文件</p>
<p>数据的形式</p>
<p>django不生成数据，它就是数据的搬运工</p>
<p>djaong更高效的保存处理查询数据库</p>
<p><a href="https://docs.djangoproject.com/en/1.11/ref/databases/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/ref/databases/</a></p>
<p>PostgreSQL<br><a href="https://www.postgresql.org/" target="_blank" rel="external">https://www.postgresql.org/</a></p>
<p>Download-Windows-Download</p>
<p>老师 9.5.3 exe</p>
<p>postgresql-9.5.9-win64.exe  我下载的是9.5.9<br>放在scripts同级，点击安装它<br>我安装PostgreSQL的时候出现问题了，报错 Error In Installer<br>Installer Payload initialization failed. This is likely due to an incomplete  or corrupt downloaded file.<br>PostgreSQL-10.0-1-win64-bigsql.exe<br>换了这个版本的还是不行<br>PostgreSQL-9.6.5-1-win64-bigsql.exe<br>这个版本的也还是不行。。。<br>难道跟我的项目的目录有关系？<br>C:\Windows\System32\fanhuaxiu<br>关机重启 移动项目目录试下<br>问题解决了，醉了，好吧<br>Components-pgDEVOps/pgAdmin3 我都安装了<br>password 8……..n<br>data directory:C:\PostgreSQL\data\pg96<br>port:5432<br>pgDEVOps: administractor username and password: 2503605326@qq.com   8……..n</p>
<p>安装过程又报错了<br>Problem running post-install step. Installation may not complete correctly. Error with configuration or permissions. Please see log file for more information.</p>
<p>好吧，先把下面的那个连接的安装看下是不是因为要先安装psycopg2</p>
<p>注意：<br>PostgreSQL notes¶</p>
<p>Django supports PostgreSQL 9.3 and higher. psycopg2 2.5.4 or higher is required, though the latest release is recommended.</p>
<p> psycopg2 连接django和PostgreSQL的桥梁</p>
<p> <a href="http://initd.org/psycopg/" target="_blank" rel="external">http://initd.org/psycopg/</a></p>
<p> 针对python版本进行安装<br><a href="http://www.stickpeople.com/projects/python/win-psycopg/" target="_blank" rel="external">http://www.stickpeople.com/projects/python/win-psycopg/</a></p>
<p>(fanhuaxiu) C:\Windows\System32\fanhuaxiu\communityweb&gt;python<br>Python 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 16:02:32) [MSC v.1900 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.</p>
<blockquote>
<blockquote>
<p>&gt;<br>我的python版本是Python 3.5.3</p>
</blockquote>
</blockquote>
<p>Virtual Environment Installation Notes</p>
<p>Method 1</p>
<p>Do not double-click the package to run. Instead, use easy_install from either setuptools or distribute. Assuming the installer is downloaded to C:\ and the virtual environment is in C:\virtualenv, the command would look something like:</p>
<p>C:> C:\virtualenv\Scripts\activate.bat<br>(virtualenv) C:> easy_install psycopg2-2.6.2.win32-py2.7-pg9.5.3-release.exe</p>
<p>Method 2</p>
<p>The same method as mentioned below with Zope can be used to extract the binaries and place them in the <venv_dir>\Lib\site-packages\ directory.</venv_dir></p>
<p>python跟数据库连接的包<br>老师是2.6.1的版本 我的是2.6.2的版本</p>
<p>(fanhuaxiu) C:\Users\Administrator\Downloads\fanhuaxiu&gt;easy_install psycopg2-2.6.2.win-amd64-py3.5-pg9.5.3-release.exe<br>Processing psycopg2-2.6.2.win-amd64-py3.5-pg9.5.3-release.exe<br>psycopg2.tests.<strong>pycache</strong>.test_module.cpython-35: module references <strong>file</strong><br>psycopg2.tests.<strong>pycache</strong>.test_types_basic.cpython-35: module references <strong>file</strong><br>psycopg2.<strong>pycache</strong>._psycopg.cp35-win_amd64.cpython-35: module references <strong>file</strong><br>creating ‘C:\Users\ADMINI~1\AppData\Local\Temp\easy_install-rpfwruyp\psycopg2-2.6.2-py3.5-win-amd64.egg’ and adding ‘C:\Users\ADMINI~1\AppData\Local\Temp\easy_install-rpfwruyp\psycopg2-2.6.2-py3.5-win-amd64.egg.tmp’ to it<br>creating c:\users\administrator\appdata\local\programs\python\python35\lib\site-packages\psycopg2-2.6.2-py3.5-win-amd64.egg<br>Extracting psycopg2-2.6.2-py3.5-win-amd64.egg to c:\users\administrator\appdata\local\programs\python\python35\lib\site-packages<br>Adding psycopg2 2.6.2 to easy-install.pth file</p>
<p>Installed c:\users\administrator\appdata\local\programs\python\python35\lib\site-packages\psycopg2-2.6.2-py3.5-win-amd64.egg<br>Processing dependencies for psycopg2==2.6.2<br>Finished processing dependencies for psycopg2==2.6.2</p>
<p>pip freeze 查看当前环境安装了什么东西</p>
<p>管理数据库的界面</p>
<p>创建django的数据模型</p>
<p>django没有数据，它保存的只是数据模型，真正的数据保存在数据库里面</p>
<p>数据模型 模子套出来 </p>
<p>django内置创建模型的工具</p>
<p>类创建模型</p>
<p>Fields 字段</p>
<p>sublime编辑器</p>
<p>settings.py </p>
<p>中间件</p>
<p><a href="https://docs.djangoproject.com/en/1.11/topics/settings/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/topics/settings/</a></p>
<p>Full List Of Setting<br><a href="https://docs.djangoproject.com/en/1.11/ref/settings/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/ref/settings/</a></p>
<p>修改数据库设定</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在项目技术上遇到了瓶颈问题，正好看到这个bilibili上的django自学项目有讲到我需要用到django-guadian包，心里好奇，就开始学习折腾这个社区网站自学项目了。&lt;/p&gt;
&lt;p&gt;Python是内功，框架是武功。&lt;/p&gt;
&lt;p&gt;Python学习手册&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SS in Ubuntu14.04</title>
    <link href="http://yoursite.com/2017/10/20/SS%20in%20Ubuntu14.04/"/>
    <id>http://yoursite.com/2017/10/20/SS in Ubuntu14.04/</id>
    <published>2017-10-20T14:33:57.000Z</published>
    <updated>2017-10-20T14:39:10.542Z</updated>
    
    <content type="html"><![CDATA[<p>To set ss in your computer, please follow below steps:<br>First register in <a href="http://banwagong.cn/" target="_blank" rel="external">http://banwagong.cn/</a> and select and create an account.<br>Details: <a href="http://blog.csdn.net/win_turn/article/details/51559867" target="_blank" rel="external">http://blog.csdn.net/win_turn/article/details/51559867</a></p>
<p>After set up your ss, please follow below steps to create one in your computer(My computer is Ubuntu14.04):</p>
<p>Installation:<br>sudo apt-get update<br>sudo apt-get install python-pip<br>sudo apt-get install python-setuptools m2crypto</p>
<p>pip install shadowsocks<br>(or sudo pip install sxxxxxxxxxs)</p>
<p>Download:<br>download sxxxxxxxxxs.json file from email attachment to your computer  example: /home/nana/Documents/sxxxxxxxxxs.json</p>
<p>SwitchyOmega Setting:<br>Visit <a href="https://pan.baidu.com/s/1gfHupSR" target="_blank" rel="external">https://pan.baidu.com/s/1gfHupSR</a> and download SwitchyOmega plugin;<br>Visit chrome://extensions/ in your Chrome browser and drag SwitchyOmega plugin to your extensions;</p>
<p>Click proxy in the left sidebar and make sure below setting is applied:<br>Protocol: SOCKS5<br>Server: 127.0.0.1<br>Port: 1080</p>
<p>And click Apply Changes</p>
<p>Auto Switch:<br>Click the SwitchyOmega plugin in your browser and make sure it’s auto switch.</p>
<p>Startup in your terminal:<br>sslocal -c /xxx/xxx/xxx/sxxxxxxxxxs.json<br>example: sslocal -c /home/nana/Documents/sxxxxxxxxxs.json</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;To set ss in your computer, please follow below steps:&lt;br&gt;First register in &lt;a href=&quot;http://banwagong.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;
    
    </summary>
    
      <category term="Ubuntu" scheme="http://yoursite.com/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu14.04,nginx,uwsgi部署django项目</title>
    <link href="http://yoursite.com/2017/10/14/Ubuntu14.04%20nginx%20uwsigi%E9%83%A8%E7%BD%B2django%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2017/10/14/Ubuntu14.04 nginx uwsigi部署django项目/</id>
    <published>2017-10-14T09:52:06.000Z</published>
    <updated>2017-10-16T14:33:24.993Z</updated>
    
    <content type="html"><![CDATA[<p>自从我这Windows党在配置Ubuntu14.04开发环境的时候，把Ubuntu系统折腾奔溃了以后（千万不要手贱重装Ubuntu14.04的python, 升级或者多python共存都可以，就是不要把默认的卸载了重装，活生生的教训摆在眼前）。我就暗下决心要在家用虚拟机装个Ubuntu14.04好好折腾。<br>趁着周末，抽出了几个小时，折腾了下如何用Ubuntu14.04,nginx,uwsgi部署django项目。中间遇到了几个坑。幸好这几个坑都没有很深，看来平时要多折腾多部署。<br>今晚有点晚了，博客内容有点乱，下次复习部署的过程再把博客细节完善好。</p>
<h2 id="1-下载虚拟机和Ubuntu"><a href="#1-下载虚拟机和Ubuntu" class="headerlink" title="1.下载虚拟机和Ubuntu"></a>1.下载虚拟机和Ubuntu</h2><h3 id="1-1-下载Ubuntu14-04"><a href="#1-1-下载Ubuntu14-04" class="headerlink" title="1.1 下载Ubuntu14.04"></a>1.1 下载Ubuntu14.04</h3><p><a href="http://releases.ubuntu.com/14.04/" target="_blank" rel="external">Ubuntu14.04官网下载</a><br>ubuntu-14.04.5-desktop-amd64.iso </p>
<h3 id="1-2-下载虚拟机"><a href="#1-2-下载虚拟机" class="headerlink" title="1.2 下载虚拟机"></a>1.2 下载虚拟机</h3><p>下载虚拟机VM Workstation 14<br><!-- (密匙:FF31KAHZD1H8ETZ8WWEZWUUVAs) --><br><!-- ubuntu14
nana
8.......n. --></p>
<p>虚拟机名称：ubuntu14</p>
<p>虚拟磁盘存储单个文件</p>
<h2 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2.安装nginx"></a>2.安装nginx</h2><!-- 安装mysql
mysql密码

进入mysql的命令

mysql的连接配置



记住sudo的命令

i 键 编辑模式

Ubuntu14.04 terminal添加右键
sudo apt-get install nautilus-open-terminal
http://blog.csdn.net/jk38687587/article/details/52103005
亲测有效 记得要重启系统才能生效 -->
<p>sudo apt-get install nginx  安装nginx<br>ps aux|grep nginx 查看进程是否启动</p>
<!-- ip 192.168.77.128 -->
<p>ifconfig查看IP地址，浏览器打开<br>Welcome to nginx!欢迎界面<br>安装成功！</p>
<h2 id="3-安装mysql"><a href="#3-安装mysql" class="headerlink" title="3.安装mysql"></a>3.安装mysql</h2><p>sudo apt-get install mysql-server<br>提示输入mysql密码<br>安装完成会自动启动mysql-server<br>ps aux|grep mysql 查看进程是否启动   有个进程叫/usr/sbin/mysqld，就是mysql的server<br>进入mysql   mysql -u root -p<br>show databases;  记得分号</p>
<p>vim - gnome 安装<br>sudo vim /etc/mysql/my.cnf   注意这里是my.cnf文件了<br>mysql的ip绑定  bind-address<br>i 进入编辑模式<br>bind-address            = 127.0.0.1<br>更改为：bind-address            = 0.0.0.0  就可以通过IP地址来连接我们的mysql<br>这里更改只是为了windows连接进来，真正部署尽量用127.0.0.1，这样就不会让我们的端口暴露出来。<br>esc退出编辑模式，按shift加冒号，wq退出并保存<br>配置文件修改完后，重启mysql<br>sudo service mysql restart<br>mysql重启成功</p>
<p>ifconfig查看ip地址<br>192.168.77.128<br>navicat 主机名或ip地址填写ip地址<br>连接测试  1130 - Host ‘192.168.77.128’ is not allowed to connect to this MySQL server<br>默认mysql是只允许本地连接</p>
<p>mysql -h 192.168.77.128 -u root -p<br>ERROR 1130 (HY000): Host ‘192.168.77.128’ is not allowed to connect to this MySQL server<br>用host连接也是不允许的</p>
<p>修改配置让所有ip地址都可以连接进来呢？<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root’@’192.168.77.128’ IDENTIFIED BY ‘8xxxxxxxxn’ WITH GRANT OPTION;<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root’@’%’ IDENTIFIED BY ‘8xxxxxxxxn’ WITH GRANT OPTION;<br><em>.</em>-指的是所有表 这里也可以指明某张表<br>% 所有IP都可以访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">nana@ubuntu:~/Music$ mysql -u root -p</div><div class="line">Enter password: </div><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 39</div><div class="line">Server version: 5.5.57-0ubuntu0.14.04.1 (Ubuntu)</div><div class="line"></div><div class="line">Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</div><div class="line"></div><div class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;8xxxxxxxxn&apos; WITH GRANT OPTION;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></p>
<p>生效了</p>
<p>还需要刷新权限<br>mysql&gt; FLUSH PRIVILEGES;<br>Query OK, 0 rows affected (0.00 sec)</p>
<p>连接测试-连接成功<br>这样就能通过主机的navicat去连接虚拟机上的数据库了</p>
<p>新建数据库</p>
<p>完成数据库的连接配置</p>
<p>Mysql配置完成</p>
<h2 id="4-安装虚拟环境"><a href="#4-安装虚拟环境" class="headerlink" title="4.安装虚拟环境"></a>4.安装虚拟环境</h2><p>不管开发还是生产环境都尽量用虚拟环境来做<br>nana@ubuntu:~/Music$ pip install virtualenv<br>程序“pip”尚未安装。 您可以使用以下命令安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python-pip</div><div class="line">nana@ubuntu:~/Music$ sudo apt-get install python-pip</div><div class="line">nana@ubuntu:~/Music$ pip install virtualenv</div><div class="line">Downloading/unpacking virtualenv</div><div class="line">  Downloading virtualenv-15.1.0-py2.py3-none-any.whl (1.8MB): 1.8MB downloaded</div><div class="line">Installing collected packages: virtualenv</div><div class="line">Cleaning up...</div><div class="line">Exception:</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;/usr/lib/python2.7/dist-packages/pip/basecommand.py&quot;, line 122, in main</div><div class="line">    status = self.run(options, args)</div><div class="line">  File &quot;/usr/lib/python2.7/dist-packages/pip/commands/install.py&quot;, line 283, in run</div><div class="line">    requirement_set.install(install_options, global_options, root=options.root_path)</div><div class="line">  File &quot;/usr/lib/python2.7/dist-packages/pip/req.py&quot;, line 1436, in install</div><div class="line">    requirement.install(install_options, global_options, *args, **kwargs)</div><div class="line">  File &quot;/usr/lib/python2.7/dist-packages/pip/req.py&quot;, line 672, in install</div><div class="line">    self.move_wheel_files(self.source_dir, root=root)</div><div class="line">  File &quot;/usr/lib/python2.7/dist-packages/pip/req.py&quot;, line 902, in move_wheel_files</div><div class="line">    pycompile=self.pycompile,</div><div class="line">  File &quot;/usr/lib/python2.7/dist-packages/pip/wheel.py&quot;, line 206, in move_wheel_files</div><div class="line">    clobber(source, lib_dir, True)</div><div class="line">  File &quot;/usr/lib/python2.7/dist-packages/pip/wheel.py&quot;, line 193, in clobber</div><div class="line">    os.makedirs(destsubdir)</div><div class="line">  File &quot;/usr/lib/python2.7/os.py&quot;, line 157, in makedirs</div><div class="line">    mkdir(name, mode)</div><div class="line">OSError: [Errno 13] Permission denied: &apos;/usr/local/lib/python2.7/dist-packages/virtualenv-15.1.0.dist-info&apos;</div><div class="line"></div><div class="line">Storing debug log for failure in /home/nana/.pip/pip.log</div></pre></td></tr></table></figure></p>
<p>安装虚拟环境报错<br>命令前面加sudo，问题解决了<br>sudo pip install virtualenv</p>
<p>sudo pip install virtualenvwrapper<br>安装完virtualenvwrapper之后，实际上workon命令是不能用的<br>需要编辑一个文件<br>主目录下面有个bashrc文件，编辑这个文件：<br>vim ~/.bashrc<br>export WORKON_HOME=$HOME/.virtualenvs<br>source /home/nana/.local/bin/virtualenvwrapper.sh<br>（WORKON_HOME virtualenvwrapper集中保存虚拟环境的路径  凡是通过mkvirtualenv命令创建的虚拟环境都会放到这里来）</p>
<p>nana@ubuntu:~/Music$ source ~/.bashrc<br>bash: /home/nana/.local/bin/virtualenvwrapper.sh: 没有那个文件或目录<br>nana@ubuntu:~/Music$ vim ~/.bashrc<br>nana@ubuntu:~/Music$ source ~/.bashrc<br>bash: /home/nana/.local/usr/bin/virtualenvwrapper.sh: 没有那个文件或目录</p>
<p>export WORKON_HOME=$HOME/.virtualenvs<br>source /usr/local/bin/virtualenvwrapper.sh<br>改成这样，注意Ubuntu14.04这里要这样写<br><a href="http://blog.csdn.net/yilovexing/article/details/72961594" target="_blank" rel="external">http://blog.csdn.net/yilovexing/article/details/72961594</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">nana@ubuntu:~/Music$ vim ~/.bashrc</div><div class="line">nana@ubuntu:~/Music$ source ~/.bashrc</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/premkproject</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/postmkproject</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/initialize</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/premkvirtualenv</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/postmkvirtualenv</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/prermvirtualenv</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/postrmvirtualenv</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/predeactivate</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/postdeactivate</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/preactivate</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/postactivate</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/get_env_details</div><div class="line">nana@ubuntu:~/Music$ workon</div><div class="line">nana@ubuntu:~/Music$ </div><div class="line"></div><div class="line">nana@ubuntu:~/Music$ mkvirtualenv mol</div><div class="line">New python executable in /home/nana/.virtualenvs/mol/bin/python</div><div class="line">Installing setuptools, pip, wheel...done.</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/mol/bin/predeactivate</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/mol/bin/postdeactivate</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/mol/bin/preactivate</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/mol/bin/postactivate</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/mol/bin/get_env_details</div><div class="line">(mol) nana@ubuntu:~/Music$ pip list</div><div class="line">DEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning.</div><div class="line">pip (9.0.1)</div><div class="line">setuptools (36.6.0)</div><div class="line">wheel (0.30.0)</div></pre></td></tr></table></figure></p>
<p>虚拟环境创建完成了</p>
<h2 id="5-安装开发包"><a href="#5-安装开发包" class="headerlink" title="5.安装开发包"></a>5.安装开发包</h2><p>本地开发包导出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">C:\Windows\system32&gt;workon</div><div class="line"></div><div class="line">Pass a name to activate one of the following virtualenvs:</div><div class="line">==============================================================================</div><div class="line">article_spider</div><div class="line">FreshShop</div><div class="line">mol</div><div class="line">nanablog</div><div class="line">portus</div><div class="line">py22scrapy</div><div class="line">py2scrapy</div><div class="line">py3scrapy</div><div class="line">python_learning</div><div class="line">testvir2</div><div class="line">tp_supplier_platform</div><div class="line"></div><div class="line">C:\Windows\system32&gt;workon mol</div><div class="line">(mol) C:\Windows\System32&gt;pip list</div><div class="line">Package                Version</div><div class="line">---------------------- ---------</div><div class="line">certifi                2017.4.17</div><div class="line">chardet                3.0.4</div><div class="line">Django                 1.9.8</div><div class="line">django-crispy-forms    1.6.1</div><div class="line">django-formtools       2.0</div><div class="line">django-pure-pagination 0.3.0</div><div class="line">django-simple-captcha  0.4.6</div><div class="line">DjangoUeditor          1.8.143</div><div class="line">future                 0.16.0</div><div class="line">httplib2               0.9.2</div><div class="line">idna                   2.5</div><div class="line">MySQL-python           1.2.5</div><div class="line">olefile                0.44</div><div class="line">Pillow                 4.2.0</div><div class="line">pip                    9.0.1</div><div class="line">requests               2.18.1</div><div class="line">setuptools             36.0.1</div><div class="line">six                    1.10.0</div><div class="line">urllib3                1.21.1</div><div class="line">wheel                  0.29.0</div><div class="line">xlrd                   1.0.0</div><div class="line">XlsxWriter             0.9.8</div><div class="line">xlwt                   1.2.0</div><div class="line"></div><div class="line">(mol) C:\Windows\System32&gt;pip freeze &gt; requirements.txt</div><div class="line"></div><div class="line">(mol) C:\Windows\System32&gt;</div></pre></td></tr></table></figure></p>
<p>拷贝这个文件的内容到虚拟机的新建文件里</p>
<p>虚拟机里通过requriemtns来安装它<br>从这个文件读取，然后一个一个的开发包安装到虚拟环境里面</p>
<p>报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sh: 1: mysql_config: not found</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">  File &quot;/tmp/pip-build-O8vP9C/MySQL-python/setup.py&quot;, line 17, in &lt;module&gt;</div><div class="line">    metadata, options = get_config()</div><div class="line">  File &quot;setup_posix.py&quot;, line 43, in get_config</div><div class="line">    libs = mysql_config(&quot;libs_r&quot;)</div><div class="line">  File &quot;setup_posix.py&quot;, line 25, in mysql_config</div><div class="line">    raise EnvironmentError(&quot;%s not found&quot; % (mysql_config.path,))</div><div class="line">EnvironmentError: mysql_config not found</div></pre></td></tr></table></figure></p>
<p><a href="https://stackoverflow.com/questions/5178292/pip-install-mysql-python-fails-with-environmenterror-mysql-config-not-found" target="_blank" rel="external">https://stackoverflow.com/questions/5178292/pip-install-mysql-python-fails-with-environmenterror-mysql-config-not-found</a><br>sudo apt-get install libmysqlclient-dev</p>
<p>发现某个开发包安装比较慢，Ctrl C停掉整个过程，单独安装这个开发包，使用豆瓣源加速安装。<br><a href="http://pypi.douban.com/simple/" target="_blank" rel="external">http://pypi.douban.com/simple/</a><br><a href="https://www.douban.com/note/302711300/" target="_blank" rel="external">https://www.douban.com/note/302711300/</a><br>注意不要用https</p>
<p>用豆瓣源下载pillow失败 清华源也是同样的问题</p>
<p>正常安装先</p>
<p>Failed building wheel for MySQL-python<br>sudo apt-get install libmysqlclient-dev  发现我之前安装了这个，是不是可以暂时不安装呢<br>Failed building wheel for mysqlclient  又报错了，然后发现两个报错都提到这个fatal error: Python.h: 没有那个文件或目录<br>解决方法：sudo apt-get install python-dev</p>
<h2 id="6-启动项目"><a href="#6-启动项目" class="headerlink" title="6.启动项目"></a>6.启动项目</h2><p>查看项目是否可以启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">nana@ubuntu:~/Music/MOl$ python manage.py runserver</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;manage.py&quot;, line 8, in &lt;module&gt;</div><div class="line">    from django.core.management import execute_from_command_line</div><div class="line">ImportError: No module named django.core.management</div><div class="line">nana@ubuntu:~/Music/MOl$ workon</div><div class="line">mol</div><div class="line">nana@ubuntu:~/Music/MOl$ workon mol</div><div class="line">(mol) nana@ubuntu:~/Music/MOl$ python manage.py runserver</div><div class="line">Performing system checks...</div><div class="line"></div><div class="line">/home/nana/.virtualenvs/mol/local/lib/python2.7/site-packages/DjangoUeditor/urls.py:11: RemovedInDjango110Warning: django.conf.urls.patterns() is deprecated and will be removed in Django 1.10. Update your urlpatterns to be a list of django.conf.urls.url() instances instead.</div><div class="line">  url(r&apos;^controller/$&apos;,get_ueditor_controller)</div><div class="line"></div><div class="line">System check identified no issues (0 silenced).</div><div class="line"></div><div class="line">You have unapplied migrations; your app may not work properly until they are applied.</div><div class="line">Run &apos;python manage.py migrate&apos; to apply them.</div><div class="line"></div><div class="line">October 15, 2017 - 11:21:49</div><div class="line">Django version 1.9.8, using settings &apos;MOl.settings&apos;</div><div class="line">Starting development server at http://127.0.0.1:8000/</div><div class="line">Quit the server with CONTROL-C.</div><div class="line">^CUnhandled exception in thread started by &lt;function wrapper at 0x7fc6d4f4e320&gt;</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;/home/nana/.virtualenvs/mol/local/lib/python2.7/site-packages/django/utils/autoreload.py&quot;, line 234, in wrapper</div><div class="line">    filename = traceback.extract_tb(tb)[-1][0]</div><div class="line">TypeError: &apos;NoneType&apos; object is not callable</div><div class="line">(mol) nana@ubuntu:~/Music/MOl$ python manage.py makemigrations</div><div class="line">/home/nana/.virtualenvs/mol/local/lib/python2.7/site-packages/DjangoUeditor/urls.py:11: RemovedInDjango110Warning: django.conf.urls.patterns() is deprecated and will be removed in Django 1.10. Update your urlpatterns to be a list of django.conf.urls.url() instances instead.</div><div class="line">  url(r&apos;^controller/$&apos;,get_ueditor_controller)</div><div class="line"></div><div class="line">No changes detected</div><div class="line">(mol) nana@ubuntu:~/Music/MOl$ python manage.py migrate</div><div class="line">/home/nana/.virtualenvs/mol/local/lib/python2.7/site-packages/DjangoUeditor/urls.py:11: RemovedInDjango110Warning: django.conf.urls.patterns() is deprecated and will be removed in Django 1.10. Update your urlpatterns to be a list of django.conf.urls.url() instances instead.</div><div class="line">  url(r&apos;^controller/$&apos;,get_ueditor_controller)</div><div class="line"></div><div class="line">Operations to perform:</div><div class="line">  Apply all migrations: xadmin, users, courses, admin, sessions, auth, captcha, contenttypes, organization, operation</div><div class="line">Running migrations:</div><div class="line">  Rendering model states... DONE</div><div class="line">  Applying contenttypes.0001_initial... OK</div><div class="line">  Applying contenttypes.0002_remove_content_type_name... OK</div><div class="line">  Applying auth.0001_initial... OK</div><div class="line">  Applying auth.0002_alter_permission_name_max_length... OK</div><div class="line">  Applying auth.0003_alter_user_email_max_length... OK</div><div class="line">  Applying auth.0004_alter_user_username_opts... OK</div><div class="line">  Applying auth.0005_alter_user_last_login_null... OK</div><div class="line">  Applying auth.0006_require_contenttypes_0002... OK</div><div class="line">  Applying auth.0007_alter_validators_add_error_messages... OK</div><div class="line">  Applying users.0001_initial... OK</div><div class="line">  Applying admin.0001_initial... OK</div><div class="line">  Applying admin.0002_logentry_remove_auto_add... OK</div><div class="line">  Applying captcha.0001_initial... OK</div><div class="line">  Applying organization.0001_initial... OK</div><div class="line">  Applying organization.0002_auto_20170712_2240... OK</div><div class="line">  Applying organization.0003_auto_20170723_2037... OK</div><div class="line">  Applying organization.0004_auto_20170725_1731... OK</div><div class="line">  Applying organization.0005_teacher_image... OK</div><div class="line">  Applying courses.0001_initial... OK</div><div class="line">  Applying courses.0002_auto_20170712_2240... OK</div><div class="line">  Applying courses.0003_course_course_org... OK</div><div class="line">  Applying courses.0004_course_category... OK</div><div class="line">  Applying courses.0005_course_tag... OK</div><div class="line">  Applying courses.0006_video_url... OK</div><div class="line">  Applying courses.0007_video_learn_times... OK</div><div class="line">  Applying courses.0008_course_teacher... OK</div><div class="line">  Applying courses.0009_auto_20170728_2318... OK</div><div class="line">  Applying courses.0010_course_is_banner... OK</div><div class="line">  Applying courses.0011_auto_20170826_1149... OK</div><div class="line">  Applying operation.0001_initial... OK</div><div class="line">  Applying organization.0006_teacher_age... OK</div><div class="line">  Applying organization.0007_courseorg_tag... OK</div><div class="line">  Applying sessions.0001_initial... OK</div><div class="line">  Applying users.0002_banner_emailverifyrecord... OK</div><div class="line">  Applying users.0003_auto_20170708_1210... OK</div><div class="line">  Applying users.0004_auto_20170708_1523... OK</div><div class="line">  Applying users.0005_auto_20170708_2220... OK</div><div class="line">  Applying users.0006_auto_20170802_0829... OK</div><div class="line">  Applying xadmin.0001_initial... OK</div><div class="line">  Applying xadmin.0002_log... OK</div><div class="line">  Applying xadmin.0003_auto_20160715_0100... OK</div><div class="line">(mol) nana@ubuntu:~/Music/MOl$ python manage.py runserver</div><div class="line">Performing system checks...</div><div class="line"></div><div class="line">/home/nana/.virtualenvs/mol/local/lib/python2.7/site-packages/DjangoUeditor/urls.py:11: RemovedInDjango110Warning: django.conf.urls.patterns() is deprecated and will be removed in Django 1.10. Update your urlpatterns to be a list of django.conf.urls.url() instances instead.</div><div class="line">  url(r&apos;^controller/$&apos;,get_ueditor_controller)</div><div class="line"></div><div class="line">System check identified no issues (0 silenced).</div><div class="line">October 15, 2017 - 11:22:58</div><div class="line">Django version 1.9.8, using settings &apos;MOl.settings&apos;</div><div class="line">Starting development server at http://127.0.0.1:8000/</div><div class="line">Quit the server with CONTROL-C.</div></pre></td></tr></table></figure></p>
<p>记得要在虚拟环境里这样弄<br>记得migrate</p>
<p>192.168.77.128:8000 但是这里显示的是nginx<br>192.168.77.128:8080  网站访问成功，但是静态文件没有显示成功</p>
<p>navicat数据传输 从主机传输到虚拟机</p>
<h2 id="7-uwsgi方式启动项目"><a href="#7-uwsgi方式启动项目" class="headerlink" title="7.uwsgi方式启动项目"></a>7.uwsgi方式启动项目</h2><p>uwsgi方式启动起来</p>
<p>安装uwsgi  pip install uwsgi<br>Successfully installed uwsgi-2.0.15</p>
<p>测试uwsgi  用http的方式测试<br>uwsgi –http :8080 –module MOl.wsgi<br>注意命令要写对<br><a href="http://192.168.77.128:8080/" target="_blank" rel="external">http://192.168.77.128:8080/</a> 浏览器访问 没问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"># the upstream component nginx needs to connect to</div><div class="line">upstream django &#123;</div><div class="line"># server unix:///path/to/your/mysite/mysite.sock; # for a file socket</div><div class="line">server 127.0.0.1:8000; # for a web port socket (we&apos;ll use this first)</div><div class="line">&#125;</div><div class="line"># configuration of the server</div><div class="line"></div><div class="line">server &#123;</div><div class="line"># the port your site will be served on</div><div class="line">listen      80;</div><div class="line"># the domain name it will serve for</div><div class="line">server_name 你的ip地址 ; # substitute your machine&apos;s IP address or FQDN</div><div class="line">charset     utf-8;</div><div class="line"></div><div class="line"># max upload size</div><div class="line">client_max_body_size 75M;   # adjust to taste</div><div class="line"></div><div class="line"># Django media</div><div class="line">location /media  &#123;</div><div class="line">    alias 你的目录/Mol/media;  # 指向django的media目录</div><div class="line">&#125;</div><div class="line"></div><div class="line">location /static &#123;</div><div class="line">    alias 你的目录/Mol/static; # 指向django的static目录</div><div class="line">&#125;</div><div class="line"></div><div class="line"># Finally, send all non-media requests to the Django server.</div><div class="line">location / &#123;</div><div class="line">    uwsgi_pass  django;</div><div class="line">    include     uwsgi_params; # the uwsgi_params file you installed</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你的ip地址  ip地址或者域名都可以</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"># the upstream component nginx needs to connect to</div><div class="line">upstream django &#123;</div><div class="line"># server unix:///path/to/your/mysite/mysite.sock; # for a file socket</div><div class="line">server 127.0.0.1:8000; # for a web port socket (we&apos;ll use this first)</div><div class="line">&#125;</div><div class="line"># configuration of the server</div><div class="line"></div><div class="line">server &#123;</div><div class="line"># the port your site will be served on</div><div class="line">listen      80;</div><div class="line"># the domain name it will serve for</div><div class="line">server_name 192.168.77.128 ; # substitute your machine&apos;s IP address or FQDN</div><div class="line">charset     utf-8;</div><div class="line"></div><div class="line"># max upload size</div><div class="line">client_max_body_size 75M;   # adjust to taste</div><div class="line"></div><div class="line"># Django media</div><div class="line">location /media  &#123;</div><div class="line">    alias /home/nana/Music/MOl/media;  # 指向django的media目录</div><div class="line">&#125;</div><div class="line"></div><div class="line">location /static &#123;</div><div class="line">    alias /home/nana/Music/MOl/static; # 指向django的static目录</div><div class="line">&#125;</div><div class="line"></div><div class="line"># Finally, send all non-media requests to the Django server.</div><div class="line">location / &#123;</div><div class="line">    uwsgi_pass  django;</div><div class="line">    include     uwsgi_params; # the uwsgi_params file you installed</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>建立软链接<br>sudo cp uc_nginx.conf /etc/nginx/conf.d/</p>
<p>重启nginx<br>sudo service nginx restart</p>
<p>ps aux|grep nginx 查看nginx是否已经启动</p>
<p>所有static文件全部放到一个目录下面来</p>
<p>collectstatic会将所有static文件放到一个目录上面来</p>
<p>STATICFILES_DIRS注释掉，这两个不能同时存在</p>
<p>甚至Xadmin的静态文件也会拷贝到这里来</p>
<h2 id="8-uwsgi的socket方式启动项目"><a href="#8-uwsgi的socket方式启动项目" class="headerlink" title="8.uwsgi的socket方式启动项目"></a>8.uwsgi的socket方式启动项目</h2><p>新建uwsgi的配置文件  uwsgi不对外暴露http方式 通过读配置文件来启动我们的uwsgi<br>socket方式启动，而不是http方式来启动  socket比http方式传输效率更快</p>
<p>nginx指明转发到8000端口，所有uwsgi也要指明8000端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># mysite_uwsgi.ini file</div><div class="line">[uwsgi]</div><div class="line"></div><div class="line"># Django-related settings</div><div class="line"># the base directory (full path)</div><div class="line">chdir           = /home/nana/Music/MOl</div><div class="line"># Django&apos;s wsgi file</div><div class="line">module          = MOl.wsgi</div><div class="line"># the virtualenv (full path)</div><div class="line"></div><div class="line"># process-related settings</div><div class="line"># master</div><div class="line">master          = true</div><div class="line"># maximum number of worker processes</div><div class="line">processes       = 10</div><div class="line"># the socket (use the full path to be safe</div><div class="line">socket          = 127.0.0.1:8000</div><div class="line"># ... with appropriate permissions - may be needed</div><div class="line"># chmod-socket    = 664</div><div class="line"># clear environment on exit</div><div class="line">vacuum          = true</div><div class="line">virtualenv = /home/nana/.virtualenvs/mol</div><div class="line"></div><div class="line"># logto = /tmp/mylog.log  注意这里要注释掉</div></pre></td></tr></table></figure></p>
<pre><code>保存后，通过uwsgi来启动
</code></pre><p><a href="http://192.168.77.128/" target="_blank" rel="external">http://192.168.77.128/</a>  访问网站 没有问题  注意这里不要加上8000端口<br>完成uwsgi的配置<br>完成ip地址访问</p>
<p>测试域名访问<br>修改hosts文件</p>
<p>uwsgi的重启</p>
<p> <a href="http://www.jianshu.com/p/3379892948da" target="_blank" rel="external">参考教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从我这Windows党在配置Ubuntu14.04开发环境的时候，把Ubuntu系统折腾奔溃了以后（千万不要手贱重装Ubuntu14.04的python, 升级或者多python共存都可以，就是不要把默认的卸载了重装，活生生的教训摆在眼前）。我就暗下决心要在家用虚拟机装个
    
    </summary>
    
      <category term="部署" scheme="http://yoursite.com/categories/%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="部署" scheme="http://yoursite.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>404和500页面配置</title>
    <link href="http://yoursite.com/2017/10/14/404%E5%92%8C500%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/10/14/404和500页面配置/</id>
    <published>2017-10-14T07:13:41.000Z</published>
    <updated>2017-10-14T08:44:01.271Z</updated>
    
    <content type="html"><![CDATA[<p>生产环境需要配置404和500页面，如果没有配置404和500页面，给用户的体验不是很好。</p>
<p>Django配置404和500页面具体如下：</p>
<h2 id="templates设置"><a href="#templates设置" class="headerlink" title="templates设置"></a>templates设置</h2><p>404和500页面拷贝到templates目录下。</p>
<h2 id="View设置"><a href="#View设置" class="headerlink" title="View设置"></a>View设置</h2><p>views.py:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">def page_not_found(request):</div><div class="line">    # 全局404处理函数</div><div class="line">    from django.shortcuts import render_to_response</div><div class="line">    response = render_to_response(&apos;404.html&apos;, &#123;&#125;)</div><div class="line">    response.status_code = 404</div><div class="line">    return response</div><div class="line"></div><div class="line"></div><div class="line">def page_error(request):</div><div class="line">    # 全局500处理函数</div><div class="line">    from django.shortcuts import render_to_response</div><div class="line">    response = render_to_response(&apos;500.html&apos;, &#123;&#125;)</div><div class="line">    response.status_code = 500</div><div class="line">    return response</div></pre></td></tr></table></figure></p>
<h2 id="url设置"><a href="#url设置" class="headerlink" title="url设置"></a>url设置</h2><p>根urls.py文件设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 全局404和500页面配置</div><div class="line">handler404 = &apos;users.views.page_not_found&apos;</div><div class="line">handler500 = &apos;users.views.page_error&apos;</div></pre></td></tr></table></figure></p>
<h2 id="settings设置"><a href="#settings设置" class="headerlink" title="settings设置"></a>settings设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">settings.py：</div><div class="line">Debug=False  （生成环境部署的时候必须改为False,否则报错提示信息可能会泄漏网站的关键信息)</div><div class="line">ALLOWED_HOSTS = [&apos;*&apos;]   (所有客户端都可以连接)</div></pre></td></tr></table></figure>
<p>注意，Debug=False的情况下，Django是不会再帮你代管static文件的访问。部署的时候Apache或者Nginx会自动代理这些静态文件。<br>如下这种方式就会失效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">STATIC_URL = &apos;/static/&apos;</div><div class="line">STATICFILES_DIRS = (</div><div class="line">    os.path.join(BASE_DIR, &quot;static&quot;),</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>我们给static配置url处理函数：<br>setting.py:<br>STATIC_ROOT = os.path.join(BASE_DIR, ‘static’)<br><!-- 全局404页面配置：
Django给我们提供了一些变量，这些变量是放在根(项目)urls.py下。
这些写法很固定，注意这些变量的名称，这是Django会自动调用的。 --><br>urls.py:<br>url(r’^static/(?P<path></path>.*)$’, serve, {“document_root”: STATIC_ROOT}),</p>
<p>重启系统</p>
<!-- 最常见的异常：1/0 -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生产环境需要配置404和500页面，如果没有配置404和500页面，给用户的体验不是很好。&lt;/p&gt;
&lt;p&gt;Django配置404和500页面具体如下：&lt;/p&gt;
&lt;h2 id=&quot;templates设置&quot;&gt;&lt;a href=&quot;#templates设置&quot; class=&quot;header
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>科学上网，开阔眼界</title>
    <link href="http://yoursite.com/2017/10/12/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%EF%BC%8C%E5%BC%80%E9%98%94%E7%9C%BC%E7%95%8C/"/>
    <id>http://yoursite.com/2017/10/12/科学上网，开阔眼界/</id>
    <published>2017-10-12T13:57:38.000Z</published>
    <updated>2017-10-12T14:19:51.975Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://bwh1.net/clientarea.php" target="_blank" rel="external">Bandwagon Host</a></p>
<p>VPS Hosting - Services - My Services - KiwiVM Control Panel - Shadowsocks Server - Install Shadowsocks Server - Go back(when Completed) - Remember your encryption/port/passaprd for Shadowsocks.</p>
<p>启动系统代理 - 全局模式</p>
<p>好了，可以科学上网，开阔眼界了。</p>
<p>下次有空折腾下多用户的设置，今天太晚了，好困啊。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://bwh1.net/clientarea.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bandwagon Host&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;VPS Hosting - Services - My Services -
    
    </summary>
    
      <category term="科学上网" scheme="http://yoursite.com/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    
      <category term="科学上网" scheme="http://yoursite.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>python2.7项目升级python3.6</title>
    <link href="http://yoursite.com/2017/10/12/python2-7%E9%A1%B9%E7%9B%AE%E5%8D%87%E7%BA%A7python3-6/"/>
    <id>http://yoursite.com/2017/10/12/python2-7项目升级python3-6/</id>
    <published>2017-10-12T13:40:30.000Z</published>
    <updated>2017-10-12T14:19:02.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新建python3虚拟环境"><a href="#新建python3虚拟环境" class="headerlink" title="新建python3虚拟环境"></a>新建python3虚拟环境</h2><p>首先新建python3.6的虚拟环境，关于python2和python3虚拟环境的共存，之前的博客<a href="http://www.hellonana.top/2017/08/27/%E7%94%B5%E8%84%91%E5%AE%89%E8%A3%85%E5%A4%9A%E7%89%88%E6%9C%ACpython%E7%9A%84%E6%96%B9%E6%B3%95/" target="_blank" rel="external">电脑多版本Python共存的方法</a>。这里就不讲了。</p>
<h2 id="重装虚拟环境安装的开发包"><a href="#重装虚拟环境安装的开发包" class="headerlink" title="重装虚拟环境安装的开发包"></a>重装虚拟环境安装的开发包</h2><ol>
<li>打包安装：<br>requirements.txt<br>pip freeze &gt; requirements.txt<br>pip install -r requirements.txt<br>搭配豆瓣源清华源加速安装。</li>
<li>单个安装：<br>或者一个一个开发包安装，比较可控。<br>注意：mysqlclient(支持python3和python2)替换MySQL-Python(只支持python2.7)<br>xlrd/XlwtWriter/xlwt - Excel输入有关</li>
</ol>
<h2 id="Project-Interpreter配置虚拟环境"><a href="#Project-Interpreter配置虚拟环境" class="headerlink" title="Project Interpreter配置虚拟环境"></a>Project Interpreter配置虚拟环境</h2><h2 id="开发包升级"><a href="#开发包升级" class="headerlink" title="开发包升级"></a>开发包升级</h2><p>加了新功能的要合并</p>
<h2 id="setting配置"><a href="#setting配置" class="headerlink" title="setting配置"></a>setting配置</h2><p>django升级到1.11的，记得将django.core.context_processors.media更改成django.template.context_processors.media(django版本不同的原因)</p>
<p>models.py里面定义的<strong>unicode</strong>()函数改成<strong>str</strong>()函数</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新建python3虚拟环境&quot;&gt;&lt;a href=&quot;#新建python3虚拟环境&quot; class=&quot;headerlink&quot; title=&quot;新建python3虚拟环境&quot;&gt;&lt;/a&gt;新建python3虚拟环境&lt;/h2&gt;&lt;p&gt;首先新建python3.6的虚拟环境，关于pytho
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python之千千问</title>
    <link href="http://yoursite.com/2017/10/05/python%E4%B9%8B%E5%8D%83%E5%8D%83%E9%97%AE/"/>
    <id>http://yoursite.com/2017/10/05/python之千千问/</id>
    <published>2017-10-05T14:56:36.000Z</published>
    <updated>2017-10-09T15:01:16.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python中如何交换两个变量的值？"><a href="#python中如何交换两个变量的值？" class="headerlink" title="python中如何交换两个变量的值？"></a>python中如何交换两个变量的值？</h2><h2 id="The-Zen-Of-Python-Python之禅是什么？"><a href="#The-Zen-Of-Python-Python之禅是什么？" class="headerlink" title="The Zen Of Python Python之禅是什么？"></a>The Zen Of Python Python之禅是什么？</h2><h2 id="type-函数的作用？"><a href="#type-函数的作用？" class="headerlink" title="type()函数的作用？"></a>type()函数的作用？</h2><!-- ## python IDLE 如何请屏？ -->
<h2 id="2-2-和-2-2的区别？"><a href="#2-2-和-2-2的区别？" class="headerlink" title="2/2 和 2//2的区别？"></a>2/2 和 2//2的区别？</h2><h2 id="Python如何表示10、2、8、16进制？Python中不同进制之间如何转换？"><a href="#Python如何表示10、2、8、16进制？Python中不同进制之间如何转换？" class="headerlink" title="Python如何表示10、2、8、16进制？Python中不同进制之间如何转换？"></a>Python如何表示10、2、8、16进制？Python中不同进制之间如何转换？</h2><!-- ## 布尔类型属于数字吗？ -->
<h2 id="布尔类型：是不是只有数字1表示True-0表示False？"><a href="#布尔类型：是不是只有数字1表示True-0表示False？" class="headerlink" title="布尔类型：是不是只有数字1表示True 0表示False？"></a>布尔类型：是不是只有数字1表示True 0表示False？</h2><h2 id="bool-None-返回值？"><a href="#bool-None-返回值？" class="headerlink" title="bool(None)返回值？"></a>bool(None)返回值？</h2><h2 id="python中如何表示复数？"><a href="#python中如何表示复数？" class="headerlink" title="python中如何表示复数？"></a>python中如何表示复数？</h2><h2 id="‘Hello-World’不同方式截取W？"><a href="#‘Hello-World’不同方式截取W？" class="headerlink" title="‘Hello World’不同方式截取W？"></a>‘Hello World’不同方式截取W？</h2><h2 id="‘Hello-World’不同方式截取World？"><a href="#‘Hello-World’不同方式截取World？" class="headerlink" title="‘Hello World’不同方式截取World？"></a>‘Hello World’不同方式截取World？</h2><h2 id="‘Hello-World’-6-20-返回值？"><a href="#‘Hello-World’-6-20-返回值？" class="headerlink" title="‘Hello World’[6:20]返回值？"></a>‘Hello World’[6:20]返回值？</h2><h2 id="‘Hello-World’-6-0-返回值？"><a href="#‘Hello-World’-6-0-返回值？" class="headerlink" title="‘Hello World’[6:0]返回值？"></a>‘Hello World’[6:0]返回值？</h2><h2 id="n和-r的区别？"><a href="#n和-r的区别？" class="headerlink" title="\n和\r的区别？"></a>\n和\r的区别？</h2><!-- \n是换行，英文是New line，表示使光标到行首
\r是回车，英文是Carriage return，表示使光标下移一格
\r\n表示回车换行
我们在平时使用电脑时，已经习惯了回车和换行一次搞定，敲一个回车键，即是回车，又是换行。 -->
<h2 id="如何定义只有一个元素的元组？"><a href="#如何定义只有一个元素的元组？" class="headerlink" title="如何定义只有一个元素的元组？"></a>如何定义只有一个元素的元组？</h2><h2 id="如何表示一个元素都没有的空的元组？"><a href="#如何表示一个元素都没有的空的元组？" class="headerlink" title="如何表示一个元素都没有的空的元组？"></a>如何表示一个元素都没有的空的元组？</h2><h2 id="min-‘hello-world’-返回什么？"><a href="#min-‘hello-world’-返回什么？" class="headerlink" title="min(‘hello world’)返回什么？"></a>min(‘hello world’)返回什么？</h2><h2 id="如何定义一个空的集合？"><a href="#如何定义一个空的集合？" class="headerlink" title="如何定义一个空的集合？"></a>如何定义一个空的集合？</h2><h2 id="空的字典如何定义？"><a href="#空的字典如何定义？" class="headerlink" title="空的字典如何定义？"></a>空的字典如何定义？</h2><p>## </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python中如何交换两个变量的值？&quot;&gt;&lt;a href=&quot;#python中如何交换两个变量的值？&quot; class=&quot;headerlink&quot; title=&quot;python中如何交换两个变量的值？&quot;&gt;&lt;/a&gt;python中如何交换两个变量的值？&lt;/h2&gt;&lt;h2 id=&quot;T
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MySQL入门到应用</title>
    <link href="http://yoursite.com/2017/09/14/MySQL%E5%85%A5%E9%97%A8%E5%88%B0%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2017/09/14/MySQL入门到应用/</id>
    <published>2017-09-14T12:36:43.000Z</published>
    <updated>2017-09-24T10:58:28.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、MySQL基本操作"><a href="#一、MySQL基本操作" class="headerlink" title="一、MySQL基本操作"></a>一、MySQL基本操作</h2><h3 id="1-1-MySQL安装与配置"><a href="#1-1-MySQL安装与配置" class="headerlink" title="1.1 MySQL安装与配置"></a>1.1 MySQL安装与配置</h3><p><a href="https://www.mysql.com/" target="_blank" rel="external">MySQL官网</a><br>根目录：C:\Program Files\MySQL<br>配置文件my.ini目录：C:\ProgramData\MySQL\MySQL Server 5.7<br>bin目录（C:\Program Files\MySQL\MySQL Server 5.7\bin）添加到环境变量，确保在任何目录下，可以直接调用bin目录下的可执行文件</p>
<p>MySQL目录结构：<br>bin目录：存储可执行文件<br>data目录：存储数据文件  （data目录在这个路径下C:\ProgramData\MySQL\MySQL Server 5.7\Data）<br>docs目录：文档<br>include目录: 存储包含的头文件<br>lib目录：存储库文件<br>share目录: 错误消息和字符集文件</p>
<p>修改编码方式:<br>打开配置文件my.ini，配置如下；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[mysql]</div><div class="line">default-character-set=utf8</div><div class="line"></div><div class="line">[mysqld]</div><div class="line">character-set-server=utf8</div></pre></td></tr></table></figure></p>
<p>注意：utf8，不是utf-8</p>
<p>设置端口号<br>port=3306 默认端口号</p>
<p>目录位置<br>基础安装目录：<br>Path to installation directory. All paths are usually resolved relative to this.<br>basedir=”C:/Program Files/MySQL/MySQL Server 5.7/“<br>数据文件存储位置：<br>Path to the database root<br>datadir=C:/ProgramData/MySQL/MySQL Server 5.7\Data</p>
<h3 id="1-2-启动和关闭MySQL服务"><a href="#1-2-启动和关闭MySQL服务" class="headerlink" title="1.2 启动和关闭MySQL服务"></a>1.2 启动和关闭MySQL服务</h3><p>启动MySQL服务两种方式：<br>1.通过图形界面，在操作系统级别上启动MySQL服务；<br>2.命令行方式输入命令：<br>启动MySQL服务<br>net start mysql<br>关闭MySQL服务<br>net start mysql<br>注意：net start/stop 不知可以启动MySQL服务，还可以启动所有服务列表上的服务<br>报错提示1：如果出现 服务名无效 的提示，是因为电脑安装的MySQL版本是MySQL5.7，在windows系统MySQL默认的名字是MySQL57,所以应该输入如下命令：<br>启动MySQL服务<br>net start mysql57<br>关闭MySQL服务<br>net start mysql57<br>报错提示2：如果出现<code>发生系统错误 5。拒绝访问。</code>的提示, 需要切换到管理员模式，要以管理员身份来运行cmd程序来启动mysql。<br>高级设置：右键点击命令提示符，选择属性-快捷方式-高级-勾选用管理员身份运行。以后就可以直接以管理员身份运行命令提示符了。</p>
<p>mysql -V ？？？</p>
<h3 id="1-3-MySQL登录与退出"><a href="#1-3-MySQL登录与退出" class="headerlink" title="1.3 MySQL登录与退出"></a>1.3 MySQL登录与退出</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、MySQL基本操作&quot;&gt;&lt;a href=&quot;#一、MySQL基本操作&quot; class=&quot;headerlink&quot; title=&quot;一、MySQL基本操作&quot;&gt;&lt;/a&gt;一、MySQL基本操作&lt;/h2&gt;&lt;h3 id=&quot;1-1-MySQL安装与配置&quot;&gt;&lt;a href=&quot;#1-1
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Python进阶</title>
    <link href="http://yoursite.com/2017/09/12/Python%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2017/09/12/Python进阶/</id>
    <published>2017-09-12T03:47:22.000Z</published>
    <updated>2017-12-24T15:06:20.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、数据结构"><a href="#一、数据结构" class="headerlink" title="一、数据结构"></a>一、数据结构</h2><h3 id="1-1-列表字典集合中根据条件筛选数据"><a href="#1-1-列表字典集合中根据条件筛选数据" class="headerlink" title="1.1 列表字典集合中根据条件筛选数据"></a>1.1 列表字典集合中根据条件筛选数据</h3><h4 id="1-1-1-列表"><a href="#1-1-1-列表" class="headerlink" title="1.1.1 列表"></a>1.1.1 列表</h4><p>filter函数：filter(lambda x: x &gt;=0, data)<br>列表解析： [x for x in data if x &gt;=0]</p>
<h4 id="1-1-2-字典"><a href="#1-1-2-字典" class="headerlink" title="1.1.2 字典"></a>1.1.2 字典</h4><p>字典解析{k:v for k,v in d.iteritems() if v &gt; 90}</p>
<h4 id="1-1-3-集合"><a href="#1-1-3-集合" class="headerlink" title="1.1.3 集合"></a>1.1.3 集合</h4><p>集合解析{x for x in s if x % 3 == 0}</p>
<h3 id="1-2-元组元素命名"><a href="#1-2-元组元素命名" class="headerlink" title="1.2 元组元素命名"></a>1.2 元组元素命名</h3><p>为元组中的每个元素命名，提高程序可读性。</p>
<h4 id="1-2-1-定义数值变量"><a href="#1-2-1-定义数值变量" class="headerlink" title="1.2.1 定义数值变量"></a>1.2.1 定义数值变量</h4><p>python没有真正的枚举类型，但是我们可以定义类似于其他语言的枚举类型，也就是定义一系列数值变量。</p>
<h4 id="1-2-2-namedtuple替代内置tuple"><a href="#1-2-2-namedtuple替代内置tuple" class="headerlink" title="1.2.2 namedtuple替代内置tuple"></a>1.2.2 namedtuple替代内置tuple</h4><p>使用标准库中collections.namedtuple替代内置tuple。</p>
<h3 id="1-3-统计序列元素出现频度"><a href="#1-3-统计序列元素出现频度" class="headerlink" title="1.3 统计序列元素出现频度"></a>1.3 统计序列元素出现频度</h3><p>使用collections.Counter对象：</p>
<ol>
<li>将序列传入Counter的构造器，得到Counter对象是元素频度的字典。<br>2.Counter.most_commmon(n)方法得到频度最高的n个元素的列表。</li>
</ol>
<h4 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h4><p><code></code></p>
<h1 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h1><p>from random import randint</p>
<h1 id="列表解析生成随机序列"><a href="#列表解析生成随机序列" class="headerlink" title="列表解析生成随机序列"></a>列表解析生成随机序列</h1><p>data = [randint(0, 20) for _ in xrange(30)]<br>print data</p>
<h1 id="6-11-15-6-20-6-7-7-10-5-4-15-10-16-15-16-12-3-13-13-15-2-19-7-17-10-16-1-17-6"><a href="#6-11-15-6-20-6-7-7-10-5-4-15-10-16-15-16-12-3-13-13-15-2-19-7-17-10-16-1-17-6" class="headerlink" title="[6, 11, 15, 6, 20, 6, 7, 7, 10, 5, 4, 15, 10, 16, 15, 16, 12, 3, 13, 13, 15, 2, 19, 7, 17, 10, 16, 1, 17, 6]"></a>[6, 11, 15, 6, 20, 6, 7, 7, 10, 5, 4, 15, 10, 16, 15, 16, 12, 3, 13, 13, 15, 2, 19, 7, 17, 10, 16, 1, 17, 6]</h1><h1 id="date作为字典的键，0作为字典的值，创建一个字典来"><a href="#date作为字典的键，0作为字典的值，创建一个字典来" class="headerlink" title="date作为字典的键，0作为字典的值，创建一个字典来"></a>date作为字典的键，0作为字典的值，创建一个字典来</h1><p>c = dict.fromkeys(data, 0)<br>print c</p>
<h1 id="1-0-2-0-3-0-4-0-5-0-6-0-7-0-10-0-11-0-12-0-13-0-15-0-16-0-17-0-19-0-20-0"><a href="#1-0-2-0-3-0-4-0-5-0-6-0-7-0-10-0-11-0-12-0-13-0-15-0-16-0-17-0-19-0-20-0" class="headerlink" title="{1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 10: 0, 11: 0, 12: 0, 13: 0, 15: 0, 16: 0, 17: 0, 19: 0, 20: 0}"></a>{1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 10: 0, 11: 0, 12: 0, 13: 0, 15: 0, 16: 0, 17: 0, 19: 0, 20: 0}</h1><h1 id="进行对data的迭代"><a href="#进行对data的迭代" class="headerlink" title="进行对data的迭代"></a>进行对data的迭代</h1><p>for x in data:<br>    c[x] += 1<br>print c</p>
<h1 id="1-1-2-1-3-1-4-1-5-1-6-4-7-3-10-3-11-1-12-1-13-2-15-4-16-3-17-2-19-1-20-1"><a href="#1-1-2-1-3-1-4-1-5-1-6-4-7-3-10-3-11-1-12-1-13-2-15-4-16-3-17-2-19-1-20-1" class="headerlink" title="{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 4, 7: 3, 10: 3, 11: 1, 12: 1, 13: 2, 15: 4, 16: 3, 17: 2, 19: 1, 20: 1}"></a>{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 4, 7: 3, 10: 3, 11: 1, 12: 1, 13: 2, 15: 4, 16: 3, 17: 2, 19: 1, 20: 1}</h1><h1 id="根据字典的值对字典中的项进行排序"><a href="#根据字典的值对字典中的项进行排序" class="headerlink" title="根据字典的值对字典中的项进行排序"></a>根据字典的值对字典中的项进行排序</h1><h1 id="方法2，更简洁的方法"><a href="#方法2，更简洁的方法" class="headerlink" title="方法2，更简洁的方法"></a>方法2，更简洁的方法</h1><p>from collections import Counter</p>
<h1 id="直接把data传给Counter的构造器"><a href="#直接把data传给Counter的构造器" class="headerlink" title="直接把data传给Counter的构造器"></a>直接把data传给Counter的构造器</h1><p>c2 = Counter(data)<br>print c</p>
<h1 id="1-1-2-1-3-1-4-1-5-1-6-4-7-3-10-3-11-1-12-1-13-2-15-4-16-3-17-2-19-1-20-1-1"><a href="#1-1-2-1-3-1-4-1-5-1-6-4-7-3-10-3-11-1-12-1-13-2-15-4-16-3-17-2-19-1-20-1-1" class="headerlink" title="{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 4, 7: 3, 10: 3, 11: 1, 12: 1, 13: 2, 15: 4, 16: 3, 17: 2, 19: 1, 20: 1}"></a>{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 4, 7: 3, 10: 3, 11: 1, 12: 1, 13: 2, 15: 4, 16: 3, 17: 2, 19: 1, 20: 1}</h1><p>print “<strong><em>**</em></strong>“<br>print c2</p>
<h1 id="Counter-6-4-15-4-7-3-10-3-16-3-13-2-17-2-1-1-2-1-3-1-4-1-5-1-11-1-12-1-19-1-20-1"><a href="#Counter-6-4-15-4-7-3-10-3-16-3-13-2-17-2-1-1-2-1-3-1-4-1-5-1-11-1-12-1-19-1-20-1" class="headerlink" title="Counter({6: 4, 15: 4, 7: 3, 10: 3, 16: 3, 13: 2, 17: 2, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 11: 1, 12: 1, 19: 1, 20: 1})"></a>Counter({6: 4, 15: 4, 7: 3, 10: 3, 16: 3, 13: 2, 17: 2, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 11: 1, 12: 1, 19: 1, 20: 1})</h1><p>print “<strong><em>**</em></strong>“</p>
<h1 id="c2这个Counter对象，可以更直接的统计出哪些频度出现更高"><a href="#c2这个Counter对象，可以更直接的统计出哪些频度出现更高" class="headerlink" title="c2这个Counter对象，可以更直接的统计出哪些频度出现更高"></a>c2这个Counter对象，可以更直接的统计出哪些频度出现更高</h1><p>c2_most_3_common = c2.most_common(3)<br>print c2_most_3_common</p>
<h1 id="6-4-15-4-7-3"><a href="#6-4-15-4-7-3" class="headerlink" title="[(6, 4), (15, 4), (7, 3)]"></a>[(6, 4), (15, 4), (7, 3)]</h1><h1 id="英文文章词频统计"><a href="#英文文章词频统计" class="headerlink" title="英文文章词频统计"></a>英文文章词频统计</h1><p>import re<br>txt = open(‘CodingStyle’).read()<br>print txt</p>
<h1 id="首先分隔词，把每个词取出来放到一个序列中"><a href="#首先分隔词，把每个词取出来放到一个序列中" class="headerlink" title="首先分隔词，把每个词取出来放到一个序列中"></a>首先分隔词，把每个词取出来放到一个序列中</h1><h1 id="使用正则表达式的分隔模块"><a href="#使用正则表达式的分隔模块" class="headerlink" title="使用正则表达式的分隔模块"></a>使用正则表达式的分隔模块</h1><p>words = re.split(‘\W+’, txt)  # 用非字母作为分隔</p>
<h1 id="对每个词出现的频度进行统计"><a href="#对每个词出现的频度进行统计" class="headerlink" title="对每个词出现的频度进行统计"></a>对每个词出现的频度进行统计</h1><p>words2 = Counter(words)<br>words2_most_10_common = words2.most_common(10)<br>print words2_most_10_common<br></p>
<h3 id="1-4-字典中的项排序"><a href="#1-4-字典中的项排序" class="headerlink" title="1.4 字典中的项排序"></a>1.4 字典中的项排序</h3><p>根据字典中值的大小，对字典中的项排序。<br>使用内置函数sorted:</p>
<ol>
<li>利用zip将字典数据转化元组；</li>
<li>传递sorted函数的key参数。</li>
</ol>
<h4 id="Details-1"><a href="#Details-1" class="headerlink" title="Details"></a>Details</h4><p><code></code></p>
<h1 id="内置函数在内部是以C的速度运行，速度更快"><a href="#内置函数在内部是以C的速度运行，速度更快" class="headerlink" title="内置函数在内部是以C的速度运行，速度更快"></a>内置函数在内部是以C的速度运行，速度更快</h1><p>sorted_list = sorted([2, 5, 9, 1, 0])<br>print sorted_list</p>
<h1 id="0-1-2-5-9"><a href="#0-1-2-5-9" class="headerlink" title="[0, 1, 2, 5, 9]"></a>[0, 1, 2, 5, 9]</h1><h1 id="创建随机成绩表"><a href="#创建随机成绩表" class="headerlink" title="创建随机成绩表"></a>创建随机成绩表</h1><p>from random import randint</p>
<h1 id="字典解析"><a href="#字典解析" class="headerlink" title="字典解析"></a>字典解析</h1><p>student_grades = {x: randint(60, 100) for x in ‘xyzabc’ }<br>print student_grades</p>
<h1 id="‘a’-67-‘c’-90-‘b’-66-‘y’-100-‘x’-62-‘z’-100"><a href="#‘a’-67-‘c’-90-‘b’-66-‘y’-100-‘x’-62-‘z’-100" class="headerlink" title="{‘a’: 67, ‘c’: 90, ‘b’: 66, ‘y’: 100, ‘x’: 62, ‘z’: 100}"></a>{‘a’: 67, ‘c’: 90, ‘b’: 66, ‘y’: 100, ‘x’: 62, ‘z’: 100}</h1><p>sorted_student_grades = sorted(student_grades)<br>print sorted_student_grades</p>
<h1 id="‘a’-‘b’-‘c’-‘x’-‘y’-‘z’"><a href="#‘a’-‘b’-‘c’-‘x’-‘y’-‘z’" class="headerlink" title="[‘a’, ‘b’, ‘c’, ‘x’, ‘y’, ‘z’]"></a>[‘a’, ‘b’, ‘c’, ‘x’, ‘y’, ‘z’]</h1><h1 id="并不是按照值进行排序的，而是按照键进行排序的"><a href="#并不是按照值进行排序的，而是按照键进行排序的" class="headerlink" title="并不是按照值进行排序的，而是按照键进行排序的"></a>并不是按照值进行排序的，而是按照键进行排序的</h1><h1 id="sorted传入的是一个可迭代对象，对于字典的可迭代对象，也就是iter-sorted-student-grades-为了看见它可以转换为list"><a href="#sorted传入的是一个可迭代对象，对于字典的可迭代对象，也就是iter-sorted-student-grades-为了看见它可以转换为list" class="headerlink" title="sorted传入的是一个可迭代对象，对于字典的可迭代对象，也就是iter(sorted_student_grades),为了看见它可以转换为list"></a>sorted传入的是一个可迭代对象，对于字典的可迭代对象，也就是iter(sorted_student_grades),为了看见它可以转换为list</h1><p>print iter(sorted_student_grades)</p>
<h1 id=""><a href="#" class="headerlink" title=""></a><listiterator object="" at="" 0x0000000003239390=""></listiterator></h1><p>print list(iter(sorted_student_grades))</p>
<h1 id="‘a’-‘b’-‘c’-‘x’-‘y’-‘z’-1"><a href="#‘a’-‘b’-‘c’-‘x’-‘y’-‘z’-1" class="headerlink" title="[‘a’, ‘b’, ‘c’, ‘x’, ‘y’, ‘z’]"></a>[‘a’, ‘b’, ‘c’, ‘x’, ‘y’, ‘z’]</h1><h1 id="实际上是对键进行了排序，并且值已经不存在了"><a href="#实际上是对键进行了排序，并且值已经不存在了" class="headerlink" title="实际上是对键进行了排序，并且值已经不存在了"></a>实际上是对键进行了排序，并且值已经不存在了</h1><h1 id="对字典进行转换，让它变成sorted（）可以排序的结构"><a href="#对字典进行转换，让它变成sorted（）可以排序的结构" class="headerlink" title="对字典进行转换，让它变成sorted（）可以排序的结构"></a>对字典进行转换，让它变成sorted（）可以排序的结构</h1><h1 id="元组的比较，先比较第0个元素，如果第0个元素想等的情况下，再比较第1个元素"><a href="#元组的比较，先比较第0个元素，如果第0个元素想等的情况下，再比较第1个元素" class="headerlink" title="元组的比较，先比较第0个元素，如果第0个元素想等的情况下，再比较第1个元素"></a>元组的比较，先比较第0个元素，如果第0个元素想等的情况下，再比较第1个元素</h1><p>print (97, ‘a’) &gt; (69, ‘b’)</p>
<h1 id="True"><a href="#True" class="headerlink" title="True"></a>True</h1><p>print (97, ‘a’) &gt; (97, ‘b’)</p>
<h1 id="False"><a href="#False" class="headerlink" title="False"></a>False</h1><p>print (97, ‘a’) &lt; (97, ‘b’)</p>
<h1 id="True-1"><a href="#True-1" class="headerlink" title="True"></a>True</h1><h1 id="将字典转换成元组的列表"><a href="#将字典转换成元组的列表" class="headerlink" title="将字典转换成元组的列表"></a>将字典转换成元组的列表</h1><h1 id="keys-得到所有的键"><a href="#keys-得到所有的键" class="headerlink" title="keys()得到所有的键"></a>keys()得到所有的键</h1><p>print student_grades.keys()</p>
<h1 id="‘a’-‘c’-‘b’-‘y’-‘x’-‘z’"><a href="#‘a’-‘c’-‘b’-‘y’-‘x’-‘z’" class="headerlink" title="[‘a’, ‘c’, ‘b’, ‘y’, ‘x’, ‘z’]"></a>[‘a’, ‘c’, ‘b’, ‘y’, ‘x’, ‘z’]</h1><h1 id="values-得到所有的值"><a href="#values-得到所有的值" class="headerlink" title="values()得到所有的值"></a>values()得到所有的值</h1><p>print student_grades.values()</p>
<h1 id="67-90-66-100-62-100"><a href="#67-90-66-100-62-100" class="headerlink" title="[67, 90, 66, 100, 62, 100]"></a>[67, 90, 66, 100, 62, 100]</h1><h1 id="使用zio-函数把两个列表拼起来，变成一个"><a href="#使用zio-函数把两个列表拼起来，变成一个" class="headerlink" title="使用zio()函数把两个列表拼起来，变成一个"></a>使用zio()函数把两个列表拼起来，变成一个</h1><p>print zip(student_grades.values(), student_grades.keys())</p>
<h1 id="67-‘a’-90-‘c’-66-‘b’-100-‘y’-62-‘x’-100-‘z’"><a href="#67-‘a’-90-‘c’-66-‘b’-100-‘y’-62-‘x’-100-‘z’" class="headerlink" title="[(67, ‘a’), (90, ‘c’), (66, ‘b’), (100, ‘y’), (62, ‘x’), (100, ‘z’)]"></a>[(67, ‘a’), (90, ‘c’), (66, ‘b’), (100, ‘y’), (62, ‘x’), (100, ‘z’)]</h1><h1 id="依次类推，构成元组的列表"><a href="#依次类推，构成元组的列表" class="headerlink" title="依次类推，构成元组的列表"></a>依次类推，构成元组的列表</h1><h1 id="在内存使用上，更优化一些"><a href="#在内存使用上，更优化一些" class="headerlink" title="在内存使用上，更优化一些"></a>在内存使用上，更优化一些</h1><h1 id="python2的版本上，keys-和values-得到的都是列表。如果列表很大，很浪费空间，可以使用它的迭代版本"><a href="#python2的版本上，keys-和values-得到的都是列表。如果列表很大，很浪费空间，可以使用它的迭代版本" class="headerlink" title="python2的版本上，keys()和values()得到的都是列表。如果列表很大，很浪费空间，可以使用它的迭代版本"></a>python2的版本上，keys()和values()得到的都是列表。如果列表很大，很浪费空间，可以使用它的迭代版本</h1><h1 id="同样也能得到这样的结果，-但是存储空间上少一些浪费"><a href="#同样也能得到这样的结果，-但是存储空间上少一些浪费" class="headerlink" title="同样也能得到这样的结果， 但是存储空间上少一些浪费"></a>同样也能得到这样的结果， 但是存储空间上少一些浪费</h1><p>print zip(student_grades.itervalues(), student_grades.iterkeys())</p>
<h1 id="67-‘a’-90-‘c’-66-‘b’-100-‘y’-62-‘x’-100-‘z’-1"><a href="#67-‘a’-90-‘c’-66-‘b’-100-‘y’-62-‘x’-100-‘z’-1" class="headerlink" title="[(67, ‘a’), (90, ‘c’), (66, ‘b’), (100, ‘y’), (62, ‘x’), (100, ‘z’)]"></a>[(67, ‘a’), (90, ‘c’), (66, ‘b’), (100, ‘y’), (62, ‘x’), (100, ‘z’)]</h1><h1 id="成绩由小到大进行排序"><a href="#成绩由小到大进行排序" class="headerlink" title="成绩由小到大进行排序"></a>成绩由小到大进行排序</h1><p>print sorted(zip(student_grades.itervalues(), student_grades.iterkeys()))</p>
<h1 id="62-‘x’-66-‘b’-67-‘a’-90-‘c’-100-‘y’-100-‘z’"><a href="#62-‘x’-66-‘b’-67-‘a’-90-‘c’-100-‘y’-100-‘z’" class="headerlink" title="[(62, ‘x’), (66, ‘b’), (67, ‘a’), (90, ‘c’), (100, ‘y’), (100, ‘z’)]"></a>[(62, ‘x’), (66, ‘b’), (67, ‘a’), (90, ‘c’), (100, ‘y’), (100, ‘z’)]</h1><h1 id="方法二-利用sorted-的key参数"><a href="#方法二-利用sorted-的key参数" class="headerlink" title="方法二 利用sorted()的key参数"></a>方法二 利用sorted()的key参数</h1><h1 id="字典的items-直接就是每个键，值"><a href="#字典的items-直接就是每个键，值" class="headerlink" title="字典的items()直接就是每个键，值"></a>字典的items()直接就是每个键，值</h1><p>print student_grades.items()</p>
<h1 id="‘a’-67-‘c’-90-‘b’-66-‘y’-100-‘x’-62-‘z’-100-1"><a href="#‘a’-67-‘c’-90-‘b’-66-‘y’-100-‘x’-62-‘z’-100-1" class="headerlink" title="[(‘a’, 67), (‘c’, 90), (‘b’, 66), (‘y’, 100), (‘x’, 62), (‘z’, 100)]"></a>[(‘a’, 67), (‘c’, 90), (‘b’, 66), (‘y’, 100), (‘x’, 62), (‘z’, 100)]</h1><h1 id="使用sorted-的一个参数，也就是key-key就是你要传入一个函数"><a href="#使用sorted-的一个参数，也就是key-key就是你要传入一个函数" class="headerlink" title="使用sorted()的一个参数，也就是key,key就是你要传入一个函数"></a>使用sorted()的一个参数，也就是key,key就是你要传入一个函数</h1><p>print sorted(student_grades.items(), key = lambda x: x[1])</p>
<h1 id="‘x’-62-‘b’-66-‘a’-67-‘c’-90-‘y’-100-‘z’-100"><a href="#‘x’-62-‘b’-66-‘a’-67-‘c’-90-‘y’-100-‘z’-100" class="headerlink" title="[(‘x’, 62), (‘b’, 66), (‘a’, 67), (‘c’, 90), (‘y’, 100), (‘z’, 100)]"></a>[(‘x’, 62), (‘b’, 66), (‘a’, 67), (‘c’, 90), (‘y’, 100), (‘z’, 100)]</h1><p></p>
<h3 id="1-5-快速找到多个字典中的公共键（key"><a href="#1-5-快速找到多个字典中的公共键（key" class="headerlink" title="1.5 快速找到多个字典中的公共键（key)"></a>1.5 快速找到多个字典中的公共键（key)</h3><p>利用集合（set)的交集操作：</p>
<ol>
<li>使用字典的viewkeys()方法，得到一个字典keys的集合；</li>
<li>使用map函数，得到所有字典的keys的集合；</li>
<li>使用reduce函数，取所有字典的keys的集合的交集。</li>
</ol>
<h4 id="Details-2"><a href="#Details-2" class="headerlink" title="Details"></a>Details</h4><p><code></code></p>
<h1 id="多个字典中的公共键，也就是在每个字典中都出现的键"><a href="#多个字典中的公共键，也就是在每个字典中都出现的键" class="headerlink" title="多个字典中的公共键，也就是在每个字典中都出现的键"></a>多个字典中的公共键，也就是在每个字典中都出现的键</h1><p>from random import randint, sample  # sample取样</p>
<h1 id="产生随机进球球员"><a href="#产生随机进球球员" class="headerlink" title="产生随机进球球员"></a>产生随机进球球员</h1><p>print sample(‘abcdefg’, 3)</p>
<h1 id="‘a’-‘e’-‘b’"><a href="#‘a’-‘e’-‘b’" class="headerlink" title="[‘a’, ‘e’, ‘b’]"></a>[‘a’, ‘e’, ‘b’]</h1><h1 id="进球球员数目也是随机的-3-6个人进球了"><a href="#进球球员数目也是随机的-3-6个人进球了" class="headerlink" title="进球球员数目也是随机的, 3-6个人进球了"></a>进球球员数目也是随机的, 3-6个人进球了</h1><p>print sample(‘abcdefg’, randint(3, 6))</p>
<h1 id="‘e’-‘b’-‘g’-‘d’"><a href="#‘e’-‘b’-‘g’-‘d’" class="headerlink" title="[‘e’, ‘b’, ‘g’, ‘d’]"></a>[‘e’, ‘b’, ‘g’, ‘d’]</h1><h1 id="字典解析产生每轮的数据"><a href="#字典解析产生每轮的数据" class="headerlink" title="字典解析产生每轮的数据"></a>字典解析产生每轮的数据</h1><h1 id="每一轮的进球数限定为1-4个"><a href="#每一轮的进球数限定为1-4个" class="headerlink" title="每一轮的进球数限定为1-4个"></a>每一轮的进球数限定为1-4个</h1><p>s1 = {x: randint(1, 4) for x in sample(‘abcdefg’, randint(3, 6))}<br>s2 = {x: randint(1, 4) for x in sample(‘abcdefg’, randint(3, 6))}<br>s3 = {x: randint(1, 4) for x in sample(‘abcdefg’, randint(3, 6))}<br>print s1</p>
<h1 id="‘a’-1-‘c’-2-‘b’-4-‘e’-2-‘d’-2-‘f’-4"><a href="#‘a’-1-‘c’-2-‘b’-4-‘e’-2-‘d’-2-‘f’-4" class="headerlink" title="{‘a’: 1, ‘c’: 2, ‘b’: 4, ‘e’: 2, ‘d’: 2, ‘f’: 4}"></a>{‘a’: 1, ‘c’: 2, ‘b’: 4, ‘e’: 2, ‘d’: 2, ‘f’: 4}</h1><p>print ‘——–’<br>print s2</p>
<h1 id="‘c’-4-‘b’-2-‘g’-1"><a href="#‘c’-4-‘b’-2-‘g’-1" class="headerlink" title="{‘c’: 4, ‘b’: 2, ‘g’: 1}"></a>{‘c’: 4, ‘b’: 2, ‘g’: 1}</h1><p>print ‘——–’<br>print s3</p>
<h1 id="‘c’-3-‘e’-3-‘g’-3"><a href="#‘c’-3-‘e’-3-‘g’-3" class="headerlink" title="{‘c’: 3, ‘e’: 3, ‘g’: 3}"></a>{‘c’: 3, ‘e’: 3, ‘g’: 3}</h1><p>print ‘——–’</p>
<h1 id="迭代键值，对于字典的迭代就是迭代它的键"><a href="#迭代键值，对于字典的迭代就是迭代它的键" class="headerlink" title="迭代键值，对于字典的迭代就是迭代它的键"></a>迭代键值，对于字典的迭代就是迭代它的键</h1><p>res = []  # 列表或者集合存储起来<br>for k in s1:<br>    if k in s2 and k in s3:<br>        res.append(k)<br>print res</p>
<h1 id="‘c’"><a href="#‘c’" class="headerlink" title="[‘c’]"></a>[‘c’]</h1><h1 id="但是这种方法啰嗦而且执行的效率也不好"><a href="#但是这种方法啰嗦而且执行的效率也不好" class="headerlink" title="但是这种方法啰嗦而且执行的效率也不好"></a>但是这种方法啰嗦而且执行的效率也不好</h1><h1 id="方法2-集合的操作"><a href="#方法2-集合的操作" class="headerlink" title="方法2 集合的操作"></a>方法2 集合的操作</h1><h1 id="首先使用字典的viewkeys-得到每个字典所有键的集合"><a href="#首先使用字典的viewkeys-得到每个字典所有键的集合" class="headerlink" title="首先使用字典的viewkeys()得到每个字典所有键的集合"></a>首先使用字典的viewkeys()得到每个字典所有键的集合</h1><h1 id="实际上是keys的视图"><a href="#实际上是keys的视图" class="headerlink" title="实际上是keys的视图"></a>实际上是keys的视图</h1><p>print s1.viewkeys()</p>
<h1 id="dict-keys-‘a’-‘c’-‘b’-‘e’-‘d’-‘f’"><a href="#dict-keys-‘a’-‘c’-‘b’-‘e’-‘d’-‘f’" class="headerlink" title="dict_keys([‘a’, ‘c’, ‘b’, ‘e’, ‘d’, ‘f’])"></a>dict_keys([‘a’, ‘c’, ‘b’, ‘e’, ‘d’, ‘f’])</h1><p>print s2.viewkeys()</p>
<h1 id="dict-keys-‘c’-‘b’-‘g’"><a href="#dict-keys-‘c’-‘b’-‘g’" class="headerlink" title="dict_keys([‘c’, ‘b’, ‘g’])"></a>dict_keys([‘c’, ‘b’, ‘g’])</h1><h1 id="集合-支持集合的交集操作"><a href="#集合-支持集合的交集操作" class="headerlink" title="集合 支持集合的交集操作"></a>集合 支持集合的交集操作</h1><p>print s1.viewkeys() &amp; s2.viewkeys()</p>
<h1 id="set-‘c’-‘b’"><a href="#set-‘c’-‘b’" class="headerlink" title="set([‘c’, ‘b’])"></a>set([‘c’, ‘b’])</h1><h1 id="前三轮的"><a href="#前三轮的" class="headerlink" title="前三轮的"></a>前三轮的</h1><p>print s1.viewkeys() &amp; s2.viewkeys() &amp; s3.viewkeys()</p>
<h1 id="set-‘c’"><a href="#set-‘c’" class="headerlink" title="set([‘c’])"></a>set([‘c’])</h1><p>print ‘——‘</p>
<h1 id="对于n轮-分别使用map-reduce-来处理这样的问题"><a href="#对于n轮-分别使用map-reduce-来处理这样的问题" class="headerlink" title="对于n轮  分别使用map() reduce()来处理这样的问题"></a>对于n轮  分别使用map() reduce()来处理这样的问题</h1><h1 id="首先得到每一轮的keys的集合"><a href="#首先得到每一轮的keys的集合" class="headerlink" title="首先得到每一轮的keys的集合"></a>首先得到每一轮的keys的集合</h1><p>print map(dict.viewkeys, [s1, s2, s3])</p>
<h1 id="dict-keys-‘a’-‘c’-‘b’-‘e’-‘d’-‘f’-dict-keys-‘c’-‘b’-‘g’-dict-keys-‘c’-‘e’-‘g’"><a href="#dict-keys-‘a’-‘c’-‘b’-‘e’-‘d’-‘f’-dict-keys-‘c’-‘b’-‘g’-dict-keys-‘c’-‘e’-‘g’" class="headerlink" title="[dict_keys([‘a’, ‘c’, ‘b’, ‘e’, ‘d’, ‘f’]), dict_keys([‘c’, ‘b’, ‘g’]), dict_keys([‘c’, ‘e’, ‘g’])]"></a>[dict_keys([‘a’, ‘c’, ‘b’, ‘e’, ‘d’, ‘f’]), dict_keys([‘c’, ‘b’, ‘g’]), dict_keys([‘c’, ‘e’, ‘g’])]</h1><h1 id="使用reduce函数进行交集-迭代map中的所有集合"><a href="#使用reduce函数进行交集-迭代map中的所有集合" class="headerlink" title="使用reduce函数进行交集, 迭代map中的所有集合"></a>使用reduce函数进行交集, 迭代map中的所有集合</h1><p>print reduce(lambda a, b: a &amp; b, map(dict.viewkeys, [s1, s2, s3]))</p>
<h1 id="set-‘c’-1"><a href="#set-‘c’-1" class="headerlink" title="set([‘c’])"></a>set([‘c’])</h1><p></p>
<h3 id="1-6-字典保持有序"><a href="#1-6-字典保持有序" class="headerlink" title="1.6 字典保持有序"></a>1.6 字典保持有序</h3><p>使用collections.OrderedDict: 以OrderedDict替代内置字典Dict, 依次将选手成绩存入OrderedDict。</p>
<h4 id="Details-3"><a href="#Details-3" class="headerlink" title="Details"></a>Details</h4><p><code></code></p>
<h1 id="像列表一样，按照每个项进入字典的次序来打印，但是python默认的字典是不具备这个功能的，不具备有序性"><a href="#像列表一样，按照每个项进入字典的次序来打印，但是python默认的字典是不具备这个功能的，不具备有序性" class="headerlink" title="像列表一样，按照每个项进入字典的次序来打印，但是python默认的字典是不具备这个功能的，不具备有序性"></a>像列表一样，按照每个项进入字典的次序来打印，但是python默认的字典是不具备这个功能的，不具备有序性</h1><p>d = {}<br>d[‘Jim’] = (1, 35)<br>d[‘Leo’] = (2, 37)<br>d[‘Bob’] = (3, 40)</p>
<h1 id="我们希望迭代字典d的时候，按照先后顺序遍历"><a href="#我们希望迭代字典d的时候，按照先后顺序遍历" class="headerlink" title="我们希望迭代字典d的时候，按照先后顺序遍历"></a>我们希望迭代字典d的时候，按照先后顺序遍历</h1><p>for k in d:<br>    print k</p>
<h1 id="Bob"><a href="#Bob" class="headerlink" title="Bob"></a>Bob</h1><h1 id="Jim"><a href="#Jim" class="headerlink" title="Jim"></a>Jim</h1><h1 id="Leo"><a href="#Leo" class="headerlink" title="Leo"></a>Leo</h1><h1 id="但是内置dict并不维护每个项进入的先后顺序"><a href="#但是内置dict并不维护每个项进入的先后顺序" class="headerlink" title="但是内置dict并不维护每个项进入的先后顺序"></a>但是内置dict并不维护每个项进入的先后顺序</h1><h1 id="我们需要一个能维护每个项进入的先后顺序的数据结构"><a href="#我们需要一个能维护每个项进入的先后顺序的数据结构" class="headerlink" title="我们需要一个能维护每个项进入的先后顺序的数据结构"></a>我们需要一个能维护每个项进入的先后顺序的数据结构</h1><h1 id="使用collections-OrderedDict"><a href="#使用collections-OrderedDict" class="headerlink" title="使用collections.OrderedDict"></a>使用collections.OrderedDict</h1><p>from collections import OrderedDict<br>d = OrderedDict()<br>d[‘Jim’] = (1, 35)<br>d[‘Leo’] = (2, 37)<br>d[‘Bob’] = (3, 40)<br>for k in d:<br>    print k</p>
<h1 id="Jim-1"><a href="#Jim-1" class="headerlink" title="Jim"></a>Jim</h1><h1 id="Leo-1"><a href="#Leo-1" class="headerlink" title="Leo"></a>Leo</h1><h1 id="Bob-1"><a href="#Bob-1" class="headerlink" title="Bob"></a>Bob</h1><h1 id="按照每个项进入字典的次序来遍历的"><a href="#按照每个项进入字典的次序来遍历的" class="headerlink" title="按照每个项进入字典的次序来遍历的"></a>按照每个项进入字典的次序来遍历的</h1><p>from time import time  # 返回当前系统时间<br>from random import randint<br>from collections import OrderedDict</p>
<p>d = OrderedDict()<br>players = list(‘ABCDEFGH’)<br>start = time()</p>
<p>for i in xrange(8):<br>    raw_input()<br>    p = players.pop(randint(0, 7-i))<br>    end = time()<br>    print i + 1, p, end - start<br>    d[p] = (i + 1, end - start)</p>
<p>print ‘-‘ * 20<br>for k in d:<br>    print k, d[k]</p>
<h1 id="1-C-2-22200012207"><a href="#1-C-2-22200012207" class="headerlink" title="1 C 2.22200012207"></a>1 C 2.22200012207</h1><p>#</p>
<h1 id="2-A-2-80599999428"><a href="#2-A-2-80599999428" class="headerlink" title="2 A 2.80599999428"></a>2 A 2.80599999428</h1><p># </p>
<h1 id="3-D-3-13300013542"><a href="#3-D-3-13300013542" class="headerlink" title="3 D 3.13300013542"></a>3 D 3.13300013542</h1><p>#</p>
<h1 id="4-F-3-42000007629"><a href="#4-F-3-42000007629" class="headerlink" title="4 F 3.42000007629"></a>4 F 3.42000007629</h1><p>#</p>
<h1 id="5-B-3-77200007439"><a href="#5-B-3-77200007439" class="headerlink" title="5 B 3.77200007439"></a>5 B 3.77200007439</h1><p>#</p>
<h1 id="6-G-4-1400001049"><a href="#6-G-4-1400001049" class="headerlink" title="6 G 4.1400001049"></a>6 G 4.1400001049</h1><p>#</p>
<h1 id="7-E-4-49399995804"><a href="#7-E-4-49399995804" class="headerlink" title="7 E 4.49399995804"></a>7 E 4.49399995804</h1><p>#</p>
<h1 id="8-H-4-91799998283"><a href="#8-H-4-91799998283" class="headerlink" title="8 H 4.91799998283"></a>8 H 4.91799998283</h1><h1 id="——————–"><a href="#——————–" class="headerlink" title="——————–"></a>——————–</h1><h1 id="C-1-2-2220001220703125"><a href="#C-1-2-2220001220703125" class="headerlink" title="C (1, 2.2220001220703125)"></a>C (1, 2.2220001220703125)</h1><h1 id="A-2-2-805999994277954"><a href="#A-2-2-805999994277954" class="headerlink" title="A (2, 2.805999994277954)"></a>A (2, 2.805999994277954)</h1><h1 id="D-3-3-133000135421753"><a href="#D-3-3-133000135421753" class="headerlink" title="D (3, 3.133000135421753)"></a>D (3, 3.133000135421753)</h1><h1 id="F-4-3-4200000762939453"><a href="#F-4-3-4200000762939453" class="headerlink" title="F (4, 3.4200000762939453)"></a>F (4, 3.4200000762939453)</h1><h1 id="B-5-3-7720000743865967"><a href="#B-5-3-7720000743865967" class="headerlink" title="B (5, 3.7720000743865967)"></a>B (5, 3.7720000743865967)</h1><h1 id="G-6-4-140000104904175"><a href="#G-6-4-140000104904175" class="headerlink" title="G (6, 4.140000104904175)"></a>G (6, 4.140000104904175)</h1><h1 id="E-7-4-49399995803833"><a href="#E-7-4-49399995803833" class="headerlink" title="E (7, 4.49399995803833)"></a>E (7, 4.49399995803833)</h1><h1 id="H-8-4-917999982833862"><a href="#H-8-4-917999982833862" class="headerlink" title="H (8, 4.917999982833862)"></a>H (8, 4.917999982833862)</h1><p></p>
<h3 id="1-7-实现历史纪录功能"><a href="#1-7-实现历史纪录功能" class="headerlink" title="1.7 实现历史纪录功能"></a>1.7 实现历史纪录功能</h3><p>实现用户的历史纪录功能（最多n条）。<br>使用容量为n的队列存储历史纪录：</p>
<ol>
<li>使用标准库collections中的deque，它是一个双端循环队列。（相关：Python语言及其应用-5.5.4 双端队列：栈+队列 103页）；</li>
<li>程序退出前，可以使用pickle将队列对象存入文件，再次运行程序时将其导入。</li>
</ol>
<h4 id="Details-4"><a href="#Details-4" class="headerlink" title="Details"></a>Details</h4><p><code></code></p>
<h1 id="from-random-import-randint"><a href="#from-random-import-randint" class="headerlink" title="from random import randint"></a>from random import randint</h1><p>#</p>
<h1 id="N-randint-1-100-产生0-100之间的随机数"><a href="#N-randint-1-100-产生0-100之间的随机数" class="headerlink" title="N = randint(1, 100)  # 产生0-100之间的随机数"></a>N = randint(1, 100)  # 产生0-100之间的随机数</h1><p>#</p>
<h1 id="def-guess-k"><a href="#def-guess-k" class="headerlink" title="def guess(k):"></a>def guess(k):</h1><h1 id="if-k-N"><a href="#if-k-N" class="headerlink" title="if k == N:"></a>if k == N:</h1><h1 id="print-‘right’"><a href="#print-‘right’" class="headerlink" title="print ‘right’"></a>print ‘right’</h1><h1 id="if-k-lt-N"><a href="#if-k-lt-N" class="headerlink" title="if k &lt; N:"></a>if k &lt; N:</h1><h1 id="print-“-s-is-less-than-N”-k"><a href="#print-“-s-is-less-than-N”-k" class="headerlink" title="print “%s is less-than N” % k"></a>print “%s is less-than N” % k</h1><h1 id="else"><a href="#else" class="headerlink" title="else:"></a>else:</h1><h1 id="print-“-s-is-greater-than-N”-k"><a href="#print-“-s-is-greater-than-N”-k" class="headerlink" title="print “%s is greater-than N” % k"></a>print “%s is greater-than N” % k</h1><h1 id="return-False"><a href="#return-False" class="headerlink" title="return False"></a>return False</h1><p>#</p>
<h1 id="while-True"><a href="#while-True" class="headerlink" title="while True:"></a>while True:</h1><h1 id="line-raw-input-“please-inout-a-number-“-接收用户输入"><a href="#line-raw-input-“please-inout-a-number-“-接收用户输入" class="headerlink" title="line = raw_input(“please inout a number: “)  # 接收用户输入"></a>line = raw_input(“please inout a number: “)  # 接收用户输入</h1><h1 id="if-line-isdigit"><a href="#if-line-isdigit" class="headerlink" title="if line.isdigit():"></a>if line.isdigit():</h1><h1 id="k-int-line"><a href="#k-int-line" class="headerlink" title="k = int(line)"></a>k = int(line)</h1><h1 id="if-guess-k"><a href="#if-guess-k" class="headerlink" title="if guess(k):"></a>if guess(k):</h1><h1 id="break"><a href="#break" class="headerlink" title="break"></a>break</h1><h1 id="使用容量为n的队列存放历史记录-先入先出"><a href="#使用容量为n的队列存放历史记录-先入先出" class="headerlink" title="使用容量为n的队列存放历史记录  先入先出"></a>使用容量为n的队列存放历史记录  先入先出</h1><h1 id="使用collections-deque-它是一个双端循环队列"><a href="#使用collections-deque-它是一个双端循环队列" class="headerlink" title="使用collections.deque,它是一个双端循环队列"></a>使用collections.deque,它是一个双端循环队列</h1><p>from collections import deque</p>
<h1 id="deque-函数创建队列"><a href="#deque-函数创建队列" class="headerlink" title="deque()函数创建队列"></a>deque()函数创建队列</h1><h1 id="如果创建带有容量的队列，需要传入第2个参数，容量值"><a href="#如果创建带有容量的队列，需要传入第2个参数，容量值" class="headerlink" title="如果创建带有容量的队列，需要传入第2个参数，容量值"></a>如果创建带有容量的队列，需要传入第2个参数，容量值</h1><p>q = deque([], 5)  # 队列初始值设为空<br>q.append(1)  # 进行右边的入队操作<br>print q</p>
<h1 id="deque-1-maxlen-5"><a href="#deque-1-maxlen-5" class="headerlink" title="deque([1], maxlen=5)"></a>deque([1], maxlen=5)</h1><p>q.append(2)<br>q.append(3)<br>q.append(4)<br>q.append(5)<br>print q</p>
<h1 id="deque-1-2-3-4-5-maxlen-5"><a href="#deque-1-2-3-4-5-maxlen-5" class="headerlink" title="deque([1, 2, 3, 4, 5], maxlen=5)"></a>deque([1, 2, 3, 4, 5], maxlen=5)</h1><p>q.append(6)<br>print q</p>
<h1 id="deque-2-3-4-5-6-maxlen-5"><a href="#deque-2-3-4-5-6-maxlen-5" class="headerlink" title="deque([2, 3, 4, 5, 6], maxlen=5)"></a>deque([2, 3, 4, 5, 6], maxlen=5)</h1><p>q.append(100)<br>print q</p>
<h1 id="deque-3-4-5-6-100-maxlen-5"><a href="#deque-3-4-5-6-100-maxlen-5" class="headerlink" title="deque([3, 4, 5, 6, 100], maxlen=5)"></a>deque([3, 4, 5, 6, 100], maxlen=5)</h1><p>from random import randint<br>from collections import deque</p>
<p>N = randint(1, 100)  # 产生0-100之间的随机数<br>history = deque([], 5)   # 初始化队列</p>
<p>def guess(k):<br>    if k == N:<br>        print ‘right’<br>    if k &lt; N:<br>        print “%s is less-than N” % k<br>    else:<br>        print “%s is greater-than N” % k<br>    return False</p>
<p>while True:<br>    line = raw_input(“please inout a number: “)  # 接收用户输入<br>    if line.isdigit():<br>        k = int(line)<br>        history.append(k)<br>        if guess(k):<br>            break<br>    elif line == ‘history’ or line == ‘h?’:<br>        print history<br>        print list(history)</p>
<h1 id="please-inout-a-number-50"><a href="#please-inout-a-number-50" class="headerlink" title="please inout a number: 50"></a>please inout a number: 50</h1><h1 id="50-is-less-than-N"><a href="#50-is-less-than-N" class="headerlink" title="50 is less-than N"></a>50 is less-than N</h1><h1 id="please-inout-a-number-80"><a href="#please-inout-a-number-80" class="headerlink" title="please inout a number: 80"></a>please inout a number: 80</h1><h1 id="80-is-greater-than-N"><a href="#80-is-greater-than-N" class="headerlink" title="80 is greater-than N"></a>80 is greater-than N</h1><h1 id="please-inout-a-number-70"><a href="#please-inout-a-number-70" class="headerlink" title="please inout a number: 70"></a>please inout a number: 70</h1><h1 id="70-is-greater-than-N"><a href="#70-is-greater-than-N" class="headerlink" title="70 is greater-than N"></a>70 is greater-than N</h1><h1 id="please-inout-a-number-h"><a href="#please-inout-a-number-h" class="headerlink" title="please inout a number: h?"></a>please inout a number: h?</h1><h1 id="deque-50-80-70-maxlen-5"><a href="#deque-50-80-70-maxlen-5" class="headerlink" title="deque([50, 80, 70], maxlen=5)"></a>deque([50, 80, 70], maxlen=5)</h1><h1 id="50-80-70"><a href="#50-80-70" class="headerlink" title="[50, 80, 70]"></a>[50, 80, 70]</h1><h1 id="please-inout-a-number-60"><a href="#please-inout-a-number-60" class="headerlink" title="please inout a number: 60"></a>please inout a number: 60</h1><h1 id="60-is-greater-than-N"><a href="#60-is-greater-than-N" class="headerlink" title="60 is greater-than N"></a>60 is greater-than N</h1><h1 id="please-inout-a-number-65"><a href="#please-inout-a-number-65" class="headerlink" title="please inout a number: 65"></a>please inout a number: 65</h1><h1 id="65-is-greater-than-N"><a href="#65-is-greater-than-N" class="headerlink" title="65 is greater-than N"></a>65 is greater-than N</h1><h1 id="please-inout-a-number-h-1"><a href="#please-inout-a-number-h-1" class="headerlink" title="please inout a number: h?"></a>please inout a number: h?</h1><h1 id="deque-50-80-70-60-65-maxlen-5"><a href="#deque-50-80-70-60-65-maxlen-5" class="headerlink" title="deque([50, 80, 70, 60, 65], maxlen=5)"></a>deque([50, 80, 70, 60, 65], maxlen=5)</h1><h1 id="50-80-70-60-65"><a href="#50-80-70-60-65" class="headerlink" title="[50, 80, 70, 60, 65]"></a>[50, 80, 70, 60, 65]</h1><h1 id="please-inout-a-number-64"><a href="#please-inout-a-number-64" class="headerlink" title="please inout a number: 64"></a>please inout a number: 64</h1><h1 id="64-is-greater-than-N"><a href="#64-is-greater-than-N" class="headerlink" title="64 is greater-than N"></a>64 is greater-than N</h1><h1 id="please-inout-a-number-63"><a href="#please-inout-a-number-63" class="headerlink" title="please inout a number: 63"></a>please inout a number: 63</h1><h1 id="63-is-greater-than-N"><a href="#63-is-greater-than-N" class="headerlink" title="63 is greater-than N"></a>63 is greater-than N</h1><h1 id="please-inout-a-number-h-2"><a href="#please-inout-a-number-h-2" class="headerlink" title="please inout a number: h?"></a>please inout a number: h?</h1><h1 id="deque-70-60-65-64-63-maxlen-5"><a href="#deque-70-60-65-64-63-maxlen-5" class="headerlink" title="deque([70, 60, 65, 64, 63], maxlen=5)"></a>deque([70, 60, 65, 64, 63], maxlen=5)</h1><h1 id="70-60-65-64-63"><a href="#70-60-65-64-63" class="headerlink" title="[70, 60, 65, 64, 63]"></a>[70, 60, 65, 64, 63]</h1><h1 id="please-inout-a-number-62"><a href="#please-inout-a-number-62" class="headerlink" title="please inout a number: 62"></a>please inout a number: 62</h1><h1 id="62-is-greater-than-N"><a href="#62-is-greater-than-N" class="headerlink" title="62 is greater-than N"></a>62 is greater-than N</h1><h1 id="please-inout-a-number-61"><a href="#please-inout-a-number-61" class="headerlink" title="please inout a number: 61"></a>please inout a number: 61</h1><h1 id="61-is-greater-than-N"><a href="#61-is-greater-than-N" class="headerlink" title="61 is greater-than N"></a>61 is greater-than N</h1><h1 id="please-inout-a-number-55"><a href="#please-inout-a-number-55" class="headerlink" title="please inout a number: 55"></a>please inout a number: 55</h1><h1 id="right"><a href="#right" class="headerlink" title="right"></a>right</h1><h1 id="55-is-greater-than-N"><a href="#55-is-greater-than-N" class="headerlink" title="55 is greater-than N"></a>55 is greater-than N</h1><h1 id="please-inout-a-number-50-1"><a href="#please-inout-a-number-50-1" class="headerlink" title="please inout a number: 50"></a>please inout a number: 50</h1><h1 id="50-is-less-than-N-1"><a href="#50-is-less-than-N-1" class="headerlink" title="50 is less-than N"></a>50 is less-than N</h1><h1 id="please-inout-a-number-54"><a href="#please-inout-a-number-54" class="headerlink" title="please inout a number: 54"></a>please inout a number: 54</h1><h1 id="54-is-less-than-N"><a href="#54-is-less-than-N" class="headerlink" title="54 is less-than N"></a>54 is less-than N</h1><h1 id="please-inout-a-number-h-3"><a href="#please-inout-a-number-h-3" class="headerlink" title="please inout a number: h?"></a>please inout a number: h?</h1><h1 id="deque-62-61-55-50-54-maxlen-5"><a href="#deque-62-61-55-50-54-maxlen-5" class="headerlink" title="deque([62, 61, 55, 50, 54], maxlen=5)"></a>deque([62, 61, 55, 50, 54], maxlen=5)</h1><h1 id="62-61-55-50-54"><a href="#62-61-55-50-54" class="headerlink" title="[62, 61, 55, 50, 54]"></a>[62, 61, 55, 50, 54]</h1><h1 id="please-inout-a-number-53"><a href="#please-inout-a-number-53" class="headerlink" title="please inout a number: 53"></a>please inout a number: 53</h1><h1 id="53-is-less-than-N"><a href="#53-is-less-than-N" class="headerlink" title="53 is less-than N"></a>53 is less-than N</h1><h1 id="please-inout-a-number-52"><a href="#please-inout-a-number-52" class="headerlink" title="please inout a number: 52"></a>please inout a number: 52</h1><h1 id="52-is-less-than-N"><a href="#52-is-less-than-N" class="headerlink" title="52 is less-than N"></a>52 is less-than N</h1><h1 id="please-inout-a-number-51"><a href="#please-inout-a-number-51" class="headerlink" title="please inout a number: 51"></a>please inout a number: 51</h1><h1 id="51-is-less-than-N"><a href="#51-is-less-than-N" class="headerlink" title="51 is less-than N"></a>51 is less-than N</h1><h1 id="please-inout-a-number-h-4"><a href="#please-inout-a-number-h-4" class="headerlink" title="please inout a number: h?"></a>please inout a number: h?</h1><h1 id="deque-50-54-53-52-51-maxlen-5"><a href="#deque-50-54-53-52-51-maxlen-5" class="headerlink" title="deque([50, 54, 53, 52, 51], maxlen=5)"></a>deque([50, 54, 53, 52, 51], maxlen=5)</h1><h1 id="50-54-53-52-51"><a href="#50-54-53-52-51" class="headerlink" title="[50, 54, 53, 52, 51]"></a>[50, 54, 53, 52, 51]</h1><h1 id="please-inout-a-number-55-1"><a href="#please-inout-a-number-55-1" class="headerlink" title="please inout a number: 55"></a>please inout a number: 55</h1><h1 id="right-1"><a href="#right-1" class="headerlink" title="right"></a>right</h1><h1 id="55-is-greater-than-N-1"><a href="#55-is-greater-than-N-1" class="headerlink" title="55 is greater-than N"></a>55 is greater-than N</h1><h1 id="please-inout-a-number-50-2"><a href="#please-inout-a-number-50-2" class="headerlink" title="please inout a number: 50"></a>please inout a number: 50</h1><h1 id="50-is-less-than-N-2"><a href="#50-is-less-than-N-2" class="headerlink" title="50 is less-than N"></a>50 is less-than N</h1><h1 id="please-inout-a-number-51-1"><a href="#please-inout-a-number-51-1" class="headerlink" title="please inout a number: 51"></a>please inout a number: 51</h1><h1 id="51-is-less-than-N-1"><a href="#51-is-less-than-N-1" class="headerlink" title="51 is less-than N"></a>51 is less-than N</h1><h1 id="please-inout-a-number-52-1"><a href="#please-inout-a-number-52-1" class="headerlink" title="please inout a number: 52"></a>please inout a number: 52</h1><h1 id="52-is-less-than-N-1"><a href="#52-is-less-than-N-1" class="headerlink" title="52 is less-than N"></a>52 is less-than N</h1><h1 id="please-inout-a-number-53-1"><a href="#please-inout-a-number-53-1" class="headerlink" title="please inout a number: 53"></a>please inout a number: 53</h1><h1 id="53-is-less-than-N-1"><a href="#53-is-less-than-N-1" class="headerlink" title="53 is less-than N"></a>53 is less-than N</h1><h1 id="please-inout-a-number-54-1"><a href="#please-inout-a-number-54-1" class="headerlink" title="please inout a number: 54"></a>please inout a number: 54</h1><h1 id="54-is-less-than-N-1"><a href="#54-is-less-than-N-1" class="headerlink" title="54 is less-than N"></a>54 is less-than N</h1><h1 id="please-inout-a-number-55-2"><a href="#please-inout-a-number-55-2" class="headerlink" title="please inout a number: 55"></a>please inout a number: 55</h1><h1 id="right-2"><a href="#right-2" class="headerlink" title="right"></a>right</h1><h1 id="55-is-greater-than-N-2"><a href="#55-is-greater-than-N-2" class="headerlink" title="55 is greater-than N"></a>55 is greater-than N</h1><h1 id="目前这个队列queue是在内存当中，程序退出就消失掉了。需要把历史记录这个对象存储到文件中"><a href="#目前这个队列queue是在内存当中，程序退出就消失掉了。需要把历史记录这个对象存储到文件中" class="headerlink" title="目前这个队列queue是在内存当中，程序退出就消失掉了。需要把历史记录这个对象存储到文件中"></a>目前这个队列queue是在内存当中，程序退出就消失掉了。需要把历史记录这个对象存储到文件中</h1><h1 id="也就是把history对象存储到文件中，下次运行程序再把它load进来"><a href="#也就是把history对象存储到文件中，下次运行程序再把它load进来" class="headerlink" title="也就是把history对象存储到文件中，下次运行程序再把它load进来"></a>也就是把history对象存储到文件中，下次运行程序再把它load进来</h1><p>import pickle</p>
<h1 id="pickle可以把一个python对象存储到文件当中，也可以从文件当中load一个python对象"><a href="#pickle可以把一个python对象存储到文件当中，也可以从文件当中load一个python对象" class="headerlink" title="pickle可以把一个python对象存储到文件当中，也可以从文件当中load一个python对象"></a>pickle可以把一个python对象存储到文件当中，也可以从文件当中load一个python对象</h1><h1 id="存储文件"><a href="#存储文件" class="headerlink" title="存储文件"></a>存储文件</h1><p>pickle.dump(q, open(‘history’, ‘w’))  # dump方法接收两个参数，第一个参数是存储的python对象，第二个参数是要指定一个文件</p>
<p>q2 = pickle.load(open(‘history’))   #  从文件中提取python对象</p>
<h1 id="q2和q是一致的"><a href="#q2和q是一致的" class="headerlink" title="q2和q是一致的"></a>q2和q是一致的</h1><p></p>
<h2 id="二、迭代器与生成器"><a href="#二、迭代器与生成器" class="headerlink" title="二、迭代器与生成器"></a>二、迭代器与生成器</h2><h3 id="2-1-实现可迭代对象和迭代器对象"><a href="#2-1-实现可迭代对象和迭代器对象" class="headerlink" title="2.1 实现可迭代对象和迭代器对象"></a>2.1 实现可迭代对象和迭代器对象</h3><ol>
<li>实现一个迭代器对象WeatherIterator, next方法每次返回一个城市气温；</li>
<li><p>实现一个可迭代对象WeatherIterable, <strong>iter</strong>方法返回一个迭代器对象。</p>
<h4 id="Details-5"><a href="#Details-5" class="headerlink" title="Details"></a>Details</h4><p><code></code></p>
<h1 id="这两种对象都是python中的可迭代对象"><a href="#这两种对象都是python中的可迭代对象" class="headerlink" title="这两种对象都是python中的可迭代对象"></a>这两种对象都是python中的可迭代对象</h1><p>l = [1, 2, 3, 4]<br>s = ‘abcde’</p>
</li>
</ol>
<h1 id="迭代列表"><a href="#迭代列表" class="headerlink" title="迭代列表"></a>迭代列表</h1><p>for x in l:<br>    print x</p>
<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><h1 id="迭代字符串"><a href="#迭代字符串" class="headerlink" title="迭代字符串"></a>迭代字符串</h1><p>for x in s:<br>    print x</p>
<h1 id="a"><a href="#a" class="headerlink" title="a"></a>a</h1><h1 id="b"><a href="#b" class="headerlink" title="b"></a>b</h1><h1 id="c"><a href="#c" class="headerlink" title="c"></a>c</h1><h1 id="d"><a href="#d" class="headerlink" title="d"></a>d</h1><h1 id="e"><a href="#e" class="headerlink" title="e"></a>e</h1><h1 id="首先要确保in-后面是个可迭代对象"><a href="#首先要确保in-后面是个可迭代对象" class="headerlink" title="首先要确保in 后面是个可迭代对象"></a>首先要确保in 后面是个可迭代对象</h1><h1 id="如果它是一个可迭代对象的话，它能由python的内置函数iter得到一个迭代器对象"><a href="#如果它是一个可迭代对象的话，它能由python的内置函数iter得到一个迭代器对象" class="headerlink" title="如果它是一个可迭代对象的话，它能由python的内置函数iter得到一个迭代器对象"></a>如果它是一个可迭代对象的话，它能由python的内置函数iter得到一个迭代器对象</h1><h1 id="可迭代和迭代器，这两个概念不要混淆"><a href="#可迭代和迭代器，这两个概念不要混淆" class="headerlink" title="可迭代和迭代器，这两个概念不要混淆"></a>可迭代和迭代器，这两个概念不要混淆</h1><h1 id="iter-l-由可迭代对象，得到迭代器"><a href="#iter-l-由可迭代对象，得到迭代器" class="headerlink" title="iter(l) 由可迭代对象，得到迭代器"></a>iter(l) 由可迭代对象，得到迭代器</h1><p>print iter(l)  # 得到列表的迭代器对象</p>
<h1 id="-1"><a href="#-1" class="headerlink" title=""></a><listiterator object="" at="" 0x0000000002d624e0=""></listiterator></h1><p>print iter(s)</p>
<h1 id="-2"><a href="#-2" class="headerlink" title=""></a><iterator object="" at="" 0x00000000038b24e0=""></iterator></h1><h1 id="print-iter-5"><a href="#print-iter-5" class="headerlink" title="print iter(5)"></a>print iter(5)</h1><h1 id="Traceback-most-recent-call-last"><a href="#Traceback-most-recent-call-last" class="headerlink" title="Traceback (most recent call last):"></a>Traceback (most recent call last):</h1><h1 id="File-“C-Users-Administrator-PycharmProjects-HighEndPython-3-1-py”-line-34-in"><a href="#File-“C-Users-Administrator-PycharmProjects-HighEndPython-3-1-py”-line-34-in" class="headerlink" title="File “C:/Users/Administrator/PycharmProjects/HighEndPython/3_1.py”, line 34, in "></a>File “C:/Users/Administrator/PycharmProjects/HighEndPython/3_1.py”, line 34, in <module></module></h1><h1 id="print-iter-5-1"><a href="#print-iter-5-1" class="headerlink" title="print iter(5)"></a>print iter(5)</h1><h1 id="TypeError-‘int’-object-is-not-iterable"><a href="#TypeError-‘int’-object-is-not-iterable" class="headerlink" title="TypeError: ‘int’ object is not iterable"></a>TypeError: ‘int’ object is not iterable</h1><h1 id="数字不是一个可迭代对象"><a href="#数字不是一个可迭代对象" class="headerlink" title="数字不是一个可迭代对象"></a>数字不是一个可迭代对象</h1><h1 id="为什么列表和字符串是可迭代对象？"><a href="#为什么列表和字符串是可迭代对象？" class="headerlink" title="为什么列表和字符串是可迭代对象？"></a>为什么列表和字符串是可迭代对象？</h1><h1 id="他们满足了某种特殊接口"><a href="#他们满足了某种特殊接口" class="headerlink" title="他们满足了某种特殊接口"></a>他们满足了某种特殊接口</h1><p>print l.<strong>iter</strong>()</p>
<h1 id="-3"><a href="#-3" class="headerlink" title=""></a><listiterator object="" at="" 0x00000000023924e0=""></listiterator></h1><p>print ‘—‘</p>
<h1 id="列表下有一个叫iter的方法，它就是迭代协议的接口"><a href="#列表下有一个叫iter的方法，它就是迭代协议的接口" class="headerlink" title="列表下有一个叫iter的方法，它就是迭代协议的接口"></a>列表下有一个叫<strong>iter</strong>的方法，它就是迭代协议的接口</h1><h1 id="调用iter-l-实际内部执行了-l-iter-也就调用了这个对象的iter-方法"><a href="#调用iter-l-实际内部执行了-l-iter-也就调用了这个对象的iter-方法" class="headerlink" title="调用iter(l),实际内部执行了 l.iter(),也就调用了这个对象的iter()方法"></a>调用iter(l),实际内部执行了 l.<strong>iter</strong>(),也就调用了这个对象的<strong>iter</strong>()方法</h1><h1 id="字符串中没有找到iter-方法，但是它有个getitem-方法"><a href="#字符串中没有找到iter-方法，但是它有个getitem-方法" class="headerlink" title="字符串中没有找到iter()方法，但是它有个getitem()方法"></a>字符串中没有找到<strong>iter</strong>()方法，但是它有个<strong>getitem</strong>()方法</h1><h1 id="内置函数iter-首先会去找标准的迭代接口iter-如果找不到就找getitem-方法"><a href="#内置函数iter-首先会去找标准的迭代接口iter-如果找不到就找getitem-方法" class="headerlink" title="内置函数iter()首先会去找标准的迭代接口iter(),如果找不到就找getitem()方法"></a>内置函数iter()首先会去找标准的迭代接口<strong>iter</strong>(),如果找不到就找<strong>getitem</strong>()方法</h1><h1 id="In-the-first-form-the-argument-must"><a href="#In-the-first-form-the-argument-must" class="headerlink" title="# In the first form, the argument must"></a># In the first form, the argument must</h1><h1 id="supply-its-own-iterator-or-be-a-sequence-要么支持自身迭代器，要么是一个序列，getitem-就是一个序列的接口"><a href="#supply-its-own-iterator-or-be-a-sequence-要么支持自身迭代器，要么是一个序列，getitem-就是一个序列的接口" class="headerlink" title="supply its own iterator, or be a sequence.要么支持自身迭代器，要么是一个序列，getitem()就是一个序列的接口"></a>supply its own iterator, or be a sequence.要么支持自身迭代器，要么是一个序列，<strong>getitem</strong>()就是一个序列的接口</h1><h1 id="迭代器对象满足什么接口？"><a href="#迭代器对象满足什么接口？" class="headerlink" title="迭代器对象满足什么接口？"></a>迭代器对象满足什么接口？</h1><p>t = iter(l)<br>print t.next()</p>
<h1 id="它只有next-接口"><a href="#它只有next-接口" class="headerlink" title="它只有next()接口"></a>它只有next()接口</h1><p>print t.next()<br>print t.next()<br>print t.next()<br>print t.next()<br>print t.next()</p>
<h1 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h1><h1 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h1><h1 id="3-1"><a href="#3-1" class="headerlink" title="3"></a>3</h1><h1 id="4-1"><a href="#4-1" class="headerlink" title="4"></a>4</h1><h1 id="整个列表迭代完毕会抛出异常"><a href="#整个列表迭代完毕会抛出异常" class="headerlink" title="整个列表迭代完毕会抛出异常"></a>整个列表迭代完毕会抛出异常</h1><h1 id="for循环工作的机制"><a href="#for循环工作的机制" class="headerlink" title="for循环工作的机制"></a>for循环工作的机制</h1><h1 id="实际上先由iter-l-得到一个迭代器，接下来不停的调用next"><a href="#实际上先由iter-l-得到一个迭代器，接下来不停的调用next" class="headerlink" title="实际上先由iter(l)得到一个迭代器，接下来不停的调用next()"></a>实际上先由iter(l)得到一个迭代器，接下来不停的调用next()</h1><h1 id="直到最终捕获到一个StopIteration的异常，整个for循环就跳出来了"><a href="#直到最终捕获到一个StopIteration的异常，整个for循环就跳出来了" class="headerlink" title="直到最终捕获到一个StopIteration的异常，整个for循环就跳出来了"></a>直到最终捕获到一个StopIteration的异常，整个for循环就跳出来了</h1><p> </p>
<h3 id="2-2-生成器函数实现可迭代对象"><a href="#2-2-生成器函数实现可迭代对象" class="headerlink" title="2.2 生成器函数实现可迭代对象"></a>2.2 生成器函数实现可迭代对象</h3><p>将该类的<strong>iter</strong>方法实现成生成器函数，每次yield返回一个素数。</p>
<h4 id="Details-6"><a href="#Details-6" class="headerlink" title="Details"></a>Details</h4><p><code></code></p>
<h1 id="首先实现一个迭代器对象，它有一个next-方法，当迭代完毕应该抛出一个停止迭代异常"><a href="#首先实现一个迭代器对象，它有一个next-方法，当迭代完毕应该抛出一个停止迭代异常" class="headerlink" title="首先实现一个迭代器对象，它有一个next()方法，当迭代完毕应该抛出一个停止迭代异常"></a>首先实现一个迭代器对象，它有一个next()方法，当迭代完毕应该抛出一个停止迭代异常</h1><h1 id="实现一个可迭代对象，它有一个iter-方法，它能返回上面这样一个迭代器对象"><a href="#实现一个可迭代对象，它有一个iter-方法，它能返回上面这样一个迭代器对象" class="headerlink" title="实现一个可迭代对象，它有一个iter()方法，它能返回上面这样一个迭代器对象"></a>实现一个可迭代对象，它有一个<strong>iter</strong>()方法，它能返回上面这样一个迭代器对象</h1><p>import requests</p>
<p>def getweather(city):<br>    r = requests.get(u’<a href="http://wthrcdn.etouch.cn/weather_mini?city=" target="_blank" rel="external">http://wthrcdn.etouch.cn/weather_mini?city=</a>‘ + city)<br>    data = r.json()[‘data’][‘forecast’][0]<br>    return ‘%s: %s , %s ‘ % (city, data[‘low’], data[‘high’])</p>
<p>#[u’北京’,u’上海’,u’广州’,u’长春’<br>print getweather(u’北京’)<br>print getweather(u’长春’)<br>print getweather(u’深圳’)</p>
<h1 id="北京-低温-6℃-高温-6℃"><a href="#北京-低温-6℃-高温-6℃" class="headerlink" title="北京: 低温 -6℃ , 高温 6℃"></a>北京: 低温 -6℃ , 高温 6℃</h1><h1 id="长春-低温-17℃-高温-7℃"><a href="#长春-低温-17℃-高温-7℃" class="headerlink" title="长春: 低温 -17℃ , 高温 -7℃"></a>长春: 低温 -17℃ , 高温 -7℃</h1><h1 id="深圳-低温-13℃-高温-23℃"><a href="#深圳-低温-13℃-高温-23℃" class="headerlink" title="深圳: 低温 13℃ , 高温 23℃"></a>深圳: 低温 13℃ , 高温 23℃</h1><h1 id="可迭代对象和迭代器对象，python的标准库当中，对它们的接口已经有了定义"><a href="#可迭代对象和迭代器对象，python的标准库当中，对它们的接口已经有了定义" class="headerlink" title="可迭代对象和迭代器对象，python的标准库当中，对它们的接口已经有了定义"></a>可迭代对象和迭代器对象，python的标准库当中，对它们的接口已经有了定义</h1><p>from collections import Iterable, Iterator<br>print Iterator.<strong>abstractmethods</strong></p>
<h1 id="frozenset-‘next’"><a href="#frozenset-‘next’" class="headerlink" title="frozenset([‘next’])"></a>frozenset([‘next’])</h1><h1 id="迭代器的抽象接口是next"><a href="#迭代器的抽象接口是next" class="headerlink" title="迭代器的抽象接口是next"></a>迭代器的抽象接口是next</h1><p>print Iterable.<strong>abstractmethods</strong></p>
<h1 id="frozenset-‘iter‘"><a href="#frozenset-‘iter‘" class="headerlink" title="frozenset([‘iter‘])"></a>frozenset([‘<strong>iter</strong>‘])</h1><h1 id="可迭代对象的抽象接口是iter"><a href="#可迭代对象的抽象接口是iter" class="headerlink" title="可迭代对象的抽象接口是iter"></a>可迭代对象的抽象接口是<strong>iter</strong></h1><h1 id="直接继承这两个抽象类"><a href="#直接继承这两个抽象类" class="headerlink" title="直接继承这两个抽象类"></a>直接继承这两个抽象类</h1><h1 id="import-requests"><a href="#import-requests" class="headerlink" title="import requests"></a>import requests</h1><p>#</p>
<h1 id="def-getweather-city"><a href="#def-getweather-city" class="headerlink" title="def getweather(city):"></a>def getweather(city):</h1><h1 id="r-requests-get-u’http-wthrcdn-etouch-cn-weather-mini-city-‘-city"><a href="#r-requests-get-u’http-wthrcdn-etouch-cn-weather-mini-city-‘-city" class="headerlink" title="r = requests.get(u’http://wthrcdn.etouch.cn/weather_mini?city=‘ + city)"></a>r = requests.get(u’<a href="http://wthrcdn.etouch.cn/weather_mini?city=" target="_blank" rel="external">http://wthrcdn.etouch.cn/weather_mini?city=</a>‘ + city)</h1><h1 id="data-r-json-‘data’-‘forecast’-0"><a href="#data-r-json-‘data’-‘forecast’-0" class="headerlink" title="data = r.json()[‘data’][‘forecast’][0]"></a>data = r.json()[‘data’][‘forecast’][0]</h1><h1 id="return-‘-s-s-s-‘-city-data-‘low’-data-‘high’"><a href="#return-‘-s-s-s-‘-city-data-‘low’-data-‘high’" class="headerlink" title="return ‘%s: %s , %s ‘ % (city, data[‘low’], data[‘high’])"></a>return ‘%s: %s , %s ‘ % (city, data[‘low’], data[‘high’])</h1><p>#[u’北京’,u’上海’,u’广州’,u’长春’]</p>
<h1 id="print-getweather-u’北京’"><a href="#print-getweather-u’北京’" class="headerlink" title="print getweather(u’北京’)"></a>print getweather(u’北京’)</h1><h1 id="print-getweather-u’长春’"><a href="#print-getweather-u’长春’" class="headerlink" title="print getweather(u’长春’)"></a>print getweather(u’长春’)</h1><h1 id="print-getweather-u’深圳’"><a href="#print-getweather-u’深圳’" class="headerlink" title="print getweather(u’深圳’)"></a>print getweather(u’深圳’)</h1><p>from collections import Iterable, Iterator</p>
<h1 id="首先实现Iterator"><a href="#首先实现Iterator" class="headerlink" title="首先实现Iterator"></a>首先实现Iterator</h1><p>class WeatherIterator(Iterator):<br>    def <strong>init</strong>(self, cities):  # 天气的迭代器应该有一个参数，描述这个迭代器都能返回哪些城市的基本信息<br>        self.cities = cities</p>
<pre><code>    # 还需要知道迭代位置,刻画迭代的位置
    self.index = 0

def getweather(self, city):
    r = requests.get(u&apos;http://wthrcdn.etouch.cn/weather_mini?city=&apos; + city)
    data = r.json()[&apos;data&apos;][&apos;forecast&apos;][0]
    return &apos;%s: %s , %s &apos; % (city, data[&apos;low&apos;], data[&apos;high&apos;])

def next(self):
    if self.index == len(self.cities):
        raise StopIteration
    city = self.cities[self.index]
    self.index += 1
    return self.getweather(city)
# 气温迭代器完成
</code></pre><p>class WeatherIterable(Iterable):<br>    def <strong>init</strong>(self, cities):<br>        self.cities = cities  # 为了后面传给Iterator这个构造器</p>
<pre><code>def __iter__(self):
    return WeatherIterator(self.cities) # 实例
</code></pre><p>for x in WeatherIterable([u’北京’,u’上海’,u’广州’,u’长春’]):<br>    print x</p>
<h1 id="北京-低温-6℃-高温-6℃-1"><a href="#北京-低温-6℃-高温-6℃-1" class="headerlink" title="北京: 低温 -6℃ , 高温 6℃"></a>北京: 低温 -6℃ , 高温 6℃</h1><h1 id="上海-低温-3℃-高温-12℃"><a href="#上海-低温-3℃-高温-12℃" class="headerlink" title="上海: 低温 3℃ , 高温 12℃"></a>上海: 低温 3℃ , 高温 12℃</h1><h1 id="广州-低温-11℃-高温-22℃"><a href="#广州-低温-11℃-高温-22℃" class="headerlink" title="广州: 低温 11℃ , 高温 22℃"></a>广州: 低温 11℃ , 高温 22℃</h1><h1 id="长春-低温-17℃-高温-7℃-1"><a href="#长春-低温-17℃-高温-7℃-1" class="headerlink" title="长春: 低温 -17℃ , 高温 -7℃"></a>长春: 低温 -17℃ , 高温 -7℃</h1><h1 id="在某些惰性场合使用它们的优势"><a href="#在某些惰性场合使用它们的优势" class="headerlink" title="在某些惰性场合使用它们的优势"></a>在某些惰性场合使用它们的优势</h1><p></p>
<h3 id="2-3-反向迭代"><a href="#2-3-反向迭代" class="headerlink" title="2.3 反向迭代"></a>2.3 反向迭代</h3><p>如何进行反向迭代以及如何实现反向迭代？<br>实现反向迭代协议的<strong>reversed</strong>方法，它返回一个反向迭代器。</p>
<h3 id="2-4-迭代器做切片操作"><a href="#2-4-迭代器做切片操作" class="headerlink" title="2.4 迭代器做切片操作"></a>2.4 迭代器做切片操作</h3><p>使用标准库中的itertools.islice, 它能返回一个迭代对象切片的生成器。</p>
<h3 id="2-5-迭代多个可迭代对象"><a href="#2-5-迭代多个可迭代对象" class="headerlink" title="2.5 迭代多个可迭代对象"></a>2.5 迭代多个可迭代对象</h3><p>如何在一个for语句中迭代多个可迭代对象：<br>并行：使用内置函数zip, 它能将多个可迭代对象合并，每次迭代返回一个元组。<br>串行：使用标准库中的itertools.chain, 它能将多个可迭代对象连接。</p>
<h2 id="三、字符串处理"><a href="#三、字符串处理" class="headerlink" title="三、字符串处理"></a>三、字符串处理</h2><h3 id="3-1-拆分含有多种分割符的字符串"><a href="#3-1-拆分含有多种分割符的字符串" class="headerlink" title="3.1 拆分含有多种分割符的字符串"></a>3.1 拆分含有多种分割符的字符串</h3><h4 id="3-1-1-str-split-方法"><a href="#3-1-1-str-split-方法" class="headerlink" title="3.1.1 str.split()方法"></a>3.1.1 str.split()方法</h4><p>连续使用str.split()方法，每次处理一种分割符号。</p>
<h4 id="3-1-2-正则表达式re-split-方法"><a href="#3-1-2-正则表达式re-split-方法" class="headerlink" title="3.1.2 正则表达式re.split()方法"></a>3.1.2 正则表达式re.split()方法</h4><p>使用正则表达式的re.split()方法，一次性拆分字符串。</p>
<h3 id="3-2-判断字符串a是否以字符串b开头或结尾"><a href="#3-2-判断字符串a是否以字符串b开头或结尾" class="headerlink" title="3.2 判断字符串a是否以字符串b开头或结尾"></a>3.2 判断字符串a是否以字符串b开头或结尾</h3><p>使用字符串的str.startswith()和str.endswith()方法。注意：多个匹配时参数使用元组。</p>
<h3 id="3-3-调整字符串中文本的格式"><a href="#3-3-调整字符串中文本的格式" class="headerlink" title="3.3 调整字符串中文本的格式"></a>3.3 调整字符串中文本的格式</h3><p>使用正则表达式re.sub()方法做字符串替换，利用正则表达式的捕获组，捕获每个部分内容，在替换字符串中调整各个捕获组的顺序。</p>
<h3 id="3-4-字符串拼接"><a href="#3-4-字符串拼接" class="headerlink" title="3.4 字符串拼接"></a>3.4 字符串拼接</h3><p>多个小字符串拼接成大的字符串。</p>
<h4 id="3-4-1-迭代列表"><a href="#3-4-1-迭代列表" class="headerlink" title="3.4.1 迭代列表"></a>3.4.1 迭代列表</h4><p>迭代列表，连续使用’+’操作依次拼接每一个字符串。</p>
<h4 id="3-4-2-str-join-方法"><a href="#3-4-2-str-join-方法" class="headerlink" title="3.4.2 str.join()方法"></a>3.4.2 str.join()方法</h4><p>使用str.join()方法，更加快速的凭借列表中所有字符串。</p>
<h3 id="3-5-字符串左右居中对齐"><a href="#3-5-字符串左右居中对齐" class="headerlink" title="3.5 字符串左右居中对齐"></a>3.5 字符串左右居中对齐</h3><h4 id="3-5-1-str-ljust-str-rjust-str-center"><a href="#3-5-1-str-ljust-str-rjust-str-center" class="headerlink" title="3.5.1 str.ljust(), str.rjust, str.center()"></a>3.5.1 str.ljust(), str.rjust, str.center()</h4><p>使用字符串的str.ljust(), str.rjust, str.center()进行左、右，居中对齐。</p>
<h4 id="3-5-2-format"><a href="#3-5-2-format" class="headerlink" title="3.5.2 format()"></a>3.5.2 format()</h4><p>使用format()方法，传递类似’<20','>20’,’^20’参数完成同样任务。</20','></p>
<h3 id="3-6-去掉字符串中不需要的字符"><a href="#3-6-去掉字符串中不需要的字符" class="headerlink" title="3.6 去掉字符串中不需要的字符"></a>3.6 去掉字符串中不需要的字符</h3><h4 id="3-6-1-strip-lstrip-rstrip-方法"><a href="#3-6-1-strip-lstrip-rstrip-方法" class="headerlink" title="3.6.1 strip(),lstrip(),rstrip()方法"></a>3.6.1 strip(),lstrip(),rstrip()方法</h4><p>字符串strip(),lstrip(),rstrip()方法去掉字符串两端字符。</p>
<h4 id="3-6-2-切片-拼接"><a href="#3-6-2-切片-拼接" class="headerlink" title="3.6.2 切片 + 拼接"></a>3.6.2 切片 + 拼接</h4><p>删除单个固定位置的字符，可以使用切片 + 拼接的方式。</p>
<h4 id="3-6-3-replace-方法或re-sub"><a href="#3-6-3-replace-方法或re-sub" class="headerlink" title="3.6.3 replace()方法或re.sub()"></a>3.6.3 replace()方法或re.sub()</h4><p>字符串的replace()方法或正则表达式re.sub()删除任意位置字符。</p>
<h4 id="3-6-4-translate-方法"><a href="#3-6-4-translate-方法" class="headerlink" title="3.6.4 translate()方法"></a>3.6.4 translate()方法</h4><p>字符串translate()方法，可以同时删除多种不同字符。</p>
<h2 id="四、文件I-O"><a href="#四、文件I-O" class="headerlink" title="四、文件I/O"></a>四、文件I/O</h2><h3 id="4-1-读写文本文件"><a href="#4-1-读写文本文件" class="headerlink" title="4.1 读写文本文件"></a>4.1 读写文本文件</h3><h4 id="4-1-1-python2-x"><a href="#4-1-1-python2-x" class="headerlink" title="4.1.1 python2.x"></a>4.1.1 python2.x</h4><p>写入文件前对unicode编码，读入文件后对二进制字符串解码。</p>
<h4 id="4-1-2-python3-x"><a href="#4-1-2-python3-x" class="headerlink" title="4.1.2 python3.x"></a>4.1.2 python3.x</h4><p>open函数指定’t’的文本模式，encoding指定编码格式。</p>
<h3 id="4-2-处理二进制文件"><a href="#4-2-处理二进制文件" class="headerlink" title="4.2 处理二进制文件"></a>4.2 处理二进制文件</h3><p>open函数以二进制模式打开文件，指定mode参数为’b’.<br>二进制数据可以用readinto, 读入到提前分配好的buffer中，便于数据处理。<br>解析二进制数据可以使用标准库中的struct模块的unpack方法。</p>
<h3 id="4-3-设置文件的缓冲"><a href="#4-3-设置文件的缓冲" class="headerlink" title="4.3 设置文件的缓冲"></a>4.3 设置文件的缓冲</h3><p>全缓冲：open函数的buffering设置为大于1的整数n,n为缓冲区大小。<br>行缓冲：open函数的buffering设置为1。<br>无缓冲：open函数的buffering设置为0。</p>
<h3 id="4-4-文件映射到内存"><a href="#4-4-文件映射到内存" class="headerlink" title="4.4 文件映射到内存"></a>4.4 文件映射到内存</h3><p>使用标准库中mmap模块的mmap()函数，它需要一个打开的文件描述符作为参数。</p>
<h3 id="4-5-访问文件的状态"><a href="#4-5-访问文件的状态" class="headerlink" title="4.5 访问文件的状态"></a>4.5 访问文件的状态</h3><p>函数调用：标准库中os模块下的三个系统调用stat,fstat,lstat获取文件状态。<br>快捷函数：标准库中os.path下一些函数，使用起来更加简洁。</p>
<h3 id="4-6-使用临时文件"><a href="#4-6-使用临时文件" class="headerlink" title="4.6 使用临时文件"></a>4.6 使用临时文件</h3><p>使用标准库中tempfile下的TemporaryFile,NamedTemporaryFile。</p>
<h2 id="五、csv、json、xml、excel"><a href="#五、csv、json、xml、excel" class="headerlink" title="五、csv、json、xml、excel"></a>五、csv、json、xml、excel</h2><h3 id="5-1-读写csv数据"><a href="#5-1-读写csv数据" class="headerlink" title="5.1 读写csv数据"></a>5.1 读写csv数据</h3><p>使用标准库中的csv模块，可以使用其中reader和writer完成csv文件读写。</p>
<h3 id="5-2-读写json数据"><a href="#5-2-读写json数据" class="headerlink" title="5.2 读写json数据"></a>5.2 读写json数据</h3><p>使用标准库中的json模块，其中loads、dumps函数可以完成json数据的读写。</p>
<h3 id="5-3-解析简单的xml文档"><a href="#5-3-解析简单的xml文档" class="headerlink" title="5.3 解析简单的xml文档"></a>5.3 解析简单的xml文档</h3><p>使用标准库中的xml.etree.ElementTree，其中的parse函数可以解析xml文档。</p>
<h3 id="5-4-构建xml文档"><a href="#5-4-构建xml文档" class="headerlink" title="5.4 构建xml文档"></a>5.4 构建xml文档</h3><p>使用标准库中的xml.etree.ElementTree，使用write()方法写入文件。</p>
<h3 id="5-5-读写excel文件"><a href="#5-5-读写excel文件" class="headerlink" title="5.5 读写excel文件"></a>5.5 读写excel文件</h3><p>使用第三方库xlrd和xlwt，这两个库分别用于excel读和写。</p>
<h2 id="六、类与对象"><a href="#六、类与对象" class="headerlink" title="六、类与对象"></a>六、类与对象</h2><h3 id="6-1-派生内置不可变类型并修改实例化行为"><a href="#6-1-派生内置不可变类型并修改实例化行为" class="headerlink" title="6.1 派生内置不可变类型并修改实例化行为"></a>6.1 派生内置不可变类型并修改实例化行为</h3><p>定义类IntTuple继承内置tuple,并实现_new__,修改实例化行为。</p>
<h3 id="6-2-创建大量实例节省内存"><a href="#6-2-创建大量实例节省内存" class="headerlink" title="6.2 创建大量实例节省内存"></a>6.2 创建大量实例节省内存</h3><p>定义类的<strong>slots</strong>属性，它是用来声明实例属性名字的列表。 </p>
<h3 id="6-3-让对象支持上下文管理"><a href="#6-3-让对象支持上下文管理" class="headerlink" title="6.3 让对象支持上下文管理"></a>6.3 让对象支持上下文管理</h3><p>实现上下文管理协议，需定义实例的<strong>enter</strong>,<strong>exit</strong>方法，他们分别在with开始和结束时被调用。</p>
<h3 id="6-4-创建可管理的对象属性"><a href="#6-4-创建可管理的对象属性" class="headerlink" title="6.4 创建可管理的对象属性"></a>6.4 创建可管理的对象属性</h3><p>使用property函数为类创建可管理属性，fget/fset/fdel对应相应属性访问。</p>
<h3 id="6-5-让类支持比较操作"><a href="#6-5-让类支持比较操作" class="headerlink" title="6.5 让类支持比较操作"></a>6.5 让类支持比较操作</h3><p>比较符号运算符重载，需要实现以下方法：小于<strong>lt</strong>,小于等于<strong>le</strong>,大于<strong>gt</strong>,大于等于<strong>ge</strong>,等于<strong>eq</strong>,不等于<strong>ne</strong>。<br>使用标准库下的functools下的类装饰器total_ordering可以简化此过程。</p>
<h3 id="6-6-使用描述符对实例属性做类型检查"><a href="#6-6-使用描述符对实例属性做类型检查" class="headerlink" title="6.6 使用描述符对实例属性做类型检查"></a>6.6 使用描述符对实例属性做类型检查</h3><p>使用描述符来实现需要类型检查的属性：<br>分别实现<strong>get</strong>,<strong>set</strong>,<strong>delete</strong>方法，在<strong>set</strong>内使用isinstancce函数做类型检查。</p>
<h3 id="6-7-在环状数据结构中管理内存"><a href="#6-7-在环状数据结构中管理内存" class="headerlink" title="6.7 在环状数据结构中管理内存"></a>6.7 在环状数据结构中管理内存</h3><p>使用标准库weakref，它可以创建一种能访问对象但不增加引用计数的对象。</p>
<h3 id="6-8-通过实例方法名字的字符串调用方法"><a href="#6-8-通过实例方法名字的字符串调用方法" class="headerlink" title="6.8 通过实例方法名字的字符串调用方法"></a>6.8 通过实例方法名字的字符串调用方法</h3><p>方法一：使用内置函数getattr,通过名字在实例上获取方法对象，然后调用。<br>方法二：使用标准库operator下的methodcaller函数调用。</p>
<h2 id="七、多线程与多进程"><a href="#七、多线程与多进程" class="headerlink" title="七、多线程与多进程"></a>七、多线程与多进程</h2><h3 id="7-1-使用多线程"><a href="#7-1-使用多线程" class="headerlink" title="7.1 使用多线程"></a>7.1 使用多线程</h3><p>使用标准库threading.Thread创建线程，在每一个线程中下载并转换一只股票数据。</p>
<h3 id="7-2-线程间通信"><a href="#7-2-线程间通信" class="headerlink" title="7.2 线程间通信"></a>7.2 线程间通信</h3><p>使用标准库中Queue.Queue，它是一个线程安全的队列。<br>Download线程把下载数据放入队列，Convert线程从队列里提取数据。</p>
<h3 id="7-3-线程间进行事件通知"><a href="#7-3-线程间进行事件通知" class="headerlink" title="7.3 线程间进行事件通知"></a>7.3 线程间进行事件通知</h3><p>线程间的事件通知，可以使用标准库中Threading.Event:</p>
<ol>
<li>等待事件一端调用wait, 等待事件。</li>
<li>通知事件一端调用set，通知事件。</li>
</ol>
<h3 id="7-4-使用线程本地数据"><a href="#7-4-使用线程本地数据" class="headerlink" title="7.4 使用线程本地数据"></a>7.4 使用线程本地数据</h3><p>threading.local函数可以创建线程本地数据空间，其下属性对每个线程独立存在。</p>
<h3 id="7-5-使用线程池"><a href="#7-5-使用线程池" class="headerlink" title="7.5 使用线程池"></a>7.5 使用线程池</h3><p>使用标准库中concurrent.futures下的ThreadPoolExecutor，对象的submit和map方法可以用来启动线程池中线程执行任务。</p>
<h3 id="7-6-使用多进程"><a href="#7-6-使用多进程" class="headerlink" title="7.6 使用多进程"></a>7.6 使用多进程</h3><p>使用标准库中multiprocessing.Process，它可以启动子进程执行任务，操作接口，进程间通信，进程间同步等都与Threading,Thread类似。</p>
<h2 id="八、装饰器"><a href="#八、装饰器" class="headerlink" title="八、装饰器"></a>八、装饰器</h2><h3 id="8-1-使用函数装饰器"><a href="#8-1-使用函数装饰器" class="headerlink" title="8.1 使用函数装饰器"></a>8.1 使用函数装饰器</h3><p>定义函数装饰器，用它来生成一个在原函数基础添加了新功能的函数，替换原函数。</p>
<h3 id="8-2-为被装饰的函数保存元数据"><a href="#8-2-为被装饰的函数保存元数据" class="headerlink" title="8.2 为被装饰的函数保存元数据"></a>8.2 为被装饰的函数保存元数据</h3><p>使用标准库functools中的装饰器wraps装饰内部包裹函数，可以制定将原函数的某些属性，更新到包裹函数上面。</p>
<h3 id="8-3-定义带参数的装饰器"><a href="#8-3-定义带参数的装饰器" class="headerlink" title="8.3 定义带参数的装饰器"></a>8.3 定义带参数的装饰器</h3><p>带参数的装饰器，也就是根据参数定制化一个装饰器，可以看成生产装饰器的工厂，每次调用typeasseert，返回一个特定的装饰器，然后用它去修饰其他函数。</p>
<h3 id="8-4-实现属性可修改的函数装饰器"><a href="#8-4-实现属性可修改的函数装饰器" class="headerlink" title="8.4 实现属性可修改的函数装饰器"></a>8.4 实现属性可修改的函数装饰器</h3><p>为包裹函数增添一个函数，用来修改闭包中使用的自由变量。<br>在python3中：使用nonlocal访问嵌套作用域中的变量引用。</p>
<h3 id="8-5-在类中定义装饰器"><a href="#8-5-在类中定义装饰器" class="headerlink" title="8.5 在类中定义装饰器"></a>8.5 在类中定义装饰器</h3><p>为了让装饰器在使用上更加灵活，可以把类的实例方法作为装饰器，此时在包裹函数中就可以持有实例对象，便于修改属性和拓展功能。</p>
<p>更多：<a href="http://coding.imooc.com/class/62.html" target="_blank" rel="external">Python高效编程技巧实战</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、数据结构&quot;&gt;&lt;a href=&quot;#一、数据结构&quot; class=&quot;headerlink&quot; title=&quot;一、数据结构&quot;&gt;&lt;/a&gt;一、数据结构&lt;/h2&gt;&lt;h3 id=&quot;1-1-列表字典集合中根据条件筛选数据&quot;&gt;&lt;a href=&quot;#1-1-列表字典集合中根据条件筛选数
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django Xadmin入门与进阶</title>
    <link href="http://yoursite.com/2017/09/10/Xadmin%E5%85%A5%E9%97%A8%E4%B8%8E%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2017/09/10/Xadmin入门与进阶/</id>
    <published>2017-09-10T14:22:26.000Z</published>
    <updated>2017-10-16T15:13:56.039Z</updated>
    
    <content type="html"><![CDATA[<p>Django的admin也是一个app,默认配置</p>
<p>INSTALLED_APPS = [<br>    ‘django.contrib.admin’,<br>]</p>
<p>urlpatterns = [<br>    url(r’^admin/‘, admin.site.urls),<br>]</p>
<p>浏览器访问admin<br>127.0.0.1:8000/admin<br>登录框提示输入用户名和密码<br>Tools-Run manage.py Task<br>create superuser<br>记住密码不能是纯数字</p>
<!-- 如何让用户实现通过邮箱登陆？ -->
<p>admin改成中文界面<br>LANGUAGE_CODE = ‘zh-hans’</p>
<p>TIME_ZONE = ‘Asia/Shanghai’</p>
<p>USE_I18N = True</p>
<p>USE_L10N = True</p>
<p>USE_TZ = False  （不这样设置，Django在我们数据库存储过程中会把我们的时间改为UTC时间，也就是国际事件。减少以后很多关于时间的问题）</p>
<p>admin.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from django.contrib import admin</div><div class="line"></div><div class="line">Register your models here.</div><div class="line"></div><div class="line">from .models import UserProfile</div><div class="line"></div><div class="line"></div><div class="line">class UserProfileAdmin(admin.ModelAdmin):</div><div class="line">    pass</div><div class="line"></div><div class="line">admin.site.register(UserProfile, UserProfileAdmin)</div></pre></td></tr></table></figure></p>
<!-- gender = models.CharField(max_length=6, choices=(("male", u"男"), ("female", "女")), 
default="female") -->
<p>makemigrations app name  ValueError: too many values to unpack migration里所有apps.去掉</p>
<p>org = models.ForeignKey(CourseOrg, verbose_name=u”所属机构”)  Django自带CASCADE?<br>migration里显示on_delete=django.db.models.deletion.CASCADE</p>
<p>增加用户，一是createsuperuser<br>二，是后台管理界面新增用户</p>
<p>Xadmin：<br>pip install xadmin<br>INSTALLED_APPS = [<br>    ‘xadmin’,<br>    ‘crispy_forms’,   （注意这里是下划线，一定不要搞错了）<br>]</p>
<p>urls.py<br>import xadmin<br>urlpatterns = [<br>    url(r’^xadmin/‘, xadmin.site.urls),<br>]<br>之前注册的admin要注销掉</p>
<p>报错：xadmin_usersettings doesn’t exist<br>记得makemigrations migrate</p>
<p>Xadmin后台样式Bootstrap</p>
<p>基于源码安装Xadmin<br>clone and download<br>xadmin拷贝到项目根目录<br>记得pip uninstall xadmin<br>Run-没有报错，源码安装成功<br>127.0.0.1:8000/xadmin</p>
<p>model全部注册到后台管理系统中</p>
<p>Xadmin也继承了很多admin的用法<br>比如model注册<br>如何注册model<br>新建adminx.py文件</p>
<p>pycharm设定新建py文件的模板<br>File and Code tEMPLATE<br>python文件<br>自动生成模板</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django的admin也是一个app,默认配置&lt;/p&gt;
&lt;p&gt;INSTALLED_APPS = [&lt;br&gt;    ‘django.contrib.admin’,&lt;br&gt;]&lt;/p&gt;
&lt;p&gt;urlpatterns = [&lt;br&gt;    url(r’^admin/‘, admi
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="Xadmin" scheme="http://yoursite.com/tags/Xadmin/"/>
    
  </entry>
  
</feed>
