<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nana&#39;s Blog</title>
  <subtitle>Like farmers, we do not know what the future will bring, but doing nothing is not an option. ---The Kunshan Way</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-08T12:51:31.795Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Nana Xie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP协议原理加实战笔记</title>
    <link href="http://yoursite.com/2018/11/07/HTTP%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86%E5%8A%A0%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/11/07/HTTP协议原理加实战笔记/</id>
    <published>2018-11-07T02:24:56.000Z</published>
    <updated>2018-11-08T12:51:31.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、导学"><a href="#一、导学" class="headerlink" title="一、导学"></a>一、导学</h1><p><strong>Cache-Control设置</strong>:<br>基本：max-age=100;<br>设置public、private控制只能在客户端进行缓存，还是可以通过代理服务器进行缓存;<br>设置must-revalidate,在缓存过期之后，必须到服务端验证过之后，才能继续使用缓存;<br>设置no-cache、no-store控制我们是否使用缓存。</p>
<p><strong>缓存验证</strong>:<br>last-modified配合if-modified-since;<br>etag配合if-none-match。</p>
<p><strong>每个HTTP的头都有使用价值</strong>:<br>Content-Type、Content-Encoding等用来约束数据类型;<br>Cookie保持会话信息（常见的session方案就是通过cookie来实现的）;<br>CORS实现跨域并保持安全性限制（如何保证跨域服务安全）。</p>
<p>浏览器输入URL后HTTP请求返回的完整过程如下图所示：<br><img src="https://i.loli.net/2018/11/07/5be2d38b61643.png" alt="浏览器输入URL后HTTP请求返回的完整过程" title="浏览器输入URL后HTTP请求返回的完整过程"></p>
<p><strong>Redirect</strong><br>为什么一开始就要做一个redirect? 首先判断需不需要redirect，以及redirect到哪里。<br><strong>App cache</strong><br>第二部，看缓存，因为请求的资源可能已经缓存过了。<br><strong>DNS</strong><br>输入的是域名，域名要对应成IP之后，我们才能真正的访问到服务器。 查找域名对应的IP地址，叫DNS解析。<br><strong>TCP</strong><br>有了IP之后，就要去创建TCP连接。经过TCP的三次握手之后，才能真正的把连接创建起来。如果请求是HTTPS的，要创建一个HTTPS的连接，跟TCP的三次握手不一样，中间要有一个保证安全的数据传输过程。<br><strong>Request</strong><br>连接创建好后，才真正开始发送HTTP请求的数据包。<br><strong>Response</strong><br>发送完成后，服务器接受到数据，进行数据操作后，返回我们请求想要的内容，开始返回数据。返回数据后，这个HTTP请求才真正的完成。<br>这也是我们打开浏览器之后，输入URL之后，整个有关于数据加载的过程所会经历的每个时间点。</p>
<h1 id="二、HTTP协议基础及发展历史"><a href="#二、HTTP协议基础及发展历史" class="headerlink" title="二、HTTP协议基础及发展历史"></a>二、HTTP协议基础及发展历史</h1><h2 id="2-1-5层网络模型介绍"><a href="#2-1-5层网络模型介绍" class="headerlink" title="2.1 5层网络模型介绍"></a>2.1 5层网络模型介绍</h2><p>经典五层模型如下图所示：<br><img src="https://i.loli.net/2018/11/07/5be2dd0982197.png" alt="经典五层模型" title="经典五层模型"></p>
<p><strong>物理层</strong>：<br>主要作用是定义物理设备如何传输数据。<br>简单说，物理层就是电脑的硬件，网卡端口，网线，网线连出去后的光缆。</p>
<p><strong>数据链路层</strong>：<br>在通信的实体间建立数据链路连接。</p>
<p><strong>网络层</strong>：<br>为数据在结点之间传输创建逻辑链路。<br>逻辑链路包含从我的电脑访问百度的服务器，我们如何去寻找百度这台服务器所在的地址，它就是一个逻辑关系，这个关系是在网络层为我们创建的。</p>
<p><strong>传输层</strong>：<br>主要两个协议 TCP/IP协议，另一个UDP协议。更多情况下，使用的是TCP/IP协议，这是一个更可靠的帮我们传输数据的协议。</p>
<ol>
<li>为用户提供可靠的端到端（End-to-End）服务;</li>
<li>传输层向高层屏蔽了下层数据通信的细节。</li>
</ol>
<p><strong>应用层</strong>：</p>
<ol>
<li>为应用软件提供了很多服务;</li>
<li>构建于TCP协议之上;</li>
<li>屏蔽网络传输相关细节。</li>
</ol>
<h2 id="2-2-HTTP协议的发展历史"><a href="#2-2-HTTP协议的发展历史" class="headerlink" title="2.2 HTTP协议的发展历史"></a>2.2 HTTP协议的发展历史</h2><p><strong>HTTP/0.9</strong>：<br>只有一个命令GET;<br>没有HEADER等描述数据的信息;<br>服务器发送完毕，就关闭TCP连接。</p>
<p><strong>HTTP/1.0</strong>：<br>增加了很多命令;<br>增加status code和header;<br>还增加多字符集支持、多部分发送、权限、缓存等。</p>
<p><strong>HTTP/1.1</strong>：<br>支持持久连接;<br>增加了pipeline;<br>增加host和其他一些命令。</p>
<p><strong>HTTP2</strong>:<br>现在还没有普及，但是是未来趋势。</p>
<p><strong>HTTPS</strong>：<br>安全版本的HTTP协议，实际使用内容和HTTP/1.1没有特别大的区别。</p>
<h2 id="2-3-HTTP的三次握手"><a href="#2-3-HTTP的三次握手" class="headerlink" title="2.3 HTTP的三次握手"></a>2.3 HTTP的三次握手</h2><p>TCP连接图如下所示：<br><img src="https://i.loli.net/2018/11/07/5be2e01675426.png" alt="TCP连接图" title="TCP连接图"></p>
<p>三次握手时序图如下所示：<br><img src="https://i.loli.net/2018/11/07/5be2e0334fe31.png" alt="三次握手时序图" title="三次握手时序图"></p>
<h2 id="2-4-URI-URL和URN"><a href="#2-4-URI-URL和URN" class="headerlink" title="2.4 URI-URL和URN"></a>2.4 URI-URL和URN</h2><p><strong>URI</strong>：<br>Uniform Resource Identifier/统一资源标志符；<br>用来唯一标识互联网上的信息资源；<br>包含URL和URN。</p>
<p><strong>URL</strong>：<br>Uniform Resource Locator/统一资源定位器；<br><a href="http://user:pass@host.com:80/path?query=string#hash；" target="_blank" rel="external">http://user:pass@host.com:80/path?query=string#hash；</a><br>此类格式的都叫做URL, 比如ftp协议。</p>
<p><strong>URN</strong>：<br>永久统一资源定位符；<br>在资源移动之后还能被找到；<br>目前还没有非常成熟的使用方案。</p>
<h2 id="2-5-HTTP报文格式"><a href="#2-5-HTTP报文格式" class="headerlink" title="2.5 HTTP报文格式"></a>2.5 HTTP报文格式</h2><p>请求报文和响应报文如下图所示：<br><img src="https://i.loli.net/2018/11/08/5be42b43290ed.png" alt="请求报文和响应报文" title="请求报文和响应报文"></p>
<p><strong>HTTP方法</strong>：<br>用来定位对于资源的操作；<br>常用的有GET、POST等；<br>从定义上讲有各自的语义。</p>
<p><strong>HTTP CODE</strong>:<br>定义服务器对请求的处理结果；<br>各个区间的CODE有各自的语义；<br>好的HTTP服务可以通过CODE判断结果。</p>
<!-- ## 2.6 创建一个最简单的web服务 -->
<h1 id="三、HTTP各种特性总览"><a href="#三、HTTP各种特性总览" class="headerlink" title="三、HTTP各种特性总览"></a>三、HTTP各种特性总览</h1><h2 id="3-1-认识HTTP客户端"><a href="#3-1-认识HTTP客户端" class="headerlink" title="3.1 认识HTTP客户端"></a>3.1 认识HTTP客户端</h2><p>常用的HTTP客户端是浏览器。<br>只要是实现了发送一个标准的HTTP请求报文的工具，就是一个HTTP的客户端。</p>
<h2 id="3-2-CORS跨域请求的限制与解决"><a href="#3-2-CORS跨域请求的限制与解决" class="headerlink" title="3.2 CORS跨域请求的限制与解决"></a>3.2 CORS跨域请求的限制与解决</h2><p>后端：Access-Control-Allow-Origin；<br>前端：jsonp等方式；<br>其他：proxy等方式。</p>
<!-- ## 3.3 CORS跨域限制以及预请求验证

## 3.4 缓存头Cache-Control的含义和使用

## 3.5 缓存验证Last-Modified和Etag的使用

## 3.6 cookie和session

## 3.7 HTTP长连接

## 3.8 数据协商

## 3.9 Redirect

## 3.10 CSP


# 四、Nginx代理以及面向未来的HTTP
## 4.1 Nginx安装和基础代理配置

## 4.2 Nginx代理配置和代理缓存的用处

## 4.3 HTTPS解析

## 4.4 使用Nginx部署HTTPS服务

## 4.5 HTTP2的优势和Nginx配置HTTP2的简单使用


# 五、总结 -->
<!-- # 一、课程导学
## 1.1导学
### 1.1.1WHY
#### 1.1.1.1很多WEB开发真的不理解HTTP
HTTP method的种类
HTTP status code
前端的缓存：客户端缓存 代理服务器缓存 如何验证缓存的可用性

前端同学可能一开始是从HTML CSS JS开始的，而后端同学可能一开始是从框架开始的
这些框架帮我们做好了上线后的优化问题，没有机会去发现问题
忽视HTTP重要性
#### 1.1.1.2HTTP真的很重要
前端所有静态资源加载和数据加载都是要通过HTTP协议进行发送的
#### 1.1.1.3提升自身价值

最简单的例子：
输入URL打开网页
AJAX获取数据
img标签加载图片（src)

Cache-Control: 
max-age=100
设置public、private控制只能在客户端进行缓存，还是可以通过代理服务器进行缓存
设置must-revalidate,在缓存过期之后，必须到服务端验证过之后，才能继续使用缓存
设置no-cache、no-store控制我们是否使用缓存

缓存验证
last-modified配合if-modified-since
etag配合if-none-match

其实缓存是web服务中对性能提升最大的一块，深入理解HTTP缓存对web开发非常重要

每个HTTP的头都有使用价值
Content-Type、Content-Encoding等用来约束数据类型
Cookie保持会话信息（常见的session方案就是通过cookie来实现的）
CORS实现跨域并保持安全性限制（如何保证跨域服务安全）

深入到TCP
什么是三次握手
HTTPS链接的创建过程，以及为什么HTTPS就是安全的
什么是长链接，为什么需要长链接
HTTP2的信道复用又为什么能提高性能

浏览器输入URL后HTTP请求返回的完整过程（图）

配置Nginx服务器来作为HTTP的代理，并且能够开启Nginx的缓存功能
如何更好的使用代理缓存，提高HTTP服务的性能

后端-打造性能更好的HTTP服务
前端-更好使用HTTP的特性帮助开发
前后端更好的协作

摆正心态，认为HTTP真的重要，并且真的想要把它学好

## 内容介绍
浏览器输入URL后HTTP请求返回的完整过程（图）
浏览器API里面有个performance会记录所有每个时间点
哪个时间点耗时特别长，可以优化它
### Redirect
为什么一开始就要做一个redirect? 首先判断需不需要redirect，以及redirect到哪里
### App cache
第二部，看缓存，因为请求的资源可能已经缓存过了。
### DNS
输入的是域名，域名要对应成IP之后，我们才能真正的访问到服务器。 先去查找域名对应的IP地址，就叫DNS解析。
### TCP
有了IP之后，就要去创建TCP连接。经过TCP的三次握手之后，才能真正的把连接创建起来。如果请求是HTTPS的，要创建一个HTTPS的连接，跟TCP的三次握手不一样，中间要有一个保证安全的数据传输过程。
### Request
连接创建好后，才真正开始发送HTTP请求的数据包。
### Response
发送完成后，服务器接受到数据，进行数据操作后，返回我们请求想要的内容，开始返回数据。返回数据后，这个HTTP请求才真正的完成。
这也是我们打开浏览器之后，输入URL之后，整个有关于数据加载的过程所会经历的每个时间点。

# 二、HTTP协议基础及发展历史
## 5层网络模型介绍
经典五层模型（图）
HTTP协议是在应用层上实现的
但是HTTP协议要基于传输层里的一个非常重要的协议，TCP/IP协议，网络模型当中最重要的协议，应用过程当中，如创建HTTP服务FTP服务Email服务，这些服务都是基于TCP/IP协议实现的，涉及HTTP请求的性能，或者过程的消耗。
下面网络层、数据链路层、物理层，因为主要做的是web服务，基本不涉及。

### 低三层
#### 物理层：
主要作用是定义物理设备如何传输数据。
简单说，物理层就是电脑的硬件，网卡端口，网线，网线连出去后的光缆。
#### 数据链路层
在通信的实体间建立数据链路连接
#### 网络层
为数据在结点之间传输创建逻辑链路。
逻辑链路包含从我的电脑访问百度的服务器，我们如何去寻找百度这台服务器所在的地址，它就是一个逻辑关系，这个关系是在网络层为我们创建的。
这些相对底层，不理解也没关系。
### 传输层
主要两个协议 TCP/IP协议，另一个UDP协议。更多情况下，使用的是TCP/IP协议，更可靠的协议，帮我们传输数据。
#### 为用户提供可靠的端到端（End-to-End）服务。
建立起从自己电脑到百度服务器之间的连接之后，两端如何传输数据，传输数据的方式，都是在这一层进行定义的，传输的数据可能很小可能很大，如果传输数据大需要分包分片，传输到另一端后需要组装。协议的定义，如何组装，如何传输，都是在传输层进行定义的。
#### 传输层向高层屏蔽了下层数据通信的细节
HTTP协议是实现在TCP/IP协议之上的，HTTP协议要传输一个数据。输入URL的过程，涉及一系列的拼装以及传输，这个过程，开发者和浏览器不需要知道细节。传输层把这些过程封装掉了。
Ajax请求也是HTTP请求，Ajax POST方式去传输一些数据，传输过程中的细节，传输层帮我们实现掉了。


### 应用层
为应用软件提供了很多服务
构建于TCP协议之上
屏蔽网络传输相关细节


## HTTP协议的发展历史
第一个定稿的HTTP协议版本是HTTP/0.9

只有一个命令GET
没有HEADER等描述数据的信息
服务器发送完毕，就关闭TCP连接

明确一点： 这里的连接跟HTTP的请求是不一样的 HTTP请求并发数
HTTP请求跟TCP连接不是一个概念
同一个TCP连接里可以发送很多个HTTP请求，以前的协议版本不能这么做，但是现在HTTP/1.1里面，我们可以这么做了。HTTP/2会更大的优化相关的东西来提高HTTP传输的效率以及服务器的性能。
TCP连接对应的是多个HTTP请求，而一个HTTP请求一定是在某个TCP连接里面去进行发送的。

第二个版本：HTTP/1.0,这个版本跟我们现在最普遍使用的HTTP/1.1差不了多少。

增加了很多命令:比如POST PUT HEADER
增加status code和header: status code描述服务端处理某一请求后的状态
header对应不管是发送还是请求的相关数据，它的描述以及我们对这部分数据进行操作的方法
还增加多字符集支持、多部分发送、权限、缓存等

HTTP/1.1
只是在HTTP1.0上增加了一些功能来优化整个网络链接的过程
支持持久连接： HTTP/1.0版本对比待。   HTTP/1.1 创建链接的过程中，它的消耗是比较高的，延迟也会比较高，所以如果我们在建立完一个链接之后，可以不关闭，以后新的HTTP请求可以一直在这个链接里面发送的话，性能会高很多。
增加了pipeline: 可以在同一个链接里面发送多个请求。服务端对请求按照顺序进行一个内容的返回,如果前一个请求等待的时间非常的长，后一个请求处理的比较快，后一个请求不能先发送，要等前一个请求数据发送完成之后，才能进行发送，这部分时间相当于我们一个串行一个并行，里面性能的差异就体现出来，这个在HTTP/2里面就会进行一个优化。
增加host和其他一些命令： 有了host之后，就可以在同一台服务器，在这台物理服务器上我们可以同时跑多个不同的web服务，比如一个nodejs服务，一个java服务。然后通过host这个字段来表示，我都是请求到这台物理服务器上面，但是要请求的是里面哪一个软件服务，通过host来进行判断。这个头增加的好处就是我们在同一个物理服务器或者同一个集群里面，可以部署很多不同的web服务来进行一个使用。提高物理服务的一个使用效率。

HTTP2
现在还没有普及，但是肯定是未来

所有数据以二进制传输：HTTP/1.1里面，大部分数据传输是通过字符串，数据的分片方式是不太一样的。在HTTP2里面，所有数据都是以帧进行传输的，同样是因为有了这个好处，所以下面
同一个连接里面发送多个请求不再需要按照顺序来进行返回处理，可以同时返回数据，并行的效率
头信息压缩以及推送等提高效率的功能：HTTP2是为了解决HTTP/1.1里面性能底下的一些问题  头信息压缩的概念 有效减少带宽使用 推送功能 HTTP-客户端永远是主动方，服务端永远是被动方。 推送-HTTP2里服务端是剋主动发起一些数据传输的
web页面 css js文件，链接方式在html文本里面显示的 通过浏览器解析里面内容之后，。。。顺序的问题，串行
HTML css js发送顺序是并行的，

HTTPS 安全版本的HTTP协议 实际使用内容和HTTP/1.1没有特别大的区别



## HTTP的三次握手
先理解一个概念
图
在客户端和服务器之间进行一个HTTP请求的发送和返回的过程当中，我们需要创建一个叫TCP connection的东西，因为HTTP是不存在连接这么一个概念的，只有请求和响应这么一个概念。
请求和相应都是数据包，它们之间需要经过一个传输的通道的，传输的通道就在TCP里面去创建了这么一个从客户端发起和服务端接收的这么一个连接。这个连接是可以一直保持在那边的，然后HTTP请求是在这个连接的基础上面是发送的。在TCP连接上面是可以发送多个HTTP连接请求的，不同版本里面这个模式是不一样的。
HTTP/1.0里面，这个连接是在一个HTTP请求创建的时候，就去创出这个HTTP连接。。。TCP连接就关闭了
HTTP/1.1 连接保持在那边 。。。 TCP连接在创建的过程当中，是有三次握手这么一个消耗的。三次握手代表有三次网络传输。客户端发送一次，服务端返回一次，客户端再发送一次。这时才创建了TCP连接，然后才能去发送HTTP请求。如果TCP连接保持在那边，那么第二个HTTP请求就没有三次握手的开销，HTTP2里面还有一个好处就是，TCP连接上面的HTTp请求是可以并发的。同一个用户对同一个服务器发起一个网页请求的时候，它只需要一个TCP连接
TCP连接和HTTP请求之间的一个关系

三次握手时序图（图）
首先客户端发起一个我要创建一个连接的这么一个数据包的请求，它发送到服务端，有一个标志位SYN=1, 这是一个创建请求的数据包，后面会发送一个叫Seq=X,一般X等于1。服务端接收到这个数据包之后，知道有个客户端要给我创建连接了，创建连接后，服务端就会开启一个TCP socket的一个端口。端口开启之后，返回给客户端，返回客户端数据里面也是一个SYN第一个标志位，然后它会返回ACK，ACK等于第一个客户端发送过来的Seq也就是X + 1， 然后再发送一个Seq, 这个是服务端的seq。 客户端拿到之后，客户端再发送ACK = Y + 1， Seq等于一个新的数字。
这就是创建一个TCP连接的过程。
为什么要进行三次握手呢？为了防止服务端开启一些无用的连接，网络传输是有延时的，。。。
没有三次握手，服务端不知道客户端到底有没有接收到我返回的信息。并且没有给一个确认说，要创建还是关闭这个请求，服务端的端口就一直开着等着客户端来发送实际的请求数据了。这时服务端开销就浪费了，它不知道连接已经创建失败了，可能客户端已经创建新的连接去了。所以需要三次握手去确认这个过程。。。。三次握手主要是为了规避网络传输当中延时导致的服务器开销的问题。
Weshark 网络抓包工具
分析HTTP请求的内容
深入各个层级的网络数据包，比如五层模型中的传输层，就是TCP层 还有网络层都可以抓到。
简单分析HTTP三次握手的过程
。。。。。。分析过程
SYN等于1，其实是说SYN占据了第一个标志位，图片只是为了更形象的展示三次握手的过程。
完整三次握手的数据包的情况。



## URI-URL和URN
HTTP当中使用的基本都是URL
URI
是一个包含URL URN它们统一的定义
Uniform Resource Identifier/统一资源标志符

URL 定位一个web网站它的具体的某一个页面
这些名词的定义主要是为了去识别我们在互联网上一个固定位置它的资源所在的地方，用这种方式来标志了某一个资源之后，我们就可以通过一个链接的方式去找到这个资源，因为互联网当中这些HTTP协议或者FTP协议就是为了去找到某些资源，并且通过某种方式去获得某种资源
www.baidu.com 打错一个字 没办法打开百度的页面

URI是为了去定位某一个特定的资源，而去设置的

URI
Uniform Resource Identifier/统一资源标志符
用来唯一标识互联网上的信息资源
包含URL和URN

最主要将的就是URL
URL
Uniform Resource Locator/统一资源定位器： 用来找到资源所在的位置，并且去访问它得到它
http://user:pass@host.com:80/path?query=string#hash
http://  schema 定义我们以怎么样的方式怎么样的协议去访问这个资源 shema有很多各种不同的协议，比如我们通过FTP也可以去访问互联网上的某些资源
还有mailto,如何给一个邮件地址去发送邮件
这些协议服务的实现方式不同，我们通过不同的协议去访问这个服务，解析的方式就会不一样。
待
ftp的实现






## HTTP报文格式
## 创建一个最简单的web服务

# 三、HTTP各种特性总览
## 认识HTTP客户端
## CORS跨域请求的限制与解决
## CORS跨域限制以及预请求验证
## 缓存头Cache-Control的含义和使用
## 缓存验证Last-Modified和Etag的使用
## cookie和session
## HTTP长连接
## 数据协商
## Redirect
## CSP


# 四、Nginx代理以及面向未来的HTTP
## Nginx安装和基础代理配置
## Nginx代理配置和代理缓存的用处
## HTTPS解析
## 使用Nginx部署HTTPS服务
## HTTP2的优势和Nginx配置HTTP2的简单使用


# 课程总结 -->
<p>参考：<br><a href="https://coding.imooc.com/class/chapter/225.html#Anchor" target="_blank" rel="external">HTTP协议原理+实践 Web开发工程师必学   
</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、导学&quot;&gt;&lt;a href=&quot;#一、导学&quot; class=&quot;headerlink&quot; title=&quot;一、导学&quot;&gt;&lt;/a&gt;一、导学&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Cache-Control设置&lt;/strong&gt;:&lt;br&gt;基本：max-age=100;&lt;br&gt;设置publ
    
    </summary>
    
      <category term="WEB" scheme="http://yoursite.com/categories/WEB/"/>
    
    
      <category term="WEB" scheme="http://yoursite.com/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>娜娜的阅读清单</title>
    <link href="http://yoursite.com/2018/11/01/%E5%A8%9C%E5%A8%9C%E7%9A%84%E9%98%85%E8%AF%BB%E6%B8%85%E5%8D%95/"/>
    <id>http://yoursite.com/2018/11/01/娜娜的阅读清单/</id>
    <published>2018-11-01T05:48:56.000Z</published>
    <updated>2018-11-08T02:44:50.271Z</updated>
    
    <content type="html"><![CDATA[<p>娜娜近段时间的阅读清单， 陆续整理中……</p>
<h2 id="已阅读"><a href="#已阅读" class="headerlink" title="已阅读"></a>已阅读</h2><p>《番茄工作法图解》<br>《小狗钱钱》<br>《从极简到极致》<br>《即兴的智慧》<br>《把时间当作朋友》<br>《远见》<br>《拆掉思维里的墙》<br>《人生只有一次去做自己喜欢的事》<br>《少有人走的路》<br><!-- 《》 --></p>
<h2 id="阅读ing"><a href="#阅读ing" class="headerlink" title="阅读ing"></a>阅读ing</h2><p>《好好学习》<br>《编写高质量代码：改善Python程序的91个建议 张颖//赖勇浩》<br>《高效能人士的七个习惯》<br>《人性的弱点》<br>《走在人生边上》<br>《干法》<br>《穷查理宝典》<br><!-- 《干法》[日 稻和盛夫]
《穷查理宝典》[美 彼得·考夫曼] --><br><!-- 《MySQL必知必会》 --><br><!-- 《鸟哥的Linux私房菜》
《Python基础教程 第3版》 --></p>
<h2 id="尚未阅读"><a href="#尚未阅读" class="headerlink" title="尚未阅读"></a>尚未阅读</h2><p>《美好人生运营指南》<br>《怎样观察一朵花》<br>《正念的奇迹》<br>《跳着踢踏舞去上班》<br>《非暴力沟通》<br>《我不想活得这么累》<br>《天真的幽默家》<br>《人间便利店》<br>《术与道》<br>《黑天鹅》<br>《细节》<br>《滚雪球》</p>
<!-- 高性能MySQL -->
<!-- 《》[]
《》[]
《》[]
《》[]
《》[]
《》[] -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;娜娜近段时间的阅读清单， 陆续整理中……&lt;/p&gt;
&lt;h2 id=&quot;已阅读&quot;&gt;&lt;a href=&quot;#已阅读&quot; class=&quot;headerlink&quot; title=&quot;已阅读&quot;&gt;&lt;/a&gt;已阅读&lt;/h2&gt;&lt;p&gt;《番茄工作法图解》&lt;br&gt;《小狗钱钱》&lt;br&gt;《从极简到极致》&lt;br&gt;《即兴
    
    </summary>
    
      <category term="阅读" scheme="http://yoursite.com/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="阅读" scheme="http://yoursite.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Python编程技巧（持续更新）</title>
    <link href="http://yoursite.com/2018/10/30/Python%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <id>http://yoursite.com/2018/10/30/Python编程技巧（持续更新）/</id>
    <published>2018-10-30T02:40:59.000Z</published>
    <updated>2018-10-30T03:22:07.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h2><h3 id="序列分解成单独变量（序列解包）"><a href="#序列分解成单独变量（序列解包）" class="headerlink" title="序列分解成单独变量（序列解包）"></a>序列分解成单独变量（序列解包）</h3><p>适用：任何序列（或可迭代的对象）<br>解决方案：通过简单的赋值操作，但变量的总数和结构要与序列相吻合，如果元素的数量不匹配，将得到一个错误提示，如ValueError: not enough values to unpack (expected 3, got 2)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">data = [&apos;ACME&apos;, 50, 91.1, (2012, 12, 21)]</div><div class="line">name, shares, price, (year, mon, day) = data</div><div class="line">print(name)</div><div class="line">print(year)</div><div class="line">print(mon)</div><div class="line">print(day)</div><div class="line"># ACME</div><div class="line"># 2012</div><div class="line"># 12</div><div class="line"># 21</div></pre></td></tr></table></figure></p>
<h3 id="分解元素"><a href="#分解元素" class="headerlink" title="分解元素"></a>分解元素</h3><p>适用：未知或任意长度的可迭代对象<br>解决方案：”*表达式“<br>应用场景：迭代一个变长的元组序列或和某些特定的字符串处理操作如拆分等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">records = [</div><div class="line">    (&apos;foo&apos;, 1, 2),</div><div class="line">    (&apos;bar&apos;, &apos;hello&apos;),</div><div class="line">    (&apos;foo&apos;, 3, 4)</div><div class="line">]</div><div class="line"></div><div class="line"></div><div class="line">def do_foo(x, y):</div><div class="line">    print(&apos;foo&apos;, x, y)</div><div class="line"></div><div class="line"></div><div class="line">def do_bar(s):</div><div class="line">    print(&apos;bar&apos;, s)</div><div class="line"></div><div class="line"></div><div class="line">for tag, *args in records:</div><div class="line">    if tag == &apos;foo&apos;:</div><div class="line">        do_foo(*args)</div><div class="line">    elif tag == &apos;bar&apos;:</div><div class="line">        do_bar(*args)</div><div class="line"># foo 1 2</div><div class="line"># bar hello</div><div class="line"># foo 3 4</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">line = &apos;nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false&apos;</div><div class="line">uname, *fields, homedir, sh = line.split(&apos;:&apos;)</div><div class="line">print(uname)</div><div class="line">print(homedir)</div><div class="line">print(sh)</div><div class="line"># nobody</div><div class="line"># /var/empty</div><div class="line"># /usr/bin/false</div></pre></td></tr></table></figure>
<h3 id="保存最后N个元素"><a href="#保存最后N个元素" class="headerlink" title="保存最后N个元素"></a>保存最后N个元素</h3><p>适用：迭代或其他形式的处理过程中<br>解决方案：collections.deque<br>应用场景：文本匹配等<br>somefile.txt:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Ilovepython</div><div class="line">python</div><div class="line">yesyesyes</div><div class="line">lovepython</div><div class="line">oppspython</div><div class="line">nonono</div><div class="line">pythonpython</div></pre></td></tr></table></figure></p>
<p>code:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">from collections import deque</div><div class="line"></div><div class="line"></div><div class="line">def search(lines, pattern, history=5):</div><div class="line">    previous_lines = deque(maxlen=history)</div><div class="line">    for line in lines:</div><div class="line">        if pattern in line:</div><div class="line">            yield line, previous_lines</div><div class="line">        previous_lines.append(line)</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    with open(&apos;somefile.txt&apos;) as f:</div><div class="line">        for line, prevlines in search(f, &apos;python&apos;, 5):</div><div class="line">            for pline in prevlines:</div><div class="line">                print(pline, end=&apos;&apos;)</div><div class="line">            print(line, end=&apos;&apos;)</div><div class="line">            print(&apos;-&apos; * 20)</div><div class="line"></div><div class="line"># Ilovepython</div><div class="line"># --------------------</div><div class="line"># Ilovepython</div><div class="line"># python</div><div class="line"># --------------------</div><div class="line"># Ilovepython</div><div class="line"># python</div><div class="line"># yesyesyes</div><div class="line"># lovepython</div><div class="line"># --------------------</div><div class="line"># Ilovepython</div><div class="line"># python</div><div class="line"># yesyesyes</div><div class="line"># lovepython</div><div class="line"># oppspython</div><div class="line"># --------------------</div><div class="line"># python</div><div class="line"># yesyesyes</div><div class="line"># lovepython</div><div class="line"># oppspython</div><div class="line"># nonono</div><div class="line"># pythonpython--------------------</div></pre></td></tr></table></figure></p>
<!-- 
```
``` -->
<!-- ###
###
###
###
###
### -->
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>《Python Cookbook（第3版）》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据结构和算法&quot;&gt;&lt;a href=&quot;#数据结构和算法&quot; class=&quot;headerlink&quot; title=&quot;数据结构和算法&quot;&gt;&lt;/a&gt;数据结构和算法&lt;/h2&gt;&lt;h3 id=&quot;序列分解成单独变量（序列解包）&quot;&gt;&lt;a href=&quot;#序列分解成单独变量（序列解包）&quot; c
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>我回来了</title>
    <link href="http://yoursite.com/2018/10/29/%E6%88%91%E5%9B%9E%E6%9D%A5%E4%BA%86/"/>
    <id>http://yoursite.com/2018/10/29/我回来了/</id>
    <published>2018-10-29T10:25:15.000Z</published>
    <updated>2018-10-30T03:44:15.334Z</updated>
    
    <content type="html"><![CDATA[<p>今年三月以来，发生了很多事情，感觉这几个月自己就像坐在过山车上一样。<br>感情始终是白卷，母胎单身狗默哀三分钟。若职业发展顺利也罢，不料却屡屡受挫。<br>很长时间，这个个人网站也没有再打理了。</p>
<p>不过经过这段时间的反思后，对很多事情的看法也变了。</p>
<p>8月份，我花了一个月左右的时间，旅行、和各种有趣的人交流。<br>旅行回来后，我花了很多时间阅读思考，题材涉及职业规划、个人成长等。中途也兼职晚上去教学生功课，主要是英语和数学哈。和学生一起的时光特别愉快。不过我知道，我还有我自己的职业目标。</p>
<p>这段时间我坚持早起、运动、每天晚上写日记、每天写一篇公众号文章后，发现自己也渐渐在内心里找回了以前的热情。</p>
<p>感谢这段时间家人的支持和理解，职场空白期不是一个很容易度过的时期，个中滋味就不在这里说了。<br>也感谢舒帆姐帮忙把我的社保挂靠在她的舞蹈培训中心，使我不用担心社保断保的问题。<br>还要感谢最近各种朋友推荐的工作机会。但是鉴于前段时间，处在职场调整期，不敢轻易应允，怕辜负各种期望。</p>
<p>网站也会继续更新了，希望我的分享可以帮到大家。<br>大家一起成长，一起进步，一起加油哈。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年三月以来，发生了很多事情，感觉这几个月自己就像坐在过山车上一样。&lt;br&gt;感情始终是白卷，母胎单身狗默哀三分钟。若职业发展顺利也罢，不料却屡屡受挫。&lt;br&gt;很长时间，这个个人网站也没有再打理了。&lt;/p&gt;
&lt;p&gt;不过经过这段时间的反思后，对很多事情的看法也变了。&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="个人感悟" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>Git常见命令小结</title>
    <link href="http://yoursite.com/2018/03/12/Git%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2018/03/12/Git常见命令小结/</id>
    <published>2018-03-12T07:47:10.000Z</published>
    <updated>2018-03-12T14:26:02.773Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>Git是目前世界上最先进的分布式版本控制系统。Git是Linux创始人Linus花了两周时间自己用C写的一个分布式版本控制系统。学习Git分布式版本控制系统，可以帮助我们告别手动管理多个“版本”的痛苦过去，拥抱版本控制的美好明天。</p>
<h3 id="二、安装Git"><a href="#二、安装Git" class="headerlink" title="二、安装Git"></a>二、安装Git</h3><p>具体安装教程请参考<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000" target="_blank" rel="external">廖雪峰老师的官方网站</a>。<br>安装完成后，需要设置Git的用户名和邮箱，在命令行输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;Your Name&quot;</div><div class="line">$ git config --global user.email &quot;email@example.com&quot;</div></pre></td></tr></table></figure></p>
<p>注意git config命令的–global参数，表示全局配置。</p>
<h3 id="三、创建版本库Repository"><a href="#三、创建版本库Repository" class="headerlink" title="三、创建版本库Repository"></a>三、创建版本库Repository</h3><h4 id="3-1-创建空目录："><a href="#3-1-创建空目录：" class="headerlink" title="3.1 创建空目录："></a>3.1 创建空目录：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir xxx		（创建指定的名称的目录）</div><div class="line">$ cd xxx	（切换工作目录）</div><div class="line">$ pwd   （显示当前目录）</div></pre></td></tr></table></figure>
<h4 id="3-2-初始化仓库"><a href="#3-2-初始化仓库" class="headerlink" title="3.2 初始化仓库"></a>3.2 初始化仓库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git init    （把当前目录变成Git可以管理的仓库）</div><div class="line">Initialized empty Git repository in /xxx/xxx/xxx/.git/</div></pre></td></tr></table></figure>
<p>初始化仓库后，当前目录下多了一个.git目录，这个目录是Git用来跟踪管理版本库的。如果没有看到.git目录，用ls-ah命令可以看见默认隐藏的目录。</p>
<h4 id="3-3-添加文件到版本库"><a href="#3-3-添加文件到版本库" class="headerlink" title="3.3 添加文件到版本库"></a>3.3 添加文件到版本库</h4><ol>
<li><p>git add命令告诉Git把文件添加到仓库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add &lt;file&gt;   (如git add readme.md)</div></pre></td></tr></table></figure>
</li>
<li><p>git commit命令告诉Git把文件提交到仓库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m &quot;xxx&quot;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p>
<p>注意commit可以一次提交很多文件，所以可以多次add不同的文件。</p>
<h3 id="四、查看日志"><a href="#四、查看日志" class="headerlink" title="四、查看日志"></a>四、查看日志</h3><h4 id="4-1-查看提交日志"><a href="#4-1-查看提交日志" class="headerlink" title="4.1 查看提交日志"></a>4.1 查看提交日志</h4><p>git log命令显示从最近到最远的提交日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git log</div></pre></td></tr></table></figure></p>
<p>精简日志，加上–pretty=oneline参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git log --pretty=oneline</div></pre></td></tr></table></figure></p>
<p>用git log可以查看提交历史，以便确定要回退到哪个版本。</p>
<h4 id="4-2-查看命令日志"><a href="#4-2-查看命令日志" class="headerlink" title="4.2 查看命令日志"></a>4.2 查看命令日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reflog</div></pre></td></tr></table></figure>
<p>$ git reflog命令用来记录每一次命令<br>用git reflog查看命令历史，以便确定要回到未来的哪个版本。</p>
<h3 id="五、版本回退"><a href="#五、版本回退" class="headerlink" title="五、版本回退"></a>五、版本回退</h3><p>在Git中，用HEAD表示当前版本，也就是最新的提交，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写成HEAD~100。</p>
<h4 id="5-1-当前版本回退到上一个版本"><a href="#5-1-当前版本回退到上一个版本" class="headerlink" title="5.1 当前版本回退到上一个版本"></a>5.1 当前版本回退到上一个版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard HEAD^</div></pre></td></tr></table></figure>
<h4 id="5-2-根据commit-id指定某个版本"><a href="#5-2-根据commit-id指定某个版本" class="headerlink" title="5.2 根据commit id指定某个版本"></a>5.2 根据commit id指定某个版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard commit_id	</div><div class="line">HEAD is now at commit_id xxx</div></pre></td></tr></table></figure>
<h3 id="六、管理文件操作"><a href="#六、管理文件操作" class="headerlink" title="六、管理文件操作"></a>六、管理文件操作</h3><h4 id="6-1-显示文件内容"><a href="#6-1-显示文件内容" class="headerlink" title="6.1 显示文件内容"></a>6.1 显示文件内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat filename</div></pre></td></tr></table></figure>
<h4 id="6-2-查看仓库状态"><a href="#6-2-查看仓库状态" class="headerlink" title="6.2 查看仓库状态"></a>6.2 查看仓库状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure>
<h4 id="6-3-查看工作区和版本库最新版本的区别"><a href="#6-3-查看工作区和版本库最新版本的区别" class="headerlink" title="6.3 查看工作区和版本库最新版本的区别"></a>6.3 查看工作区和版本库最新版本的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff HEAD -- &lt;file&gt;</div></pre></td></tr></table></figure>
<h4 id="6-4-撤销工作区修改"><a href="#6-4-撤销工作区修改" class="headerlink" title="6.4 撤销工作区修改 "></a>6.4 撤销工作区修改 <!-- ？？？ --></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -- &lt;file&gt;</div></pre></td></tr></table></figure>
<p>git checkout – <file>让文件回到最近一次git commit或git add时的状态。<br>命令中的<code>–</code>很重要，没有<code>–</code>，就变成了“切换到另一个分支”的命令。</file></p>
<h4 id="6-5-撤销暂存区修改"><a href="#6-5-撤销暂存区修改" class="headerlink" title="6.5 撤销暂存区修改"></a>6.5 撤销暂存区修改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset HEAD &lt;file&gt;</div></pre></td></tr></table></figure>
<p>把暂存区的修改撤销掉（unstage），重新放回工作区<br><!-- 小结：
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。 --></p>
<h4 id="6-6-删除文件"><a href="#6-6-删除文件" class="headerlink" title="6.6 删除文件"></a>6.6 删除文件</h4><p>删除工作区文件可以直接在文件管理器删除，或者用<code>rm</code>命令删除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm &lt;file&gt;</div></pre></td></tr></table></figure></p>
<p>工作区文件删除后，工作区和版本库就不一致了。<br>如果确定要从版本库删除文件，用命令<code>git rm</code>删掉，并且<code>git commit</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rm &lt;file&gt;</div></pre></td></tr></table></figure></p>
<p>如果想撤销工作区文件的删除，因为版本库里还有文件，所以可以很轻松地把误删的文件恢复到最新版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -- &lt;file&gt;</div></pre></td></tr></table></figure></p>
<p>git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。<br><!-- 小结
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。 --></p>
<h3 id="七、远程仓库"><a href="#七、远程仓库" class="headerlink" title="七、远程仓库"></a>七、远程仓库</h3><h4 id="7-1-GitHub设置"><a href="#7-1-GitHub设置" class="headerlink" title="7.1 GitHub设置"></a>7.1 GitHub设置</h4><h5 id="7-1-1-注册GitHub账号"><a href="#7-1-1-注册GitHub账号" class="headerlink" title="7.1.1 注册GitHub账号"></a>7.1.1 注册GitHub账号</h5><p>登录<a href="https://github.com" target="_blank" rel="external">GitHub</a>官网，注册GitHub账号。</p>
<h5 id="7-1-2-创建SSH-Key"><a href="#7-1-2-创建SSH-Key" class="headerlink" title="7.1.2 创建SSH Key"></a>7.1.2 创建SSH Key</h5><p>如果用户主目录没有.ssh目录，打开Shell（Windows下打开Git Bash），创建SSH Key：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</div></pre></td></tr></table></figure></p>
<p>按照默认设置完成后，在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对。注意，id_rsa是私钥，不能泄露出去，而id_rsa.pub是公钥，可以放心地告诉任何人。</p>
<h5 id="7-1-3-Github设置SSH-Key"><a href="#7-1-3-Github设置SSH-Key" class="headerlink" title="7.1.3 Github设置SSH Key"></a>7.1.3 Github设置SSH Key</h5><p>GitHub-Account settings-SSH Keys-Add SSH Key，在Key文本框里粘贴id_rsa.pub文件的内容。</p>
<h4 id="7-2-本地Git仓库添加远程库"><a href="#7-2-本地Git仓库添加远程库" class="headerlink" title="7.2 本地Git仓库添加远程库"></a>7.2 本地Git仓库添加远程库</h4><ol>
<li>GitHub-“Create a new repo</li>
<li><p>本地Git仓库下运行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com:username/repo_name.git</div></pre></td></tr></table></figure>
</li>
<li><p>将本地Git仓库的所有内容推送到远程库上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure>
</li>
</ol>
<p>注意：由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。命令简化如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure></p>
<!-- 小结
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改； -->
<h4 id="7-3-创建远程库并克隆到本地"><a href="#7-3-创建远程库并克隆到本地" class="headerlink" title="7.3 创建远程库并克隆到本地"></a>7.3 创建远程库并克隆到本地</h4><ol>
<li>登陆GitHub，创建一个新的仓库，名字叫repo_name，记得勾选勾选Initialize this repository with a README。</li>
<li>克隆一个本地库：$ git clone git@github.com:username/repo_name.git</li>
</ol>
<h3 id="八、分支管理"><a href="#八、分支管理" class="headerlink" title="八、分支管理"></a>八、分支管理</h3><h4 id="8-1-创建与合并分支"><a href="#8-1-创建与合并分支" class="headerlink" title="8.1 创建与合并分支"></a>8.1 创建与合并分支</h4><p>以dev分支为例</p>
<ol>
<li>创建dev分支，并切换到dev分支：<br>$ git checkout -b dev<br>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：<br>$ git branch dev<br>$ git checkout dev</li>
<li>查看当前分支：<br>$ git branch</li>
<li>dev分支操作，和master分支的操作是一样的。</li>
<li>切换回master分支：<br>$ git checkout master</li>
<li>把dev分支的工作成果合并到master分支上：<br>$ git merge dev<br>git merge命令用于合并指定分支到当前分支。</li>
<li>合并完成后，删除dev分支：<br>$ git branch -d dev</li>
<li>查看branch，此时只剩下master分支：<br>$ git branch</li>
</ol>
<h4 id="8-2-解决分支冲突"><a href="#8-2-解决分支冲突" class="headerlink" title="8.2 解决分支冲突"></a>8.2 解决分支冲突</h4><p>当Git无法自动合并分支时，并且出现如下提示：<br>Automatic merge failed; fix conflicts and then commit the result.<br>就必须首先解决冲突。解决冲突后，再提交，合并完成。<br>用git log –graph命令可以看到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git log --graph --pretty=oneline --abbrev-commit</div></pre></td></tr></table></figure></p>
<p>分支合并图缩略显示。</p>
<h4 id="8-3-普通模式合并分支"><a href="#8-3-普通模式合并分支" class="headerlink" title="8.3 普通模式合并分支"></a>8.3 普通模式合并分支</h4><p>合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge --no-ff -m &quot;版本说明&quot; 分支名</div></pre></td></tr></table></figure></p>
<p>–no-ff参数，表示禁用Fast forward</p>
<h4 id="8-4-“储藏”当前工作现场"><a href="#8-4-“储藏”当前工作现场" class="headerlink" title="8.4 “储藏”当前工作现场"></a>8.4 “储藏”当前工作现场</h4><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；<br>当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stash</div></pre></td></tr></table></figure></p>
<p>查看工作现场保存位置，用git stash list命令看看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stash list</div></pre></td></tr></table></figure></p>
<p>恢复工作现场：</p>
<p>是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git stash apply stash@&#123;0&#125;      恢复指定的stash</div><div class="line">$ git stash drop</div></pre></td></tr></table></figure></p>
<p>另一种方式是用git stash pop，恢复的同时把stash内容也删了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stash pop</div></pre></td></tr></table></figure></p>
<h4 id="8-5-Feature分支"><a href="#8-5-Feature分支" class="headerlink" title="8.5 Feature分支"></a>8.5 Feature分支</h4><p>开发一个新feature，最好新建一个分支；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b feature-xxx</div></pre></td></tr></table></figure></p>
<p>如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -D feature-xxx</div></pre></td></tr></table></figure></name></p>
<h4 id="8-6-多人协作"><a href="#8-6-多人协作" class="headerlink" title="8.6 多人协作"></a>8.6 多人协作</h4><p>查看远程库信息，用git remote：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote</div></pre></td></tr></table></figure></p>
<p>使用git remote -v显示更详细的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote -v；</div></pre></td></tr></table></figure></p>
<p>本地新建的分支如果不推送到远程，对其他人就是不可见的；<br>从本地推送分支，使用git push origin branch-name:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin branch-name</div></pre></td></tr></table></figure></p>
<p>如果推送失败，先用git pull抓取远程的新提交:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull</div></pre></td></tr></table></figure></p>
<p>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b branch-name origin/branch-name</div></pre></td></tr></table></figure></p>
<p>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin/branch-name:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch --set-upstream branch-name origin/branch-name</div></pre></td></tr></table></figure></p>
<p>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</p>
<h3 id="九、标签管理"><a href="#九、标签管理" class="headerlink" title="九、标签管理"></a>九、标签管理</h3><p>发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。<br>Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。</p>
<h4 id="9-1-创建标签"><a href="#9-1-创建标签" class="headerlink" title="9.1 创建标签"></a>9.1 创建标签</h4><p>命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag &lt;name&gt;</div></pre></td></tr></table></figure></name></p>
<p>命令git tag可以查看所有标签。</p>
<p>git show <tagname>查看标签信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git show &lt;tagname&gt;</div></pre></td></tr></table></figure></tagname></p>
<p>git tag -a <tagname> -m “标签说明”可以指定标签信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -a &lt;tagname&gt; -m &quot;标签说明&quot;</div></pre></td></tr></table></figure></tagname></p>
<p>-a指定标签名，-m指定说明文字</p>
<p>git tag -s <tagname> -m “标签说明”可以用PGP签名标签，<br>-s用私钥签名一个标签。</tagname></p>
<h4 id="9-2-操作标签"><a href="#9-2-操作标签" class="headerlink" title="9.2 操作标签"></a>9.2 操作标签</h4><p>命令git push origin <tagname>可以推送一个本地标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin &lt;tagname&gt;</div></pre></td></tr></table></figure></tagname></p>
<p>命令git push origin –tags可以推送全部未推送过的本地标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin --tags</div></pre></td></tr></table></figure></p>
<p>命令git tag -d <tagname>可以删除一个本地标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -d &lt;tagname&gt;</div></pre></td></tr></table></figure></tagname></p>
<p>命令git push origin :refs/tags/<tagname>可以删除一个远程标签。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin :refs/tags/&lt;tagname&gt;</div></pre></td></tr></table></figure></tagname></p>
<h3 id="十、参与GitHub开源项目"><a href="#十、参与GitHub开源项目" class="headerlink" title="十、参与GitHub开源项目"></a>十、参与GitHub开源项目</h3><p>在GitHub上，可以任意Fork开源仓库。如果在GitHub上有个感兴趣的开源项目，可以在它的项目主页点“Fork”，在自己的账号下克隆了一个开源项目的仓库。然后从自己的账号下clone：<br>git clone git@github.com:myusername/仓库名.git<br>注意：一定要从自己的账号下clone仓库，这样你才能推送修改。<br>如果你希望开源项目的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。<br>可以推送pull request给官方仓库来贡献代码。</p>
<h3 id="十一、更多"><a href="#十一、更多" class="headerlink" title="十一、更多"></a>十一、更多</h3><p>国内的Git托管服务——<a href="https://gitee.com/" target="_blank" rel="external">码云</a>。<br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137621280731812dec22ecc9b44f4b2ca1c680f181a5b000" target="_blank" rel="external">自定义Git</a><br><a href="https://git-for-windows.github.io/" target="_blank" rel="external">git for windows</a></p>
<p>参考资料：<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程-廖雪峰的官方网站</a><br>更详细的Git使用教程，请详见廖雪峰老师的官方网站。这里只是整理了廖雪峰老师Git使用教程里的常用命令。</p>
<!-- 
| 命令名        | 使用频率      | 命令作用    | 举例        | 备注     |
| ---------------------   |:-------------:| :---------: | :---------: |-------- :|
| git config --global user.name "Your Name"      | right-aligned | $1600       |             |          |
| git config --global user.email "email@example.com"      | centered      |   $12       |             |          |



|               |               |             |             |          |
|               |               |             |             |          | 


<!-- [Sublime]() -->
<!--  Git常见命令一览表 -->
<!-- 一首歌入门Git Markdown -->
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;Git是目前世界上最先进的分布式版本控制系统。Git是Linux创始人Linus花了两周时间自己用C写的一个分布式版本控制系
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>电脑多版本Python共存的方法</title>
    <link href="http://yoursite.com/2018/02/12/%E7%94%B5%E8%84%91%E5%AE%89%E8%A3%85%E5%A4%9A%E7%89%88%E6%9C%ACpython%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/02/12/电脑安装多版本python的方法/</id>
    <published>2018-02-12T07:47:10.000Z</published>
    <updated>2018-03-12T14:26:46.155Z</updated>
    
    <content type="html"><![CDATA[<p>常说一山不容二虎，但是通过一些小技巧，一电脑还是可以容二python的（一机可容二蛇，逃）。如果电脑里有多个不同版本的python，安装python虚拟环境经常会出现python版本混乱的情况。比如通过mkvirtualenv新建虚拟环境后，进入虚拟环境后，命令行输入python,结果发现当前虚拟环境的python版本不是自己要的。<br>网上查了常用的方法是修改python文件名，比如python2下的python.exe或pip.exe或virtualenv.exe或mkvirtualenv.bat等文件名改成python2.exe或pip2.exe或virtualenv2.exe或mkvirtualenv2.bat，python3同理。然后在命令行指定，比如基于python2的，就使用pip2 install xxx, mkvirtualenv2 xxx等。但是这样设置有点麻烦，而且有时虽然运行的是xx2,但是输入python验证后，发现还是基于python3的。<br>这里我来介绍一个命令行指明python安装路径来指定python版本的方法，来安装对应的虚拟环境。这种方法我个人用起来觉得非常方便，但是具体因人而异。</p>
<p>本文例子基于以下电脑配置参数：</p>
<p>操作系统：windows10 64位<br>python版本如下：<br> Python 2.7.12，安装路径：C:\Python27<br> Python 3.5.3，安装路径：C:\Users\Administrator\AppData\Local\Programs\Python\Python35-32</p>
<p>经常使用python的童鞋知道，如果我们安装python的时候勾选了Add python.exe to path，则环境变量里面已经有python安装路径了。如果我们安装python的时候没有勾选Add python.exe to path，我们需要把python安装路径添加到环境变量。这是使用命令行运行pythond的前提, 否则会报错。<br>这样找到python安装路径的方法就非常简单了，直接打开环境变量，复制里面的python路径就可以了。</p>
<p>假设我们要安装两个python虚拟环境，一个基于python2的虚拟环境apple2, 一个基于python3的虚拟环境apple3</p>
<h3 id="基于python2的虚拟环境"><a href="#基于python2的虚拟环境" class="headerlink" title="基于python2的虚拟环境"></a>基于python2的虚拟环境</h3><p>打开cmd，输入mkvirtualenv –python C:\Python27\python.exe apple2，然后再新建的虚拟环境下运行python,查看对应的python版本。运行结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">C:\Users\Administrator&gt;mkvirtualenv --python C:\Python27\python.exe apple2</div><div class="line">Running virtualenv with interpreter C:\Python27\python.exe</div><div class="line">New python executable <span class="keyword">in</span> C:\Users\Administrator\Envs\apple2\Scripts\python.exe</div><div class="line">Installing setuptools, pip, wheel...done.</div><div class="line"></div><div class="line">(apple2) C:\Users\Administrator&gt;python</div><div class="line">Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:24:40) [MSC v.1500 64 bit (AMD64)] on win32</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">&gt;&gt;&gt; ^Z</div></pre></td></tr></table></figure></p>
<h3 id="基于python3的虚拟环境"><a href="#基于python3的虚拟环境" class="headerlink" title="基于python3的虚拟环境"></a>基于python3的虚拟环境</h3><p>（注意这里因为之前要安装一个只支持32位python的python第三方包，所以我安装python3的版本是32位的。）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">C:\Users\Administrator&gt;mkvirtualenv --python C:\Users\Administrator\AppData\Local\Programs\Python\Python35-32\python.exe apple3</div><div class="line">Running virtualenv with interpreter C:\Users\Administrator\AppData\Local\Programs\Python\Python35-32\python.exe</div><div class="line">Using base prefix <span class="string">'C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35-32'</span></div><div class="line">New python executable <span class="keyword">in</span> C:\Users\Administrator\Envs\apple3\Scripts\python.exe</div><div class="line">Installing setuptools, pip, wheel...done.</div><div class="line"></div><div class="line">(apple3) C:\Users\Administrator&gt;python</div><div class="line">Python 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 15:51:26) [MSC v.1900 32 bit (Intel)] on win32</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">&gt;&gt;&gt; ^Z</div></pre></td></tr></table></figure></p>
<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p>从上面看出创建不同版本的python虚拟环境的命令如下：<br>mkvirtualenv –python xxx(python安装路径\python.exe) 虚拟环境名</p>
<p>也可以写成如下，亲测有效：<br>mkvirtualenv –python==xxx(python安装路径\python.exe) 虚拟环境名</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常说一山不容二虎，但是通过一些小技巧，一电脑还是可以容二python的（一机可容二蛇，逃）。如果电脑里有多个不同版本的python，安装python虚拟环境经常会出现python版本混乱的情况。比如通过mkvirtualenv新建虚拟环境后，进入虚拟环境后，命令行输入pyt
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="版本" scheme="http://yoursite.com/tags/%E7%89%88%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>科学上网，开阔眼界</title>
    <link href="http://yoursite.com/2017/12/12/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%EF%BC%8C%E5%BC%80%E9%98%94%E7%9C%BC%E7%95%8C/"/>
    <id>http://yoursite.com/2017/12/12/科学上网，开阔眼界/</id>
    <published>2017-12-12T13:57:38.000Z</published>
    <updated>2018-03-12T14:27:13.755Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://bwh1.net/clientarea.php" target="_blank" rel="external">Bandwagon Host</a></p>
<p>VPS Hosting - Services - My Services - KiwiVM Control Panel - Shadowsocks Server - Install Shadowsocks Server - Go back(when Completed) - Remember your encryption/port/passaprd for Shadowsocks.</p>
<p>启动系统代理 - 全局模式</p>
<p>好了，可以科学上网，开阔眼界了。</p>
<p>下次有空折腾下多用户的设置，今天太晚了，好困啊。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://bwh1.net/clientarea.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bandwagon Host&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;VPS Hosting - Services - My Services -
    
    </summary>
    
      <category term="科学上网" scheme="http://yoursite.com/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    
      <category term="科学上网" scheme="http://yoursite.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>为元组元素命名提高程序可读性</title>
    <link href="http://yoursite.com/2017/12/01/%E4%B8%BA%E5%85%83%E7%BB%84%E5%85%83%E7%B4%A0%E5%91%BD%E5%90%8D%E6%8F%90%E9%AB%98%E7%A8%8B%E5%BA%8F%E5%8F%AF%E8%AF%BB%E6%80%A7/"/>
    <id>http://yoursite.com/2017/12/01/为元组元素命名提高程序可读性/</id>
    <published>2017-12-01T13:23:01.000Z</published>
    <updated>2018-10-30T03:12:04.037Z</updated>
    
    <content type="html"><![CDATA[<p>数据格式固定，意味字段总数是确定的，字段相对位置也是确定的。这时可以使用元组存储信息。元组优势存储空间小，访问速度快。但是使用元组的时候会遇到一些问题，访问是，使用引索index访问，大量引索降低程序可读性。</p>
<p>student = (‘Jim’, 16, ‘male’, ‘jim8721@gmail.com’)</p>
<h1 id="name"><a href="#name" class="headerlink" title="name"></a>name</h1><p>print student[0]</p>
<h1 id="age"><a href="#age" class="headerlink" title="age"></a>age</h1><p>if student[1] &gt;= 18:<br>…</p>
<h1 id="sex"><a href="#sex" class="headerlink" title="sex"></a>sex</h1><p>if student[2] == ‘male’:<br>…</p>
<p>程序将大量充斥着0 1 2 3这样的一些引索值，这些数字对于程序的维护是不利的，因为很难一眼就看出这些0 1 2代表是什么含义</p>
<p>C语言<br>宏定义</p>
<p>#define NAME 0</p>
<p>#define AGE 1</p>
<p>c语言的枚举类型<br>enum Studnet {<br>    NAME,<br>    AGE,<br>    SEX<br>}<br>它们分别等于0 1 2这些数字</p>
<p>方案1： 定义类似于其他语言的枚举类型，也就是定义一系列数值常量。<br>方案2：使用标准库中collections.nametuple替代内置tuple</p>
<p>方案1： 定义类似于其他语言的枚举类型，也就是定义一系列数值常量。</p>
<p>python没有真正的枚举类型，但是我们可以定义一些常量，访问元组的字段就可以用这些常量了。<br>NAME = 0<br>AGE = 1<br>SEX = 2<br>EMAIL = 3</p>
<p>student = (‘Jim’, 16, ‘male’, ‘jim8721@gmail.com’)</p>
<h1 id="name-1"><a href="#name-1" class="headerlink" title="name"></a>name</h1><p>print student[NAME]</p>
<h1 id="age-1"><a href="#age-1" class="headerlink" title="age"></a>age</h1><p>if student[AGE] &gt;= 18:<br>…</p>
<h1 id="sex-1"><a href="#sex-1" class="headerlink" title="sex"></a>sex</h1><p>if student[SEX] == ‘male’:<br>…</p>
<p>列表拆包的形式：<br>NAME. AGE, SEX, EMAIL = xrange(4)</p>
<p>student = (‘Jim’, 16, ‘male’, ‘jim8721@gmail.com’)</p>
<h1 id="name-2"><a href="#name-2" class="headerlink" title="name"></a>name</h1><p>print student[NAME]</p>
<h1 id="age-2"><a href="#age-2" class="headerlink" title="age"></a>age</h1><p>if student[AGE] &gt;= 18:<br>…</p>
<h1 id="sex-2"><a href="#sex-2" class="headerlink" title="sex"></a>sex</h1><p>if student[SEX] == ‘male’:<br>…<br>会分别把0 1 2 3赋给这些变量</p>
<p>方案2：使用标准库中collections.nametuple替代内置tuple</p>
<p>from collections import nametuple</p>
<p>Student = nametuple(‘Student’, [‘name’, ‘age’, ‘sex’, ‘email’])</p>
<p>nametuple函数能返回一个内置元组的子类<br>第一个参数，新创建的类起个名字<br>然后传入每个引索的名字<br>相当于类的工厂</p>
<p>s就是一个命名的元组</p>
<p>s = Student(‘Jim’, 16, ‘male’, ‘jim@gmail.com’)<br>s<br>Student(name=’Jim’, age=16, sex=’male’, email=’jim@gmail.com’)</p>
<p>位置传参</p>
<p>还可以使用关键字传参<br>s2 = Student(name=’Jim’, age=16, sex=’male’, email=’jim@gmail.com’)</p>
<p>s.name<br>s.age<br>s.sex</p>
<p>我们以类对象的形式访问元组，整个开销仅比普通元组大了一点点</p>
<p>并且s是内置元组的子类</p>
<p>任何使用普通元组的地方都可以使用nametuple</p>
<blockquote>
<blockquote>
<blockquote>
<p>from collections import nametuple<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>ImportError: cannot import name nametuple<br>????</module></stdin></p>
</blockquote>
</blockquote>
</blockquote>
<p>这是怎么回事？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据格式固定，意味字段总数是确定的，字段相对位置也是确定的。这时可以使用元组存储信息。元组优势存储空间小，访问速度快。但是使用元组的时候会遇到一些问题，访问是，使用引索index访问，大量引索降低程序可读性。&lt;/p&gt;
&lt;p&gt;student = (‘Jim’, 16, ‘ma
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>列表字典集合中根据条件筛选数据</title>
    <link href="http://yoursite.com/2017/11/30/%E5%88%97%E8%A1%A8%E5%AD%97%E5%85%B8%E9%9B%86%E5%90%88%E4%B8%AD%E6%A0%B9%E6%8D%AE%E6%9D%A1%E4%BB%B6%E7%AD%9B%E9%80%89%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2017/11/30/列表字典集合中根据条件筛选数据/</id>
    <published>2017-11-30T13:29:16.000Z</published>
    <updated>2018-10-30T03:12:07.863Z</updated>
    
    <content type="html"><![CDATA[<p>实际案例；</p>
<ol>
<li>过滤掉列表[3,9,-1,10,20,-2…中的负数]</li>
<li>筛出字典{‘Lilei’:79, ‘Jim’:88, ‘Lucy’:92…}中值高于90的项</li>
<li>筛出集合{77，89，32，20…}中能被3整除的元素</li>
</ol>
<p>通用做法=迭代：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">data = [1, 5, -3, -2, 6, 0 , 9]</div><div class="line"></div><div class="line">res = []</div><div class="line">for x in data:  依次迭代列表中每个项</div><div class="line">	if x &gt;= 0:	条件判断</div><div class="line">		res.append(x)</div><div class="line">print res</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">函数式编程 解析等</div><div class="line"></div><div class="line">解决方案：</div><div class="line">## 列表</div><div class="line">#### filter函数 filter(lambda x: x &gt;=0, data)</div><div class="line">#### 列表解析 [x for x in data if x &gt;= 0]</div><div class="line"></div><div class="line">## 字典</div><div class="line">#### 字典解析 &#123;k:v for k,v in d.iteritems() if v &gt; 90&#125;</div><div class="line"></div><div class="line">## 集合</div><div class="line">#### 集合解析 &#123;x for x in s if x % 3 == 0&#125;</div><div class="line"></div><div class="line">生成随机列表 </div><div class="line">from random import randint</div><div class="line">data = [randint(-10, 10) for _ in xrange(10)]</div><div class="line">过滤掉其中负数</div><div class="line"></div><div class="line">### filter函数</div><div class="line">filter(lambda x: x &gt;= 0, data)</div></pre></td></tr></table></figure></p>
<p>C:\Windows\system32&gt;python2<br>Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:24:40) [MSC v.1500 64 bit (AMD64)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.</p>
<blockquote>
<blockquote>
<blockquote>
<p>from random import randint<br>data = [randint(-10, 10) for _ in xrange(10)]<br>data<br>[-1, 8, 9, 9, 4, 1, -9, 7, -7, -1]<br>filter?<br>  File “<stdin>“, line 1<br>    filter?<br>          ^<br>SyntaxError: invalid syntax<br>filter</stdin></p>
<p><built-in function="" filter=""><br>help(filter)<br>Help on built-in function filter in module <strong>builtin</strong>:</built-in></p>
</blockquote>
</blockquote>
</blockquote>
<p>filter(…)<br>    filter(function or None, sequence) -&gt; list, tuple, or string</p>
<pre><code>Return those items of sequence for which function(item) is true.  If
function is None, return the items that are true.  If sequence is a tuple
or string, return the same type, else return a list.
</code></pre><blockquote>
<blockquote>
<blockquote>
<p>filter(lambda x: x &gt;= 0, data)<br>[8, 9, 9, 4, 1, 7]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">### 列表解析</div></pre></td></tr></table></figure>
<p>[x for x in data if x &gt;= 0]<br>[8, 9, 9, 4, 1, 7]<br>```</p>
</blockquote>
</blockquote>
</blockquote>
<p>filter和列表解析对比</p>
<p>timeit filter(lambda x:x &gt;= 0, data)</p>
<blockquote>
<blockquote>
<blockquote>
<p>timeit filter(lambda x: x &gt;= 0, data)<br>  File “<stdin>“, line 1<br>    timeit filter(lambda x: x &gt;= 0, data)<br>                ^<br>SyntaxError: invalid syntax<br>timeit<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>NameError: name ‘timeit’ is not defined<br>help(timeit)<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>NameError: name ‘timeit’ is not defined<br>import timeit<br>timeit filter(lambda x: x &gt;= 0, data)<br>  File “<stdin>“, line 1<br>    timeit filter(lambda x: x &gt;= 0, data)<br>                ^<br>SyntaxError: invalid syntax<br>timeit(‘filter(lambda x: x &gt;= 0, data)’)<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>TypeError: ‘module’ object is not callable<br>from timeit import timeit<br>timeit(‘filter(lambda x: x &gt;= 0, data)’)<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>  File “C:\Python27\lib\timeit.py”, line 237, in timeit<br>    return Timer(stmt, setup, timer).timeit(number)<br>  File “C:\Python27\lib\timeit.py”, line 202, in timeit<br>    timing = self.inner(it, self.timer)<br>  File “<timeit-src>“, line 6, in inner<br>NameError: global name ‘data’ is not defined<br>from random import randint<br>data = [randint(-10, 10) for <em> in xrange(10)]<br>data<br>[-10, -6, 8, 2, -6, -1, -3, -6, -9, -7]<br>filter(lambda x: x &gt;= 0, data)<br>[8, 2]<br>from timeit import timeit<br>timeit(‘filter(lambda x: x &gt;= 0, data)’)<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>  File “C:\Python27\lib\timeit.py”, line 237, in timeit<br>    return Timer(stmt, setup, timer).timeit(number)<br>  File “C:\Python27\lib\timeit.py”, line 202, in timeit<br>    timing = self.inner(it, self.timer)<br>  File “<timeit-src>“, line 6, in inner<br>NameError: global name ‘data’ is not defined<br>from timeit import timeit<br>from random import randint<br>timeit(‘filter(lambda x: x &gt;= 0, data=[randint(-10, 10) for </timeit-src></module></stdin></em> in xrange(10)])’)<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>  File “C:\Python27\lib\timeit.py”, line 237, in timeit<br>    return Timer(stmt, setup, timer).timeit(number)<br>  File “C:\Python27\lib\timeit.py”, line 202, in timeit<br>    timing = self.inner(it, self.timer)<br>  File “<timeit-src>“, line 6, in inner<br>NameError: global name ‘randint’ is not defined<br>timeit filter(lambda x:x &gt;= 0, [-1, 8, 9, 9, 4, 1, -9, 7, -7, -1])<br>  File “<stdin>“, line 1<br>    timeit filter(lambda x:x &gt;= 0, [-1, 8, 9, 9, 4, 1, -9, 7, -7, -1])<br>                ^<br>SyntaxError: invalid syntax<br>timeit(‘filter(lambda x: x &gt;= 0, [-1, 8, 9, 9, 4, 1, -9, 7, -7, -1])’)<br>4.256596223743941</stdin></timeit-src></module></stdin></timeit-src></module></stdin></module></stdin></stdin></module></stdin></module></stdin></stdin></p>
<p>timeit(‘[x for x in [-1, 8, 9, 9, 4, 1, -9, 7, -7, -1] if x &gt;= 0]’)<br>2.2746409958225513</p>
</blockquote>
</blockquote>
</blockquote>
<p>通常认为列表解析更快一点，首选也是列表解析<br>这两种方式都远快于迭代的方式</p>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>d = {x：randint(60, 100) for x in xrange(1, 21)}</p>
<blockquote>
<blockquote>
<blockquote>
<p>from random import randint<br>d = {x：randint(60, 100) for x in xrange(1, 21)}<br>  File “<stdin>“, line 1<br>    d = {x：randint(60, 100) for x in xrange(1, 21)}<br>          ^<br>SyntaxError: invalid syntax<br>d = {x: randint(60, 100) for x in xrange(1, 21)}<br>d<br>{1: 67, 2: 87, 3: 79, 4: 76, 5: 78, 6: 61, 7: 75, 8: 97, 9: 83, 10: 71, 11: 94, 12: 87, 13: 65, 14: 88, 15: 90, 16: 91, 17: 76, 18: 73, 19: 67, 20: 77}</stdin></p>
</blockquote>
</blockquote>
</blockquote>
<p>{k: v for k, v in d.iteritems() if v &gt; 90}</p>
<blockquote>
<blockquote>
<blockquote>
<p>from random import randint<br>d = {x：randint(60, 100) for x in xrange(1, 21)}<br>  File “<stdin>“, line 1<br>    d = {x：randint(60, 100) for x in xrange(1, 21)}<br>          ^<br>SyntaxError: invalid syntax<br>d = {x: randint(60, 100) for x in xrange(1, 21)}<br>d<br>{1: 67, 2: 87, 3: 79, 4: 76, 5: 78, 6: 61, 7: 75, 8: 97, 9: 83, 10: 71, 11: 94, 12: 87, 13: 65, 14: 88, 15: 90, 16: 91, 17: 76, 18: 73, 19: 67, 20: 77}<br>{k: v for k, v in d.iteritems() if v &gt; 90}<br>{8: 97, 16: 91, 11: 94}</stdin></p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>data转换成集合<br>s = set(data)<br>集合解析类似字典解析<br>{x for x in s if x % 3 == 0}</p>
<blockquote>
<blockquote>
<blockquote>
<p>from random import randint<br>data = [randint(-10, 10) for _ in xrange(10)]<br>data<br>[-8, -6, 6, -3, 10, -10, 8, -5, 2, 9]<br>s = set(data)<br>{for x in s if x % 3 == 0}<br>  File “<stdin>“, line 1<br>    {for x in s if x % 3 == 0}<br>       ^<br>SyntaxError: invalid syntax<br>{x for x in s if x % 3 == 0}<br>set([9, -6, -3, 6])</stdin></p>
</blockquote>
</blockquote>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实际案例；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;过滤掉列表[3,9,-1,10,20,-2…中的负数]&lt;/li&gt;
&lt;li&gt;筛出字典{‘Lilei’:79, ‘Jim’:88, ‘Lucy’:92…}中值高于90的项&lt;/li&gt;
&lt;li&gt;筛出集合{77，89，32，20…}中能被3整除的
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>SS in Ubuntu14.04</title>
    <link href="http://yoursite.com/2017/10/20/SS%20in%20Ubuntu14.04/"/>
    <id>http://yoursite.com/2017/10/20/SS in Ubuntu14.04/</id>
    <published>2017-10-20T14:33:57.000Z</published>
    <updated>2017-10-20T14:39:10.542Z</updated>
    
    <content type="html"><![CDATA[<p>To set ss in your computer, please follow below steps:<br>First register in <a href="http://banwagong.cn/" target="_blank" rel="external">http://banwagong.cn/</a> and select and create an account.<br>Details: <a href="http://blog.csdn.net/win_turn/article/details/51559867" target="_blank" rel="external">http://blog.csdn.net/win_turn/article/details/51559867</a></p>
<p>After set up your ss, please follow below steps to create one in your computer(My computer is Ubuntu14.04):</p>
<p>Installation:<br>sudo apt-get update<br>sudo apt-get install python-pip<br>sudo apt-get install python-setuptools m2crypto</p>
<p>pip install shadowsocks<br>(or sudo pip install sxxxxxxxxxs)</p>
<p>Download:<br>download sxxxxxxxxxs.json file from email attachment to your computer  example: /home/nana/Documents/sxxxxxxxxxs.json</p>
<p>SwitchyOmega Setting:<br>Visit <a href="https://pan.baidu.com/s/1gfHupSR" target="_blank" rel="external">https://pan.baidu.com/s/1gfHupSR</a> and download SwitchyOmega plugin;<br>Visit chrome://extensions/ in your Chrome browser and drag SwitchyOmega plugin to your extensions;</p>
<p>Click proxy in the left sidebar and make sure below setting is applied:<br>Protocol: SOCKS5<br>Server: 127.0.0.1<br>Port: 1080</p>
<p>And click Apply Changes</p>
<p>Auto Switch:<br>Click the SwitchyOmega plugin in your browser and make sure it’s auto switch.</p>
<p>Startup in your terminal:<br>sslocal -c /xxx/xxx/xxx/sxxxxxxxxxs.json<br>example: sslocal -c /home/nana/Documents/sxxxxxxxxxs.json</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;To set ss in your computer, please follow below steps:&lt;br&gt;First register in &lt;a href=&quot;http://banwagong.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;
    
    </summary>
    
      <category term="Ubuntu" scheme="http://yoursite.com/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu14.04,nginx,uwsgi部署django项目</title>
    <link href="http://yoursite.com/2017/10/14/Ubuntu14.04%20nginx%20uwsigi%E9%83%A8%E7%BD%B2django%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2017/10/14/Ubuntu14.04 nginx uwsigi部署django项目/</id>
    <published>2017-10-14T09:52:06.000Z</published>
    <updated>2017-10-16T14:33:24.993Z</updated>
    
    <content type="html"><![CDATA[<p>自从我这Windows党在配置Ubuntu14.04开发环境的时候，把Ubuntu系统折腾奔溃了以后（千万不要手贱重装Ubuntu14.04的python, 升级或者多python共存都可以，就是不要把默认的卸载了重装，活生生的教训摆在眼前）。我就暗下决心要在家用虚拟机装个Ubuntu14.04好好折腾。<br>趁着周末，抽出了几个小时，折腾了下如何用Ubuntu14.04,nginx,uwsgi部署django项目。中间遇到了几个坑。幸好这几个坑都没有很深，看来平时要多折腾多部署。<br>今晚有点晚了，博客内容有点乱，下次复习部署的过程再把博客细节完善好。</p>
<h2 id="1-下载虚拟机和Ubuntu"><a href="#1-下载虚拟机和Ubuntu" class="headerlink" title="1.下载虚拟机和Ubuntu"></a>1.下载虚拟机和Ubuntu</h2><h3 id="1-1-下载Ubuntu14-04"><a href="#1-1-下载Ubuntu14-04" class="headerlink" title="1.1 下载Ubuntu14.04"></a>1.1 下载Ubuntu14.04</h3><p><a href="http://releases.ubuntu.com/14.04/" target="_blank" rel="external">Ubuntu14.04官网下载</a><br>ubuntu-14.04.5-desktop-amd64.iso </p>
<h3 id="1-2-下载虚拟机"><a href="#1-2-下载虚拟机" class="headerlink" title="1.2 下载虚拟机"></a>1.2 下载虚拟机</h3><p>下载虚拟机VM Workstation 14<br><!-- (密匙:FF31KAHZD1H8ETZ8WWEZWUUVAs) --><br><!-- ubuntu14
nana
8.......n. --></p>
<p>虚拟机名称：ubuntu14</p>
<p>虚拟磁盘存储单个文件</p>
<h2 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2.安装nginx"></a>2.安装nginx</h2><!-- 安装mysql
mysql密码

进入mysql的命令

mysql的连接配置



记住sudo的命令

i 键 编辑模式

Ubuntu14.04 terminal添加右键
sudo apt-get install nautilus-open-terminal
http://blog.csdn.net/jk38687587/article/details/52103005
亲测有效 记得要重启系统才能生效 -->
<p>sudo apt-get install nginx  安装nginx<br>ps aux|grep nginx 查看进程是否启动</p>
<!-- ip 192.168.77.128 -->
<p>ifconfig查看IP地址，浏览器打开<br>Welcome to nginx!欢迎界面<br>安装成功！</p>
<h2 id="3-安装mysql"><a href="#3-安装mysql" class="headerlink" title="3.安装mysql"></a>3.安装mysql</h2><p>sudo apt-get install mysql-server<br>提示输入mysql密码<br>安装完成会自动启动mysql-server<br>ps aux|grep mysql 查看进程是否启动   有个进程叫/usr/sbin/mysqld，就是mysql的server<br>进入mysql   mysql -u root -p<br>show databases;  记得分号</p>
<p>vim - gnome 安装<br>sudo vim /etc/mysql/my.cnf   注意这里是my.cnf文件了<br>mysql的ip绑定  bind-address<br>i 进入编辑模式<br>bind-address            = 127.0.0.1<br>更改为：bind-address            = 0.0.0.0  就可以通过IP地址来连接我们的mysql<br>这里更改只是为了windows连接进来，真正部署尽量用127.0.0.1，这样就不会让我们的端口暴露出来。<br>esc退出编辑模式，按shift加冒号，wq退出并保存<br>配置文件修改完后，重启mysql<br>sudo service mysql restart<br>mysql重启成功</p>
<p>ifconfig查看ip地址<br>192.168.77.128<br>navicat 主机名或ip地址填写ip地址<br>连接测试  1130 - Host ‘192.168.77.128’ is not allowed to connect to this MySQL server<br>默认mysql是只允许本地连接</p>
<p>mysql -h 192.168.77.128 -u root -p<br>ERROR 1130 (HY000): Host ‘192.168.77.128’ is not allowed to connect to this MySQL server<br>用host连接也是不允许的</p>
<p>修改配置让所有ip地址都可以连接进来呢？<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root’@’192.168.77.128’ IDENTIFIED BY ‘8xxxxxxxxn’ WITH GRANT OPTION;<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root’@’%’ IDENTIFIED BY ‘8xxxxxxxxn’ WITH GRANT OPTION;<br><em>.</em>-指的是所有表 这里也可以指明某张表<br>% 所有IP都可以访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">nana@ubuntu:~/Music$ mysql -u root -p</div><div class="line">Enter password: </div><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 39</div><div class="line">Server version: 5.5.57-0ubuntu0.14.04.1 (Ubuntu)</div><div class="line"></div><div class="line">Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</div><div class="line"></div><div class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;8xxxxxxxxn&apos; WITH GRANT OPTION;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></p>
<p>生效了</p>
<p>还需要刷新权限<br>mysql&gt; FLUSH PRIVILEGES;<br>Query OK, 0 rows affected (0.00 sec)</p>
<p>连接测试-连接成功<br>这样就能通过主机的navicat去连接虚拟机上的数据库了</p>
<p>新建数据库</p>
<p>完成数据库的连接配置</p>
<p>Mysql配置完成</p>
<h2 id="4-安装虚拟环境"><a href="#4-安装虚拟环境" class="headerlink" title="4.安装虚拟环境"></a>4.安装虚拟环境</h2><p>不管开发还是生产环境都尽量用虚拟环境来做<br>nana@ubuntu:~/Music$ pip install virtualenv<br>程序“pip”尚未安装。 您可以使用以下命令安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python-pip</div><div class="line">nana@ubuntu:~/Music$ sudo apt-get install python-pip</div><div class="line">nana@ubuntu:~/Music$ pip install virtualenv</div><div class="line">Downloading/unpacking virtualenv</div><div class="line">  Downloading virtualenv-15.1.0-py2.py3-none-any.whl (1.8MB): 1.8MB downloaded</div><div class="line">Installing collected packages: virtualenv</div><div class="line">Cleaning up...</div><div class="line">Exception:</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;/usr/lib/python2.7/dist-packages/pip/basecommand.py&quot;, line 122, in main</div><div class="line">    status = self.run(options, args)</div><div class="line">  File &quot;/usr/lib/python2.7/dist-packages/pip/commands/install.py&quot;, line 283, in run</div><div class="line">    requirement_set.install(install_options, global_options, root=options.root_path)</div><div class="line">  File &quot;/usr/lib/python2.7/dist-packages/pip/req.py&quot;, line 1436, in install</div><div class="line">    requirement.install(install_options, global_options, *args, **kwargs)</div><div class="line">  File &quot;/usr/lib/python2.7/dist-packages/pip/req.py&quot;, line 672, in install</div><div class="line">    self.move_wheel_files(self.source_dir, root=root)</div><div class="line">  File &quot;/usr/lib/python2.7/dist-packages/pip/req.py&quot;, line 902, in move_wheel_files</div><div class="line">    pycompile=self.pycompile,</div><div class="line">  File &quot;/usr/lib/python2.7/dist-packages/pip/wheel.py&quot;, line 206, in move_wheel_files</div><div class="line">    clobber(source, lib_dir, True)</div><div class="line">  File &quot;/usr/lib/python2.7/dist-packages/pip/wheel.py&quot;, line 193, in clobber</div><div class="line">    os.makedirs(destsubdir)</div><div class="line">  File &quot;/usr/lib/python2.7/os.py&quot;, line 157, in makedirs</div><div class="line">    mkdir(name, mode)</div><div class="line">OSError: [Errno 13] Permission denied: &apos;/usr/local/lib/python2.7/dist-packages/virtualenv-15.1.0.dist-info&apos;</div><div class="line"></div><div class="line">Storing debug log for failure in /home/nana/.pip/pip.log</div></pre></td></tr></table></figure></p>
<p>安装虚拟环境报错<br>命令前面加sudo，问题解决了<br>sudo pip install virtualenv</p>
<p>sudo pip install virtualenvwrapper<br>安装完virtualenvwrapper之后，实际上workon命令是不能用的<br>需要编辑一个文件<br>主目录下面有个bashrc文件，编辑这个文件：<br>vim ~/.bashrc<br>export WORKON_HOME=$HOME/.virtualenvs<br>source /home/nana/.local/bin/virtualenvwrapper.sh<br>（WORKON_HOME virtualenvwrapper集中保存虚拟环境的路径  凡是通过mkvirtualenv命令创建的虚拟环境都会放到这里来）</p>
<p>nana@ubuntu:~/Music$ source ~/.bashrc<br>bash: /home/nana/.local/bin/virtualenvwrapper.sh: 没有那个文件或目录<br>nana@ubuntu:~/Music$ vim ~/.bashrc<br>nana@ubuntu:~/Music$ source ~/.bashrc<br>bash: /home/nana/.local/usr/bin/virtualenvwrapper.sh: 没有那个文件或目录</p>
<p>export WORKON_HOME=$HOME/.virtualenvs<br>source /usr/local/bin/virtualenvwrapper.sh<br>改成这样，注意Ubuntu14.04这里要这样写<br><a href="http://blog.csdn.net/yilovexing/article/details/72961594" target="_blank" rel="external">http://blog.csdn.net/yilovexing/article/details/72961594</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">nana@ubuntu:~/Music$ vim ~/.bashrc</div><div class="line">nana@ubuntu:~/Music$ source ~/.bashrc</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/premkproject</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/postmkproject</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/initialize</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/premkvirtualenv</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/postmkvirtualenv</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/prermvirtualenv</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/postrmvirtualenv</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/predeactivate</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/postdeactivate</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/preactivate</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/postactivate</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/get_env_details</div><div class="line">nana@ubuntu:~/Music$ workon</div><div class="line">nana@ubuntu:~/Music$ </div><div class="line"></div><div class="line">nana@ubuntu:~/Music$ mkvirtualenv mol</div><div class="line">New python executable in /home/nana/.virtualenvs/mol/bin/python</div><div class="line">Installing setuptools, pip, wheel...done.</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/mol/bin/predeactivate</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/mol/bin/postdeactivate</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/mol/bin/preactivate</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/mol/bin/postactivate</div><div class="line">virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/mol/bin/get_env_details</div><div class="line">(mol) nana@ubuntu:~/Music$ pip list</div><div class="line">DEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning.</div><div class="line">pip (9.0.1)</div><div class="line">setuptools (36.6.0)</div><div class="line">wheel (0.30.0)</div></pre></td></tr></table></figure></p>
<p>虚拟环境创建完成了</p>
<h2 id="5-安装开发包"><a href="#5-安装开发包" class="headerlink" title="5.安装开发包"></a>5.安装开发包</h2><p>本地开发包导出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">C:\Windows\system32&gt;workon</div><div class="line"></div><div class="line">Pass a name to activate one of the following virtualenvs:</div><div class="line">==============================================================================</div><div class="line">article_spider</div><div class="line">FreshShop</div><div class="line">mol</div><div class="line">nanablog</div><div class="line">portus</div><div class="line">py22scrapy</div><div class="line">py2scrapy</div><div class="line">py3scrapy</div><div class="line">python_learning</div><div class="line">testvir2</div><div class="line">tp_supplier_platform</div><div class="line"></div><div class="line">C:\Windows\system32&gt;workon mol</div><div class="line">(mol) C:\Windows\System32&gt;pip list</div><div class="line">Package                Version</div><div class="line">---------------------- ---------</div><div class="line">certifi                2017.4.17</div><div class="line">chardet                3.0.4</div><div class="line">Django                 1.9.8</div><div class="line">django-crispy-forms    1.6.1</div><div class="line">django-formtools       2.0</div><div class="line">django-pure-pagination 0.3.0</div><div class="line">django-simple-captcha  0.4.6</div><div class="line">DjangoUeditor          1.8.143</div><div class="line">future                 0.16.0</div><div class="line">httplib2               0.9.2</div><div class="line">idna                   2.5</div><div class="line">MySQL-python           1.2.5</div><div class="line">olefile                0.44</div><div class="line">Pillow                 4.2.0</div><div class="line">pip                    9.0.1</div><div class="line">requests               2.18.1</div><div class="line">setuptools             36.0.1</div><div class="line">six                    1.10.0</div><div class="line">urllib3                1.21.1</div><div class="line">wheel                  0.29.0</div><div class="line">xlrd                   1.0.0</div><div class="line">XlsxWriter             0.9.8</div><div class="line">xlwt                   1.2.0</div><div class="line"></div><div class="line">(mol) C:\Windows\System32&gt;pip freeze &gt; requirements.txt</div><div class="line"></div><div class="line">(mol) C:\Windows\System32&gt;</div></pre></td></tr></table></figure></p>
<p>拷贝这个文件的内容到虚拟机的新建文件里</p>
<p>虚拟机里通过requriemtns来安装它<br>从这个文件读取，然后一个一个的开发包安装到虚拟环境里面</p>
<p>报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sh: 1: mysql_config: not found</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">  File &quot;/tmp/pip-build-O8vP9C/MySQL-python/setup.py&quot;, line 17, in &lt;module&gt;</div><div class="line">    metadata, options = get_config()</div><div class="line">  File &quot;setup_posix.py&quot;, line 43, in get_config</div><div class="line">    libs = mysql_config(&quot;libs_r&quot;)</div><div class="line">  File &quot;setup_posix.py&quot;, line 25, in mysql_config</div><div class="line">    raise EnvironmentError(&quot;%s not found&quot; % (mysql_config.path,))</div><div class="line">EnvironmentError: mysql_config not found</div></pre></td></tr></table></figure></p>
<p><a href="https://stackoverflow.com/questions/5178292/pip-install-mysql-python-fails-with-environmenterror-mysql-config-not-found" target="_blank" rel="external">https://stackoverflow.com/questions/5178292/pip-install-mysql-python-fails-with-environmenterror-mysql-config-not-found</a><br>sudo apt-get install libmysqlclient-dev</p>
<p>发现某个开发包安装比较慢，Ctrl C停掉整个过程，单独安装这个开发包，使用豆瓣源加速安装。<br><a href="http://pypi.douban.com/simple/" target="_blank" rel="external">http://pypi.douban.com/simple/</a><br><a href="https://www.douban.com/note/302711300/" target="_blank" rel="external">https://www.douban.com/note/302711300/</a><br>注意不要用https</p>
<p>用豆瓣源下载pillow失败 清华源也是同样的问题</p>
<p>正常安装先</p>
<p>Failed building wheel for MySQL-python<br>sudo apt-get install libmysqlclient-dev  发现我之前安装了这个，是不是可以暂时不安装呢<br>Failed building wheel for mysqlclient  又报错了，然后发现两个报错都提到这个fatal error: Python.h: 没有那个文件或目录<br>解决方法：sudo apt-get install python-dev</p>
<h2 id="6-启动项目"><a href="#6-启动项目" class="headerlink" title="6.启动项目"></a>6.启动项目</h2><p>查看项目是否可以启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">nana@ubuntu:~/Music/MOl$ python manage.py runserver</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;manage.py&quot;, line 8, in &lt;module&gt;</div><div class="line">    from django.core.management import execute_from_command_line</div><div class="line">ImportError: No module named django.core.management</div><div class="line">nana@ubuntu:~/Music/MOl$ workon</div><div class="line">mol</div><div class="line">nana@ubuntu:~/Music/MOl$ workon mol</div><div class="line">(mol) nana@ubuntu:~/Music/MOl$ python manage.py runserver</div><div class="line">Performing system checks...</div><div class="line"></div><div class="line">/home/nana/.virtualenvs/mol/local/lib/python2.7/site-packages/DjangoUeditor/urls.py:11: RemovedInDjango110Warning: django.conf.urls.patterns() is deprecated and will be removed in Django 1.10. Update your urlpatterns to be a list of django.conf.urls.url() instances instead.</div><div class="line">  url(r&apos;^controller/$&apos;,get_ueditor_controller)</div><div class="line"></div><div class="line">System check identified no issues (0 silenced).</div><div class="line"></div><div class="line">You have unapplied migrations; your app may not work properly until they are applied.</div><div class="line">Run &apos;python manage.py migrate&apos; to apply them.</div><div class="line"></div><div class="line">October 15, 2017 - 11:21:49</div><div class="line">Django version 1.9.8, using settings &apos;MOl.settings&apos;</div><div class="line">Starting development server at http://127.0.0.1:8000/</div><div class="line">Quit the server with CONTROL-C.</div><div class="line">^CUnhandled exception in thread started by &lt;function wrapper at 0x7fc6d4f4e320&gt;</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;/home/nana/.virtualenvs/mol/local/lib/python2.7/site-packages/django/utils/autoreload.py&quot;, line 234, in wrapper</div><div class="line">    filename = traceback.extract_tb(tb)[-1][0]</div><div class="line">TypeError: &apos;NoneType&apos; object is not callable</div><div class="line">(mol) nana@ubuntu:~/Music/MOl$ python manage.py makemigrations</div><div class="line">/home/nana/.virtualenvs/mol/local/lib/python2.7/site-packages/DjangoUeditor/urls.py:11: RemovedInDjango110Warning: django.conf.urls.patterns() is deprecated and will be removed in Django 1.10. Update your urlpatterns to be a list of django.conf.urls.url() instances instead.</div><div class="line">  url(r&apos;^controller/$&apos;,get_ueditor_controller)</div><div class="line"></div><div class="line">No changes detected</div><div class="line">(mol) nana@ubuntu:~/Music/MOl$ python manage.py migrate</div><div class="line">/home/nana/.virtualenvs/mol/local/lib/python2.7/site-packages/DjangoUeditor/urls.py:11: RemovedInDjango110Warning: django.conf.urls.patterns() is deprecated and will be removed in Django 1.10. Update your urlpatterns to be a list of django.conf.urls.url() instances instead.</div><div class="line">  url(r&apos;^controller/$&apos;,get_ueditor_controller)</div><div class="line"></div><div class="line">Operations to perform:</div><div class="line">  Apply all migrations: xadmin, users, courses, admin, sessions, auth, captcha, contenttypes, organization, operation</div><div class="line">Running migrations:</div><div class="line">  Rendering model states... DONE</div><div class="line">  Applying contenttypes.0001_initial... OK</div><div class="line">  Applying contenttypes.0002_remove_content_type_name... OK</div><div class="line">  Applying auth.0001_initial... OK</div><div class="line">  Applying auth.0002_alter_permission_name_max_length... OK</div><div class="line">  Applying auth.0003_alter_user_email_max_length... OK</div><div class="line">  Applying auth.0004_alter_user_username_opts... OK</div><div class="line">  Applying auth.0005_alter_user_last_login_null... OK</div><div class="line">  Applying auth.0006_require_contenttypes_0002... OK</div><div class="line">  Applying auth.0007_alter_validators_add_error_messages... OK</div><div class="line">  Applying users.0001_initial... OK</div><div class="line">  Applying admin.0001_initial... OK</div><div class="line">  Applying admin.0002_logentry_remove_auto_add... OK</div><div class="line">  Applying captcha.0001_initial... OK</div><div class="line">  Applying organization.0001_initial... OK</div><div class="line">  Applying organization.0002_auto_20170712_2240... OK</div><div class="line">  Applying organization.0003_auto_20170723_2037... OK</div><div class="line">  Applying organization.0004_auto_20170725_1731... OK</div><div class="line">  Applying organization.0005_teacher_image... OK</div><div class="line">  Applying courses.0001_initial... OK</div><div class="line">  Applying courses.0002_auto_20170712_2240... OK</div><div class="line">  Applying courses.0003_course_course_org... OK</div><div class="line">  Applying courses.0004_course_category... OK</div><div class="line">  Applying courses.0005_course_tag... OK</div><div class="line">  Applying courses.0006_video_url... OK</div><div class="line">  Applying courses.0007_video_learn_times... OK</div><div class="line">  Applying courses.0008_course_teacher... OK</div><div class="line">  Applying courses.0009_auto_20170728_2318... OK</div><div class="line">  Applying courses.0010_course_is_banner... OK</div><div class="line">  Applying courses.0011_auto_20170826_1149... OK</div><div class="line">  Applying operation.0001_initial... OK</div><div class="line">  Applying organization.0006_teacher_age... OK</div><div class="line">  Applying organization.0007_courseorg_tag... OK</div><div class="line">  Applying sessions.0001_initial... OK</div><div class="line">  Applying users.0002_banner_emailverifyrecord... OK</div><div class="line">  Applying users.0003_auto_20170708_1210... OK</div><div class="line">  Applying users.0004_auto_20170708_1523... OK</div><div class="line">  Applying users.0005_auto_20170708_2220... OK</div><div class="line">  Applying users.0006_auto_20170802_0829... OK</div><div class="line">  Applying xadmin.0001_initial... OK</div><div class="line">  Applying xadmin.0002_log... OK</div><div class="line">  Applying xadmin.0003_auto_20160715_0100... OK</div><div class="line">(mol) nana@ubuntu:~/Music/MOl$ python manage.py runserver</div><div class="line">Performing system checks...</div><div class="line"></div><div class="line">/home/nana/.virtualenvs/mol/local/lib/python2.7/site-packages/DjangoUeditor/urls.py:11: RemovedInDjango110Warning: django.conf.urls.patterns() is deprecated and will be removed in Django 1.10. Update your urlpatterns to be a list of django.conf.urls.url() instances instead.</div><div class="line">  url(r&apos;^controller/$&apos;,get_ueditor_controller)</div><div class="line"></div><div class="line">System check identified no issues (0 silenced).</div><div class="line">October 15, 2017 - 11:22:58</div><div class="line">Django version 1.9.8, using settings &apos;MOl.settings&apos;</div><div class="line">Starting development server at http://127.0.0.1:8000/</div><div class="line">Quit the server with CONTROL-C.</div></pre></td></tr></table></figure></p>
<p>记得要在虚拟环境里这样弄<br>记得migrate</p>
<p>192.168.77.128:8000 但是这里显示的是nginx<br>192.168.77.128:8080  网站访问成功，但是静态文件没有显示成功</p>
<p>navicat数据传输 从主机传输到虚拟机</p>
<h2 id="7-uwsgi方式启动项目"><a href="#7-uwsgi方式启动项目" class="headerlink" title="7.uwsgi方式启动项目"></a>7.uwsgi方式启动项目</h2><p>uwsgi方式启动起来</p>
<p>安装uwsgi  pip install uwsgi<br>Successfully installed uwsgi-2.0.15</p>
<p>测试uwsgi  用http的方式测试<br>uwsgi –http :8080 –module MOl.wsgi<br>注意命令要写对<br><a href="http://192.168.77.128:8080/" target="_blank" rel="external">http://192.168.77.128:8080/</a> 浏览器访问 没问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"># the upstream component nginx needs to connect to</div><div class="line">upstream django &#123;</div><div class="line"># server unix:///path/to/your/mysite/mysite.sock; # for a file socket</div><div class="line">server 127.0.0.1:8000; # for a web port socket (we&apos;ll use this first)</div><div class="line">&#125;</div><div class="line"># configuration of the server</div><div class="line"></div><div class="line">server &#123;</div><div class="line"># the port your site will be served on</div><div class="line">listen      80;</div><div class="line"># the domain name it will serve for</div><div class="line">server_name 你的ip地址 ; # substitute your machine&apos;s IP address or FQDN</div><div class="line">charset     utf-8;</div><div class="line"></div><div class="line"># max upload size</div><div class="line">client_max_body_size 75M;   # adjust to taste</div><div class="line"></div><div class="line"># Django media</div><div class="line">location /media  &#123;</div><div class="line">    alias 你的目录/Mol/media;  # 指向django的media目录</div><div class="line">&#125;</div><div class="line"></div><div class="line">location /static &#123;</div><div class="line">    alias 你的目录/Mol/static; # 指向django的static目录</div><div class="line">&#125;</div><div class="line"></div><div class="line"># Finally, send all non-media requests to the Django server.</div><div class="line">location / &#123;</div><div class="line">    uwsgi_pass  django;</div><div class="line">    include     uwsgi_params; # the uwsgi_params file you installed</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你的ip地址  ip地址或者域名都可以</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"># the upstream component nginx needs to connect to</div><div class="line">upstream django &#123;</div><div class="line"># server unix:///path/to/your/mysite/mysite.sock; # for a file socket</div><div class="line">server 127.0.0.1:8000; # for a web port socket (we&apos;ll use this first)</div><div class="line">&#125;</div><div class="line"># configuration of the server</div><div class="line"></div><div class="line">server &#123;</div><div class="line"># the port your site will be served on</div><div class="line">listen      80;</div><div class="line"># the domain name it will serve for</div><div class="line">server_name 192.168.77.128 ; # substitute your machine&apos;s IP address or FQDN</div><div class="line">charset     utf-8;</div><div class="line"></div><div class="line"># max upload size</div><div class="line">client_max_body_size 75M;   # adjust to taste</div><div class="line"></div><div class="line"># Django media</div><div class="line">location /media  &#123;</div><div class="line">    alias /home/nana/Music/MOl/media;  # 指向django的media目录</div><div class="line">&#125;</div><div class="line"></div><div class="line">location /static &#123;</div><div class="line">    alias /home/nana/Music/MOl/static; # 指向django的static目录</div><div class="line">&#125;</div><div class="line"></div><div class="line"># Finally, send all non-media requests to the Django server.</div><div class="line">location / &#123;</div><div class="line">    uwsgi_pass  django;</div><div class="line">    include     uwsgi_params; # the uwsgi_params file you installed</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>建立软链接<br>sudo cp uc_nginx.conf /etc/nginx/conf.d/</p>
<p>重启nginx<br>sudo service nginx restart</p>
<p>ps aux|grep nginx 查看nginx是否已经启动</p>
<p>所有static文件全部放到一个目录下面来</p>
<p>collectstatic会将所有static文件放到一个目录上面来</p>
<p>STATICFILES_DIRS注释掉，这两个不能同时存在</p>
<p>甚至Xadmin的静态文件也会拷贝到这里来</p>
<h2 id="8-uwsgi的socket方式启动项目"><a href="#8-uwsgi的socket方式启动项目" class="headerlink" title="8.uwsgi的socket方式启动项目"></a>8.uwsgi的socket方式启动项目</h2><p>新建uwsgi的配置文件  uwsgi不对外暴露http方式 通过读配置文件来启动我们的uwsgi<br>socket方式启动，而不是http方式来启动  socket比http方式传输效率更快</p>
<p>nginx指明转发到8000端口，所有uwsgi也要指明8000端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># mysite_uwsgi.ini file</div><div class="line">[uwsgi]</div><div class="line"></div><div class="line"># Django-related settings</div><div class="line"># the base directory (full path)</div><div class="line">chdir           = /home/nana/Music/MOl</div><div class="line"># Django&apos;s wsgi file</div><div class="line">module          = MOl.wsgi</div><div class="line"># the virtualenv (full path)</div><div class="line"></div><div class="line"># process-related settings</div><div class="line"># master</div><div class="line">master          = true</div><div class="line"># maximum number of worker processes</div><div class="line">processes       = 10</div><div class="line"># the socket (use the full path to be safe</div><div class="line">socket          = 127.0.0.1:8000</div><div class="line"># ... with appropriate permissions - may be needed</div><div class="line"># chmod-socket    = 664</div><div class="line"># clear environment on exit</div><div class="line">vacuum          = true</div><div class="line">virtualenv = /home/nana/.virtualenvs/mol</div><div class="line"></div><div class="line"># logto = /tmp/mylog.log  注意这里要注释掉</div></pre></td></tr></table></figure></p>
<pre><code>保存后，通过uwsgi来启动
</code></pre><p><a href="http://192.168.77.128/" target="_blank" rel="external">http://192.168.77.128/</a>  访问网站 没有问题  注意这里不要加上8000端口<br>完成uwsgi的配置<br>完成ip地址访问</p>
<p>测试域名访问<br>修改hosts文件</p>
<p>uwsgi的重启</p>
<p> <a href="http://www.jianshu.com/p/3379892948da" target="_blank" rel="external">参考教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从我这Windows党在配置Ubuntu14.04开发环境的时候，把Ubuntu系统折腾奔溃了以后（千万不要手贱重装Ubuntu14.04的python, 升级或者多python共存都可以，就是不要把默认的卸载了重装，活生生的教训摆在眼前）。我就暗下决心要在家用虚拟机装个
    
    </summary>
    
      <category term="部署" scheme="http://yoursite.com/categories/%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="部署" scheme="http://yoursite.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>404和500页面配置</title>
    <link href="http://yoursite.com/2017/10/14/404%E5%92%8C500%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/10/14/404和500页面配置/</id>
    <published>2017-10-14T07:13:41.000Z</published>
    <updated>2017-10-14T08:44:01.271Z</updated>
    
    <content type="html"><![CDATA[<p>生产环境需要配置404和500页面，如果没有配置404和500页面，给用户的体验不是很好。</p>
<p>Django配置404和500页面具体如下：</p>
<h2 id="templates设置"><a href="#templates设置" class="headerlink" title="templates设置"></a>templates设置</h2><p>404和500页面拷贝到templates目录下。</p>
<h2 id="View设置"><a href="#View设置" class="headerlink" title="View设置"></a>View设置</h2><p>views.py:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">def page_not_found(request):</div><div class="line">    # 全局404处理函数</div><div class="line">    from django.shortcuts import render_to_response</div><div class="line">    response = render_to_response(&apos;404.html&apos;, &#123;&#125;)</div><div class="line">    response.status_code = 404</div><div class="line">    return response</div><div class="line"></div><div class="line"></div><div class="line">def page_error(request):</div><div class="line">    # 全局500处理函数</div><div class="line">    from django.shortcuts import render_to_response</div><div class="line">    response = render_to_response(&apos;500.html&apos;, &#123;&#125;)</div><div class="line">    response.status_code = 500</div><div class="line">    return response</div></pre></td></tr></table></figure></p>
<h2 id="url设置"><a href="#url设置" class="headerlink" title="url设置"></a>url设置</h2><p>根urls.py文件设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 全局404和500页面配置</div><div class="line">handler404 = &apos;users.views.page_not_found&apos;</div><div class="line">handler500 = &apos;users.views.page_error&apos;</div></pre></td></tr></table></figure></p>
<h2 id="settings设置"><a href="#settings设置" class="headerlink" title="settings设置"></a>settings设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">settings.py：</div><div class="line">Debug=False  （生成环境部署的时候必须改为False,否则报错提示信息可能会泄漏网站的关键信息)</div><div class="line">ALLOWED_HOSTS = [&apos;*&apos;]   (所有客户端都可以连接)</div></pre></td></tr></table></figure>
<p>注意，Debug=False的情况下，Django是不会再帮你代管static文件的访问。部署的时候Apache或者Nginx会自动代理这些静态文件。<br>如下这种方式就会失效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">STATIC_URL = &apos;/static/&apos;</div><div class="line">STATICFILES_DIRS = (</div><div class="line">    os.path.join(BASE_DIR, &quot;static&quot;),</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>我们给static配置url处理函数：<br>setting.py:<br>STATIC_ROOT = os.path.join(BASE_DIR, ‘static’)<br><!-- 全局404页面配置：
Django给我们提供了一些变量，这些变量是放在根(项目)urls.py下。
这些写法很固定，注意这些变量的名称，这是Django会自动调用的。 --><br>urls.py:<br>url(r’^static/(?P<path></path>.*)$’, serve, {“document_root”: STATIC_ROOT}),</p>
<p>重启系统</p>
<!-- 最常见的异常：1/0 -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生产环境需要配置404和500页面，如果没有配置404和500页面，给用户的体验不是很好。&lt;/p&gt;
&lt;p&gt;Django配置404和500页面具体如下：&lt;/p&gt;
&lt;h2 id=&quot;templates设置&quot;&gt;&lt;a href=&quot;#templates设置&quot; class=&quot;header
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python2.7项目升级python3.6</title>
    <link href="http://yoursite.com/2017/10/12/python2-7%E9%A1%B9%E7%9B%AE%E5%8D%87%E7%BA%A7python3-6/"/>
    <id>http://yoursite.com/2017/10/12/python2-7项目升级python3-6/</id>
    <published>2017-10-12T13:40:30.000Z</published>
    <updated>2017-10-12T14:19:02.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新建python3虚拟环境"><a href="#新建python3虚拟环境" class="headerlink" title="新建python3虚拟环境"></a>新建python3虚拟环境</h2><p>首先新建python3.6的虚拟环境，关于python2和python3虚拟环境的共存，之前的博客<a href="http://www.hellonana.top/2017/08/27/%E7%94%B5%E8%84%91%E5%AE%89%E8%A3%85%E5%A4%9A%E7%89%88%E6%9C%ACpython%E7%9A%84%E6%96%B9%E6%B3%95/" target="_blank" rel="external">电脑多版本Python共存的方法</a>。这里就不讲了。</p>
<h2 id="重装虚拟环境安装的开发包"><a href="#重装虚拟环境安装的开发包" class="headerlink" title="重装虚拟环境安装的开发包"></a>重装虚拟环境安装的开发包</h2><ol>
<li>打包安装：<br>requirements.txt<br>pip freeze &gt; requirements.txt<br>pip install -r requirements.txt<br>搭配豆瓣源清华源加速安装。</li>
<li>单个安装：<br>或者一个一个开发包安装，比较可控。<br>注意：mysqlclient(支持python3和python2)替换MySQL-Python(只支持python2.7)<br>xlrd/XlwtWriter/xlwt - Excel输入有关</li>
</ol>
<h2 id="Project-Interpreter配置虚拟环境"><a href="#Project-Interpreter配置虚拟环境" class="headerlink" title="Project Interpreter配置虚拟环境"></a>Project Interpreter配置虚拟环境</h2><h2 id="开发包升级"><a href="#开发包升级" class="headerlink" title="开发包升级"></a>开发包升级</h2><p>加了新功能的要合并</p>
<h2 id="setting配置"><a href="#setting配置" class="headerlink" title="setting配置"></a>setting配置</h2><p>django升级到1.11的，记得将django.core.context_processors.media更改成django.template.context_processors.media(django版本不同的原因)</p>
<p>models.py里面定义的<strong>unicode</strong>()函数改成<strong>str</strong>()函数</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新建python3虚拟环境&quot;&gt;&lt;a href=&quot;#新建python3虚拟环境&quot; class=&quot;headerlink&quot; title=&quot;新建python3虚拟环境&quot;&gt;&lt;/a&gt;新建python3虚拟环境&lt;/h2&gt;&lt;p&gt;首先新建python3.6的虚拟环境，关于pytho
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text使用技巧</title>
    <link href="http://yoursite.com/2017/09/01/Sublime%20Text%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2017/09/01/Sublime Text使用技巧/</id>
    <published>2017-09-01T03:13:23.000Z</published>
    <updated>2017-09-04T02:37:42.982Z</updated>
    
    <content type="html"><![CDATA[<p>前言：本文基于Windows系统</p>
<h2 id="一、安装Sublime-Text"><a href="#一、安装Sublime-Text" class="headerlink" title="一、安装Sublime Text"></a>一、安装Sublime Text</h2><p>安装地址：<a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a></p>
<h2 id="二、常用快捷键"><a href="#二、常用快捷键" class="headerlink" title="二、常用快捷键"></a>二、常用快捷键</h2><p>sublime快捷键配置：<code>Shift+Ctrl+P</code>打开命令面板，输入keybin（sublime支持模糊匹配），点击提示里的<code>Preferences: Key Bindings - Default</code>这一项，就可以看到所有sublime的快捷键配置。</p>
<!-- 基本文件操作
super 在windows上是Windows键 苹果上是command键
打开项目或文件： File-Open-xxx(项目或文件名)
文件保存： File-Save
撤销操作：Edit-Undo Insert Characters
查找：Find-Find
字体调大：Ctrl+“+”
真正灵活使用一款代码编辑器的秘诀就是多用键盘少用鼠标 快捷键记不住怎么办？ -->
<p><code>Ctrl+N</code>: 打开新页面<br><code>Ctrl+Tab</code>: 两个页面之间做跳转<!-- (不过只能在光标当前页面及当前页面右边的第一个页面之间进行跳转) --><br><code>Ctrl+J</code>: 合并两个代码行（光标需要定位在第一个代码行后面）<br><code>Ctrl+[</code>: 回退一个级别<br><code>Ctrl+]</code>: 缩进一个级别<br><code>Ctrl+L</code>: 选择当前行<br><code>Ctrl+C</code>: 拷贝<br><code>Ctrl+V</code>: 粘贴<br><code>Ctrl+Enter</code>: 当前行之下新增一行<br><code>Shift+Ctrl+Enter</code>: 当前行之上新增一行<br><code>Ctrl+Z</code>: 撤销操作<br><code>Ctrl+D</code>: 选中相同关键词<br><code>Ctrl+鼠标左键</code>: 进入多点编辑模式<br><code>Esc</code>: 跳出多点编辑模式<br><code>Ctrl+A</code>: 全选<br><code>Ctrl+K+B</code>: 打开侧边栏<br><code>Shift+Ctrl+P</code>： 打开命令面板Command Palette。Sublime的命令面板非常强大，可以减少对鼠标的以来，多用键盘。输入相应的单词，就可以执行想要的操作。<!-- （Windows系统中是Shift+Ctrl+P） -->   </p>
<p>操作粒度：<br><code>方向键左右键</code>： 移动单位的是一个字符<br><code>Alt+方向键左右键</code>： 移动单位的是一个单词<br><code>Ctrl+方向键左右键</code>： 移动到一行代码的头部和末尾<br><code>Shift+方向键左右键</code>： 选中光标左/右边一个字符<br><code>Shift+Alt+方向键左右键</code>： 选中光标左/右边一个单词   <!-- Ctrl也行 --><br><code>Shift+Ctrl+方向键左右键</code>： 选中光标左/右边整行代码  <!-- 我的不行也 --><br><code>Shift+Ctrl+方向键下键</code>： 选中光标后到文件末尾的全部代码 <!-- 我的不行也 --><br><code>Shift+Ctrl+方向键上键</code>： 选中光标前到文件头部的全部代码 <!-- 我的不行也 --></p>
<h2 id="三、自定制"><a href="#三、自定制" class="headerlink" title="三、自定制"></a>三、自定制</h2><p>Sublime所有自定制的数据都会保存到一个特殊的文件夹当中，点击Preferences-Browse Packages, 显示的User文件夹就是存放用户所有自定制数据的文件夹。User文件夹中的文件作用如下：<br>Default (Windows).sublime-keymap：保存用户绑定的快捷键配置<br>Preferences.sublime-settings：保存用户自定制的配置</p>
<p>示例显示如何自定制一个自动调整缩进的快捷键：<br><!-- 指定文本格式：
除了文件里指明，还有右下角指明，还可以<code>Shift+Ctrl+P</code>：打开命令面板，输入css，选择Set Syntax: CSS --></p>
<h3 id="3-1-调整缩进"><a href="#3-1-调整缩进" class="headerlink" title="3.1 调整缩进"></a>3.1 调整缩进</h3><ol>
<li><code>Shift+Ctrl+P</code>：打开命令面板</li>
<li>输入rein(模糊匹配)，选择<code>Indentation: Reindent Lines</code></li>
</ol>
<h3 id="3-2-Indentation-Reindent-Lines命令绑定快捷键"><a href="#3-2-Indentation-Reindent-Lines命令绑定快捷键" class="headerlink" title="3.2 Indentation: Reindent Lines命令绑定快捷键"></a>3.2 <code>Indentation: Reindent Lines</code>命令绑定快捷键</h3><ol>
<li><code>Shift+Ctrl+P</code>：打开命令面板, 输入keybin（sublime支持模糊匹配），点击提示里的<code>Preferences: Key Bindings - User</code>这一项，输入以下代码:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">&#123; &quot;keys&quot;: [&quot;shift+tab&quot;], &quot;command&quot;: &quot;reindent&quot;, &quot;args&quot;: &#123;&quot;single_line&quot;: false&#125; &#125;,</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="https://i.loli.net/2017/09/01/59a906065d645.png" alt="Reindent Lines命令绑定快捷键" title="Indentation: Reindent Lines命令绑定快捷键"><br>这里如何知道精确的命令名呢？</p>
<ol>
<li><code>Ctrl+`</code>：打开工作台；  <!-- 调出Sublime Text的console --></li>
<li><p>输入sublime.log_commands命令设置为True，回车执行。代码如下<!-- 也可以不输入 -->：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sublime.log_commands(True)</div></pre></td></tr></table></figure>
</li>
<li><p>命令面板中输入rein,选择Indentation: Reindent Lines；</p>
</li>
<li>工作台就可以看到精确的命令名以及参数：<br>command: reindent {“single_line”: false}</li>
<li>Esc退出</li>
</ol>
<h2 id="四、Package-Control安装扩展包"><a href="#四、Package-Control安装扩展包" class="headerlink" title="四、Package Control安装扩展包"></a>四、Package Control安装扩展包</h2><p>Sublime默认自带了很多包，如果需要安装扩展包，首先需要安装Package Control工具。</p>
<h3 id="4-1-安装Package-Control"><a href="#4-1-安装Package-Control" class="headerlink" title="4.1 安装Package Control"></a>4.1 安装Package Control</h3><ol>
<li><p>进入Package Control<a href="https://packagecontrol.io" target="_blank" rel="external">官网</a>，点击右上角的Installation, 根据电脑的Sublime Text版本复制左侧相应的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Sublime Text 3:</div><div class="line">import urllib.request,os,hashlib; h = &apos;df21e130d211cfc94d9b0905775a7c0f&apos; + &apos;1e3d39e33b79698005270310898eea76&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)</div><div class="line"></div><div class="line">Sublime Text 2:</div><div class="line">import urllib2,os,hashlib; h = &apos;df21e130d211cfc94d9b0905775a7c0f&apos; + &apos;1e3d39e33b79698005270310898eea76&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), &apos;wb&apos; ).write(by) if dh == h else None; print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h) if dh != h else &apos;Please restart Sublime Text to finish installation&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p>Sublime Text中按<code>Ctrl+`</code>打开工作台，粘贴代码，回车执行。</p>
</li>
<li>安装完成之后，Ctrl+Q退出，重启Sublime。</li>
<li>打开Sublime之后，<code>Shift+Ctrl+P</code>打开命令面板, 敲Install, 选择Package Control:Install Package， 回车执行，读取包的列表。</li>
<li>打开后搜索包名，比如AdvanceNewFile，Emmet，Git等，回车进行安装，Sublime就会自动安装好指定的包。<br>注意：Ctrl+W可以关闭说明文档。</li>
</ol>
<h3 id="4-2-常用扩展包"><a href="#4-2-常用扩展包" class="headerlink" title="4.2 常用扩展包"></a>4.2 常用扩展包</h3><p>AdvanceNewFile： 新建层级比较复杂的文件，如app/views/comments/show.html.erb。Alt+Ctrl+N 打开对话框之后，输入路径及文件名，回车就可打开输入内容。<br>Git：安装后可以直接在Sublime上执行Git命令，把修改推送到GitHub上。<br>SyncedSideBar： 侧边栏同步显示当前文件在目录树中的具体位置。<br><!-- sass: --></p>
<h2 id="五、Goto-Anything"><a href="#五、Goto-Anything" class="headerlink" title="五、Goto Anything"></a>五、Goto Anything</h2><h3 id="5-1-速查文件"><a href="#5-1-速查文件" class="headerlink" title="5.1 速查文件"></a>5.1 速查文件</h3><p>Ctrl+P打开Goto Anything，输入文件名，回车打开文件。</p>
<h3 id="5-2-速查文件代码具体行"><a href="#5-2-速查文件代码具体行" class="headerlink" title="5.2 速查文件代码具体行"></a>5.2 速查文件代码具体行</h3><p>输入文件名+“:”+代码行数，回车可以打开指明的文件并定位到指定的代码行。如shohtm:10可以打开show.html.erb文件并定位到第十行，光标会停留在文件中的第十行。</p>
<h3 id="5-3-速查文件中的函数"><a href="#5-3-速查文件中的函数" class="headerlink" title="5.3 速查文件中的函数"></a>5.3 速查文件中的函数</h3><p>输入文件名+@+函数名，回车，光标定位到指定文件的指明函数代码行。</p>
<h3 id="5-4-速查字符串"><a href="#5-4-速查字符串" class="headerlink" title="5.4 速查字符串"></a>5.4 速查字符串</h3><p>#+字符串，可以快速定位到指定字符串, 不过这种方式，用得不多。</p>
<h3 id="5-5-专门查找字符串"><a href="#5-5-专门查找字符串" class="headerlink" title="5.5 专门查找字符串"></a>5.5 专门查找字符串</h3><!-- 
## 六、Emmet插件

## 七、自定制代码片段

## 八、代码补全

## 九、批处理任务Build

如何绑定快捷键 -->
<p>使用苹果电脑的同学可以参考如下的Mac和PC键盘布局对比图，比如Windows系统的Ctrl键对应Mac系统的Command键。<br><img src="https://i.loli.net/2017/09/01/59a8f3a17eebe.png" alt="Mac和PC键盘布局对比" title="Mac和PC键盘布局对比图"><br><a href=""></a><br><a href=""></a><br>其他好用的代码编辑器：<br><a href="https://atom.io/" target="_blank" rel="external">ATOM</a>：  GitHub的开源免费代码编辑器<br><a href="https://vim.sourceforge.io/" target="_blank" rel="external">Vim</a>：  类似于Vi的著名的功能强大、高度可定制的文本编辑器<br><a href="http://macromates.com/" target="_blank" rel="external">textmate</a>：  Mac下的著名的文本编辑器软件，与BBedit一起并称苹果机上的emacs和vim</p>
<p>参考资料：<br><a href="http://www.imooc.com/learn/333" target="_blank" rel="external">快乐的sublime编辑器</a><br><a href="http://www.imooc.com/learn/40" target="_blank" rel="external">前端开发工具技巧介绍—Sublime篇</a><br><a href="http://www.w3cplus.com/tools/emmet-cheat-sheet.html" target="_blank" rel="external">前端开发必备！Emmet使用手册</a></p>
<!-- 问题：
4-1 shortcuts(07:14) 2.03 option alt这里不行



-->
<!-- [textmate](http://macromates.com/) 昨日黄花 
[ATOM](https://atom.io/)GitHub的ATOM编辑器 正在发展 很有前途 开源的 同时是免费的编辑器
现在真正火的是两款，一款是Vim宝刀未老
[Vim](https://vim.sourceforge.io/)
[Sublime Text](http://www.sublimetext.com/) 如日中天

http://blog.csdn.net/jelly441/article/details/44594693  no modules

Vim切换Sublime的十个理由：
1. 上手快
2. 多点编辑
3. Package Control
4. 闪电般的速度
5. 深度可定制
6. 快速文件切换
7. 命令面板
8. VIM 模式
9. 技巧不会过时
10. 活跃的社区

Mac上安装Toggle Alfred，可以通过它来呼叫sublime来进行打开



安装Package Control组件：

按Ctrl+`调出sublime text的console

ImportError: No module named 'urllib2'

>>> import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)
275309
reloading plugin Package Control.1_reloader
reloading plugin Package Control.2_bootstrap
reloading plugin Package Control.Package Control
Package Control: Not running package cleanup since bootstrapping is not yet complete
reloading settings Packages/Package Control/Package Control.sublime-settings
reloading settings Packages/User/Package Control.sublime-settings
reloading plugin 0_package_control_loader.00-package_control
 -->
<!-- 命令行呼叫sublime?
sublime配置放到GitHub仓库？恢复老设置的方法？
AdvanceNewFile
Emmet
Git
Package Control
RailsCasts Colour Scheme
Sass
SublimeERB
SyncedSideBar

设置哪些目录可以被忽略4:52分
不同项目设置不同 5:49分


2-1 安装sublime(03:50) 这里以后用到Mac了以后，再弄 -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言：本文基于Windows系统&lt;/p&gt;
&lt;h2 id=&quot;一、安装Sublime-Text&quot;&gt;&lt;a href=&quot;#一、安装Sublime-Text&quot; class=&quot;headerlink&quot; title=&quot;一、安装Sublime Text&quot;&gt;&lt;/a&gt;一、安装Sublime Te
    
    </summary>
    
      <category term="Sublime" scheme="http://yoursite.com/categories/Sublime/"/>
    
    
      <category term="Sublime" scheme="http://yoursite.com/tags/Sublime/"/>
    
  </entry>
  
  <entry>
    <title>Flask Web开发：基于Python的Web应用开发实战(不定期更新)</title>
    <link href="http://yoursite.com/2017/08/31/Flask%20Web%E5%BC%80%E5%8F%91%EF%BC%9A%E5%9F%BA%E4%BA%8EPython%E7%9A%84Web%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"/>
    <id>http://yoursite.com/2017/08/31/Flask Web开发：基于Python的Web应用开发实战/</id>
    <published>2017-08-31T03:34:02.000Z</published>
    <updated>2017-09-23T07:04:00.172Z</updated>
    
    <content type="html"><![CDATA[<p>前言: 最近开始学习Flask了，学的是经典的图灵系列之《Flask Web开发：基于Python的Web应用开发实战》不定期更新学习笔记。<br><a href="http://flask.pocoo.org/" target="_blank" rel="external">Flask官方文档</a>  <a href="https://github.com/miguelgrinberg/flasky" target="_blank" rel="external">示例代码Flasky</a></p>
<p>和其他框架相比，Flask的优点：扩展性高，让开发者做主，使其能对程序具有全面的创意控制。Flask支持所有的关系型数据库，还可以自主选择程序的组件，如果没有合适的，还可以自己开发。</p>
<p>课前须知：</p>
<ol>
<li>一定的Python编程经验</li>
<li>熟练使用操作系统命令行</li>
<li>HTML、CSS、JavaScript</li>
<li>基本的Git使用技巧</li>
</ol>
<p>首先安装<a href="https://git-scm.com/" target="_blank" rel="external">Git客户端</a><br>Administrator@DESKTOP-PCS85E7 MINGW64 /c/Nana/TP&amp;TACH/折腾来折腾去<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/miguelgrinberg/flasky.git</div><div class="line">Cloning into <span class="string">'flasky'</span>...</div><div class="line">remote: Counting objects: 830, <span class="keyword">done</span>.</div><div class="line">remote: Total 830 (delta 0), reused 0 (delta 0), pack-reused 830</div><div class="line">Receiving objects: 100% (830/830), 146.70 KiB | 44.00 KiB/s, <span class="keyword">done</span>.</div><div class="line">Resolving deltas: 100% (455/455), <span class="keyword">done</span>.</div></pre></td></tr></table></figure></p>
<p>git clone命令从Github上下载源码，安装到当前目录下的flasky文件夹中。这个文件夹有源码，还有一个包含了程序修改完整历史的Git仓库。</p>
<p>Hexo 创建日志的时候报错<br>ERROR Process failed: _posts/Flask Web开发：基于Python的Web应用开发实战.md<br>YAMLException: can not read a block mapping entry; a multiline key may not be an          implicit key at line 2, column 5:<br>    date: 2017-08-31 11:34:02<br>        ^<br>解决：[Flask]把这个删掉试试， 问题解决了<br>切换提交历史的Git命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout xxx（标签，项目中某次提交历史的名字）</div></pre></td></tr></table></figure></p>
<p>修改程序源文件，Git会阻止你签出其他历史版本，因为这会导致本地修改历史的丢失？？？<br>签出其他历史版本之前，要把文件还原到原始状态。最简单的方法是使用git reset命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard</div></pre></td></tr></table></figure></p>
<p>这个命令会损坏本地修改，所以执行此命令前你需要保存所有不想丢失的改动。？？？</p>
<p>从GitHub上下载修正和改进后的源码用于更新本地仓库。命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git fetch --all</div><div class="line">$ git fetch --tags</div><div class="line">$ git reset --hard origin/master  （git reset命令 用于更新文件的操作，执行git reset命令后，本地修改会丢失）</div></pre></td></tr></table></figure></p>
<p>git fetch命令用于利用GitHub上的远程仓库更新本地仓库的提交历史和标签，但不会改动真正的源文件<br>查看程序两个版本之间的区别，以便了解改动详情：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff xxx xxx</div></pre></td></tr></table></figure></p>
<p>补丁以Patch形式显示区别。 补丁文件？？？ GitHub网站显示的图形化对比更容易让人理解，查看两个历史版本的区别，可访问<a href="https://github.com/miguelgrinberg/flasky/compare/2a...2b" target="_blank" rel="external">https://github.com/miguelgrinberg/flasky/compare/2a...2b</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><!-- 一、 -->安装</h2><p>Flask有两个主要依赖：路由、调试和Web服务器网关接口（Web Server Gateway Interface, WSGI),子系统由<a href="http://werkzeug.pocoo.org/" target="_blank" rel="external">Werkzeug</a>提供; 模版系统由<a href="http://jinja.pocoo.org/" target="_blank" rel="external">Jinja2</a> 提供。<br>python版本：Python2.7 / Python3.3</p>
<h3 id="使用虚拟环境"><a href="#使用虚拟环境" class="headerlink" title=" 使用虚拟环境"></a><!-- 1.1 --> 使用虚拟环境</h3><p>虚拟环境是Python解释器的一个私有副本，这个环境中可以安装私有包，而且不会影响系统中安装的全局Python解释器。<br>优点：1. 系统的Python解释器中避免包的混乱和版本的冲突。2. 为每个程序单独创建虚拟环境可以保证程序智能访问虚拟环境中的包，从而保持全局解释器的干净整洁，使其只作为创建（更多）虚拟环境的源。3. 不需要管理员权限。<br>虚拟环境用第三方实用工具<code>virtualenv</code>创建。 检查系统是否安装了virtualenv命令：<br>$ virtualenv –version<br><!-- C:\Users\Administrator>virtualenv --version
15.1.0 我的版本--><br>Python3.3 venv模块原生支持虚拟环境，命令为pyvenv。pyvenv 不包含pip Python3.4改进，pyvenv完全代替virtualenv。<br>安装：</p>
<ol>
<li><p>Linux</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install python-virtualenv</div></pre></td></tr></table></figure>
</li>
<li><p>Mac OS X</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo easy_install virtualenv</div></pre></td></tr></table></figure>
</li>
<li><p>Windows</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install virtualenv</div></pre></td></tr></table></figure>
</li>
</ol>
<p>书上的方式不一样<br>注意： 上述命令必须以具有管理员权限的用户身份执行。Windows系统“以管理员身份运行”， 基于Unix系统，命令前面加上sudo,或以根用户身份执行。安装完毕，virtualenv实用工具就可以从常规账户中调用。</p>
<p>从GitHub下载示例代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/miguelgrinberg/flasky.git</div><div class="line">$ <span class="built_in">cd</span> flasky</div><div class="line">$ git checkout 1a</div></pre></td></tr></table></figure></p>
<p>Administrator@DESKTOP-PCS85E7 MINGW64 /c/Nana<br>$ git clone <a href="https://github.com/miguelgrinberg/flasky.git" target="_blank" rel="external">https://github.com/miguelgrinberg/flasky.git</a><br>Cloning into ‘flasky’…<br>remote: Counting objects: 830, done.<br>Reremote: Total 830 (delta 0), reused 0 (delta 0), pack-reused 830<br>Receiving objects: 100% (830/830), 146.70 KiB | 172.00 KiB/s, done.<br>Resolving deltas: 100% (455/455), done.</p>
<p>Administrator@DESKTOP-PCS85E7 MINGW64 /c/Nana<br>$ cd flasky</p>
<p>Administrator@DESKTOP-PCS85E7 MINGW64 /c/Nana/flasky (master)<br>$ git checkout 1a<br>Note: checking out ‘1a’.</p>
<p>You are in ‘detached HEAD’ state. You can look around, make experimental<br>changes and commit them, and you can discard any commits you make in this<br>state without impacting any branches by performing another checkout.</p>
<p>If you want to create a new branch to retain commits you create, you may<br>do so (now or later) by using -b with the checkout command again. Example:</p>
<p>  git checkout -b <new-branch-name></new-branch-name></p>
<p>HEAD is now at e4777c9… Chapter 1: initial version (1a)<br>使用virtualenv命令（只有一个必需的参数，即虚拟环境的名字，一般命名venv）在flasky文件夹中创建Python虚拟环境：<br>子文件夹 名字是虚拟环境的名字 虚拟环境相关文件都保存在子文件夹中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ virtualenv venv</div></pre></td></tr></table></figure></p>
<p>cmd中<br>C:\Nana\flasky&gt;virtualenv venv<br>Using base prefix ‘c:\users\administrator\appdata\local\programs\python\python35-32’<br>New python executable in C:\Nana\flasky\venv\Scripts\python.exe<br>Installing setuptools, pip, wheel…done.<br>使用虚拟环境之前，先要“激活”。<br>bash命令行（Linux和Mac OS X）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">source</span> venv/bin/activate</div></pre></td></tr></table></figure></p>
<p>Windows系统：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ venv\Scripts\activate</div></pre></td></tr></table></figure></p>
<p>C:\Nana\flasky&gt;venv\Scripts\activate</p>
<p>(venv) C:\Nana\flasky&gt;<br>激活后，Python解释器的路径就被添加进PATH中，不是永久性的，只会影响当前的命令行对话。<br>激活虚拟环境的命令会修改命令行提示符，加入环境名，提醒你已经激活了虚拟环境：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(venv) $</div></pre></td></tr></table></figure></p>
<p>虚拟环境的工作完成后，命令行输入<code>deactivate</code>,回到全局Python解释器中。</p>
<h3 id="使用pip安装Python包"><a href="#使用pip安装Python包" class="headerlink" title=" 使用pip安装Python包"></a><!-- 1.2 --> 使用pip安装Python包</h3><p>大多数Python包都使用pip实用工具安装，使用virtualenv创建虚拟环境时会自动安装pip。激活虚拟环境后，pip所在的路径会被添加进PATH。<br>我用的python3.5的版本来做的’<br>虚拟环境中安装Flask:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(venv) $ pip install flask</div></pre></td></tr></table></figure></p>
<p>(venv) C:\Nana\flasky&gt;pip install flask<br>Collecting flask<br>  Downloading Flask-0.12.2-py2.py3-none-any.whl (83kB)<br>    100% |████████████████████████████████| 92kB 264kB/s<br>Collecting click&gt;=2.0 (from flask)<br>  Downloading click-6.7-py2.py3-none-any.whl (71kB)<br>    100% |████████████████████████████████| 71kB 863kB/s<br>Collecting itsdangerous&gt;=0.21 (from flask)<br>  Downloading itsdangerous-0.24.tar.gz (46kB)<br>    100% |████████████████████████████████| 51kB 624kB/s<br>Collecting Jinja2&gt;=2.4 (from flask)<br>  Downloading Jinja2-2.9.6-py2.py3-none-any.whl (340kB)<br>    100% |████████████████████████████████| 348kB 635kB/s<br>Collecting Werkzeug&gt;=0.7 (from flask)<br>  Downloading Werkzeug-0.12.2-py2.py3-none-any.whl (312kB)<br>    100% |████████████████████████████████| 317kB 424kB/s<br>Collecting MarkupSafe&gt;=0.23 (from Jinja2&gt;=2.4-&gt;flask)<br>  Downloading MarkupSafe-1.0.tar.gz<br>Building wheels for collected packages: itsdangerous, MarkupSafe<br>  Running setup.py bdist_wheel for itsdangerous … done<br>  Stored in directory: C:\Users\Administrator\AppData\Local\pip\Cache\wheels\fc\a8\66\24d655233c757e178d45dea2de22a04c6d92766abfb741129a<br>  Running setup.py bdist_wheel for MarkupSafe … done<br>  Stored in directory: C:\Users\Administrator\AppData\Local\pip\Cache\wheels\88\a7\30\e39a54a87bcbe25308fa3ca64e8ddc75d9b3e5afa21ee32d57<br>Successfully built itsdangerous MarkupSafe<br>Installing collected packages: click, itsdangerous, MarkupSafe, Jinja2, Werkzeug, flask<br>Successfully installed Jinja2-2.9.6 MarkupSafe-1.0 Werkzeug-0.12.2 click-6.7 flask-0.12.2 itsdangerous-0.24</p>
<p>验证Flask是否正确安装，启动Python解释器，导入Flask：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(venv) $ python</div><div class="line">&gt;&gt;&gt; import flask</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<!-- (venv) C:\Nana\flasky>python
Python 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 15:51:26) [MSC v.1900 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import flask
>>> -->
<p>没有错误提醒，则成功。</p>
<h2 id="程序的基本结构"><a href="#程序的基本结构" class="headerlink" title="程序的基本结构"></a><!-- 二、 -->程序的基本结构</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><!-- 2.1  -->初始化</h3><p>所有Flask程序都必须创建一个程序实例。Web服务器使用一种名为Web服务器网关接口（Web Server Gateway Interface, WSGI)的协议，把接受自客户端的所有请求都转交给这个对象处理。<br>程序实例是Flask类的对象，常用如下代码创建：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">from flask import Flask</div><div class="line">app = Flask(__name__)</div></pre></td></tr></table></figure></p>
<p>Flask类的构造函数只有一个必须指定的参数，即程序主模块或包的名字。大多数程序中，Python的<strong>name</strong>变量就是所需的值。<br>更多：将构造函数的name参数传给Flask程序，Flask用这个参数决定程序的根目录，以便找到相对于程序根目录的资源文件位置。</p>
<h3 id="路由和视图函数"><a href="#路由和视图函数" class="headerlink" title="路由和视图函数"></a><!-- 2.2  -->路由和视图函数</h3><p>请求：客户端–&gt;Web服务器–&gt;Flask程序实例。 程序实例需要知道对每个URL请求运行哪些代码，所以保存了一个URL到Python函数的映射关系。<br>路由：处理URL和函数之间关系的程序。<br>Flask程序定义路由，最简便方式是用程序实例提供的app.route修饰器(装饰器)，把修饰的函数注册为路由。<br>使用app.route修饰器(装饰器)声明路由：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@app.route(<span class="string">'/'</span>)</div><div class="line">def index():</div><div class="line"> <span class="built_in">return</span> <span class="string">'&lt;h1&gt;Hello World!&lt;/h1&gt;'</span></div></pre></td></tr></table></figure></p>
<p>修饰器(装饰器)？？？第八页<br>这个例子把index()函数注册为程序根地址的处理程序。像index()这样的函数称为视图函数（view function)。<br>python代码嵌入响应式字符串导致代码难以维护？？？8<br>日常所用服务的某些URL格式，很多地址都包含可变部分。Flask支持这种形态的URL,只需在route修饰器重使用特殊的句法即可。<br>定义有一部分是动态名字的路由：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@app.route(<span class="string">'/user/&lt;name&gt;'</span>)</div><div class="line">def user(name):</div><div class="line"> <span class="built_in">return</span> <span class="string">'&lt;h1&gt;Hello, %s!&lt;/h1&gt;'</span> % name</div></pre></td></tr></table></figure></p>
<p>尖括号中的内容-动态部分，调用视图函数时。Flask会把动态部分作为参数传入函数。路由中的动态部分默认使用字符串，不过也可使用类型定义。 如路由/user/<int：id>只会匹配动态片段id为整数的URL。<br>Flask支持在路由中使用<code>int、float和path</code>类型。<code>path类型</code>也是字符串，但不把斜线视作分隔符，而将其作为动态片段的一部分。</int：id></p>
<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a><!-- 2.3  -->启动服务器</h3><p>程序实例用run方法启动Flask集成的开发Web服务器：<br>if <strong>name</strong> == ‘<strong>main</strong>‘:<br> app.run(debug=True)</p>
<p><strong>name</strong> == ‘<strong>main</strong>‘是Python的惯常用法，这里确保直接执行这个脚本时才启动开发Web服务器。如果这个脚本由其他脚本引入，不会执行app.run()。<br>服务器启动-轮询，等待并处理请求。一直运行到程序停止，如按Ctrl+C。<br>有一些选项参数可被app.run()函数接受用于设置Web服务器的操作模式。 启动调试模式（如激活调试器和重载程序），可将debug参数设为True。<br>更多：Flask提供的Web服务器不适合在生产环境中使用。</p>
<h3 id="一个完整的程序"><a href="#一个完整的程序" class="headerlink" title="一个完整的程序"></a><!-- 2.4  -->一个完整的程序</h3><p>示例2-1 hello.py: 一个完整的Flask程序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">from flask import Flask</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">@app.route(<span class="string">'/'</span>)</div><div class="line">def index():</div><div class="line"> <span class="built_in">return</span> <span class="string">'&lt;h1&gt;Hello World!&lt;/h1&gt;'</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"> app.run(debug=True)</div></pre></td></tr></table></figure></p>
<p><a href="http://127.0.0.1:5000/" target="_blank" rel="external">调试地址</a><br>启动程序：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(venv) $ python hello.py</div><div class="line"> * Running on http://127.0.0.1:5000/</div><div class="line"> * Restarting with reloader</div></pre></td></tr></table></figure></p>
<p>我的运行如下，不过浏览器显示一样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(venv) C:\Nana\flasky&gt;python hello.py</div><div class="line"> * Restarting with <span class="built_in">stat</span></div><div class="line"> * Debugger is active!</div><div class="line"> * Debugger PIN: 929-772-137</div><div class="line"> * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</div><div class="line">127.0.0.1 - - [31/Aug/2017 18:06:47] <span class="string">"GET / HTTP/1.1"</span> 200 -</div><div class="line">127.0.0.1 - - [31/Aug/2017 18:06:47] <span class="string">"GET /favicon.ico HTTP/1.1"</span> 404 -</div></pre></td></tr></table></figure></p>
<p>示例2-2 hello.py: 包含动态路由的Flask程序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">from flask import Flask</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">@app.route(<span class="string">'/'</span>)</div><div class="line">def index():</div><div class="line"> <span class="built_in">return</span> <span class="string">'&lt;h1&gt;Hello World!&lt;/h1&gt;'</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">@app.route(<span class="string">'/user/&lt;name&gt;'</span>)</div><div class="line">def user(name):</div><div class="line"> <span class="built_in">return</span> <span class="string">'&lt;h1&gt;Hello, %s!&lt;/h1&gt;'</span> % name</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"> app.run(debug=True)</div></pre></td></tr></table></figure></p>
<p><a href="http://127.0.0.1:5000/user/Dave" target="_blank" rel="external">调试地址1</a>  浏览器显示：Hello, Dave!<br><a href="http://127.0.0.1:5000/user/Nana" target="_blank" rel="external">调试地址2</a>  浏览器显示：Hello, Nana!<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">(venv) C:\Nana\flasky&gt;python hello.py</div><div class="line"> * Restarting with <span class="built_in">stat</span></div><div class="line"> * Debugger is active!</div><div class="line"> * Debugger PIN: 929-772-137</div><div class="line"> * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</div><div class="line">127.0.0.1 - - [31/Aug/2017 18:06:47] <span class="string">"GET / HTTP/1.1"</span> 200 -</div><div class="line">127.0.0.1 - - [31/Aug/2017 18:06:47] <span class="string">"GET /favicon.ico HTTP/1.1"</span> 404 -</div><div class="line"> * Detected change <span class="keyword">in</span> <span class="string">'C:\\Nana\\flasky\\hello.py'</span>, reloading  从这里开始变化了</div><div class="line"> * Restarting with <span class="built_in">stat</span></div><div class="line"> * Debugger is active!</div><div class="line"> * Debugger PIN: 929-772-137</div><div class="line"> * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</div><div class="line">127.0.0.1 - - [31/Aug/2017 18:18:31] <span class="string">"GET /user/Dave HTTP/1.1"</span> 200 -</div><div class="line">127.0.0.1 - - [31/Aug/2017 18:19:01] <span class="string">"GET /user/Nana HTTP/1.1"</span> 200 -</div></pre></td></tr></table></figure></p>
<h3 id="请求-响应循环"><a href="#请求-响应循环" class="headerlink" title="请求 - 响应循环"></a><!-- 2.5  -->请求 - 响应循环</h3><h4 id="程序和请求上下文"><a href="#程序和请求上下文" class="headerlink" title="程序和请求上下文"></a><!-- 2.5.1  -->程序和请求上下文</h4><p>请求对象封装了客户端发送的HTTP请求。<br>将请求对象做为参数传入视图函数，能让视图函数访问请求对象。但会导致程序中的每个视图函数都增加一个参数。而且如果视图函数在处理请求时还要访问其他对象，情况会变糟。<br>Flask使用上下文临时把某些对象变为全局可访问。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from flask import request</div><div class="line"></div><div class="line">@app.route(<span class="string">'/'</span>)</div><div class="line">def index():</div><div class="line">  user_agent = request.headers.get(<span class="string">'User_Agent'</span>)</div><div class="line">  <span class="built_in">return</span> <span class="string">'&lt;p&gt;Your brower is %s&lt;/p&gt;'</span> % user_agent</div></pre></td></tr></table></figure></p>
<p>事实上，request不可能是全局变量。多线程服务器中，Flask使用上下文让特定的变量在一个线程中全局可访问，于此同时却不会干扰其他线程。<br>更多：线程是可单独管理的最小指令集。多线程Web服务器会创建一个线程池，再从线程池中选择一个线程用于处理接收到的请求。</p>
<p>Flask中两种上下文： 程序上下文和请求上下文。</p>
<table>
<thead>
<tr>
<th style="text-align:center">变量名</th>
<th style="text-align:center">上下文</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">current_app</td>
<td style="text-align:center">程序上下文</td>
<td style="text-align:left">当前激活程序的程序实例</td>
</tr>
<tr>
<td style="text-align:center">g</td>
<td style="text-align:center">程序上下文</td>
<td style="text-align:left">处理请求时用作临时存储的对象，每次请求都会重设这个变量</td>
</tr>
<tr>
<td style="text-align:center">request</td>
<td style="text-align:center">请求上下文</td>
<td style="text-align:left">请求对象，封装了客户端发出的HTTP请求中的内容</td>
</tr>
<tr>
<td style="text-align:center">session</td>
<td style="text-align:center">请求上下文</td>
<td style="text-align:left">用户会话，用于存储请求之间需要“记住”的值的词典</td>
</tr>
</tbody>
</table>
<p>Flask发送请求之前激活（或推送）程序和请求上下文，推送后，可以在线程中使用current_app，g，request，session变量，请求处理完成后再将其删除。如果使用这些变量时没有激活程序或请求上下文，就会导致错误。<br>示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from hello import app</div><div class="line">&gt;&gt;&gt; from flask import current_app</div><div class="line">&gt;&gt;&gt; current_app.name</div><div class="line">Traceback (most recent call last):</div><div class="line">...</div><div class="line">RuntimeError: Working outside of application context.</div><div class="line">&gt;&gt;&gt; app_ctx = app.app_context()</div><div class="line">&gt;&gt;&gt; app_ctx.push()</div><div class="line">&gt;&gt;&gt; current_app.name</div><div class="line"><span class="string">'hello'</span></div><div class="line">&gt;&gt;&gt; app_ctx.pop()</div><div class="line"></div><div class="line"></div><div class="line">C:\Nana\flasky\venv\Scripts&gt;activate</div><div class="line"></div><div class="line">(venv) C:\Nana\flasky\venv\Scripts&gt;<span class="built_in">cd</span> C:\Nana\flasky</div><div class="line"></div><div class="line">(venv) C:\Nana\flasky&gt;python</div><div class="line">Python 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 15:51:26) [MSC v.1900 32 bit (Intel)] on win32</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">&gt;&gt;&gt; from hello import app</div><div class="line">&gt;&gt;&gt; from flask import current_app</div><div class="line">&gt;&gt;&gt; current_app.name</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"C:\Nana\flasky\venv\lib\site-packages\werkzeug\local.py"</span>, line 347, <span class="keyword">in</span> __getattr__</div><div class="line">    <span class="built_in">return</span> getattr(self._get_current_object(), name)</div><div class="line">  File <span class="string">"C:\Nana\flasky\venv\lib\site-packages\werkzeug\local.py"</span>, line 306, <span class="keyword">in</span> _get_current_object</div><div class="line">    <span class="built_in">return</span> self.__local()</div><div class="line">  File <span class="string">"C:\Nana\flasky\venv\lib\site-packages\flask\globals.py"</span>, line 51, <span class="keyword">in</span> _find_app</div><div class="line">    raise RuntimeError(_app_ctx_err_msg)</div><div class="line">RuntimeError: Working outside of application context.</div><div class="line"></div><div class="line">This typically means that you attempted to use functionality that needed</div><div class="line">to interface with the current application object <span class="keyword">in</span> a way.  To solve</div><div class="line">this <span class="built_in">set</span> up an application context with app.app_context().  See the</div><div class="line">documentation <span class="keyword">for</span> more information.</div><div class="line">&gt;&gt;&gt; app_ctx = app.app_context()</div><div class="line">&gt;&gt;&gt; app_ctx.push()</div><div class="line">&gt;&gt;&gt; current_app.name</div><div class="line"><span class="string">'hello'</span></div><div class="line">&gt;&gt;&gt; app_ctx.pop()</div></pre></td></tr></table></figure></p>
<p>这里没激活程序上下文前就调用current_app.name会导致错误，但推送完上下文之后就可以调用了。<br>注意，在程序实例上调用app.app_context()可获得一个程序上下文。<br><!-- ？？？那如何获取一个请求上下文
？？？current_app.name为什么是'hello' --></p>
<h4 id="请求调度"><a href="#请求调度" class="headerlink" title="请求调度"></a><!-- 2.5.2  -->请求调度</h4><p>Flask使用app.route修饰器或者非修饰器形式的app.add_url_rule()生成映射。<br>在Python shell中测试为hello.py生成的映射：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">(venv) $ python</div><div class="line">&gt;&gt;&gt; from hello import app</div><div class="line">&gt;&gt;&gt; app.url_map</div><div class="line">Map([&lt;Rule <span class="string">'/'</span> (HEAD, GET, OPTIONS) -&gt; index&gt;,</div><div class="line"> &lt;Rule <span class="string">'/static/&lt;filename&gt;'</span> (HEAD, GET, OPTIONS) -&gt; static&gt;,</div><div class="line"> &lt;Rule <span class="string">'/user/&lt;name&gt;'</span> (HEAD, GET, OPTIONS) -&gt; user&gt;])</div><div class="line"></div><div class="line"></div><div class="line">(venv) C:\Nana\flasky&gt;python</div><div class="line">Python 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 15:51:26) [MSC v.1900 32 bit (Intel)] on win32</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">&gt;&gt;&gt; from hello import app</div><div class="line">&gt;&gt;&gt; app.url_map</div><div class="line">Map([&lt;Rule <span class="string">'/'</span> (HEAD, GET, OPTIONS) -&gt; index&gt;,</div><div class="line"> &lt;Rule <span class="string">'/static/&lt;filename&gt;'</span> (HEAD, GET, OPTIONS) -&gt; static&gt;,</div><div class="line"> &lt;Rule <span class="string">'/user/&lt;name&gt;'</span> (HEAD, GET, OPTIONS) -&gt; user&gt;])</div></pre></td></tr></table></figure></p>
<p>/和/user/<name>路由在程序中使用app.route修饰器定义。/static/<filename>路由是Flask添加的特殊路由，用于访问静态文件。<br>URL映射中的<code>HEAD, GET, OPTIONS</code>是请求方法，由路由进行处理。</filename></name></p>
<h4 id="请求钩子"><a href="#请求钩子" class="headerlink" title="请求钩子"></a><!-- 2.5.3  -->请求钩子</h4><p>有时在处理请求之前或之后执行代码会很有用。Flask提供了注册通用函数的功能，注册的函数可在请求之前或之后调用。<br>请求钩子使用修饰器实现。Flask支持四种钩子。</p>
<ul>
<li><code>before_first_request</code>: 注册一个函数，在处理第一个请求之前运行。</li>
<li><code>before_request</code>: 注册一个函数，在每次请求之前运行。</li>
<li><code>after_request</code>: 注册一个函数，如果没有未处理的异常抛出，在每次请求之后运行。</li>
<li><code>teardown_request</code>: 注册一个函数，如果有未处理的异常抛出，也在每次请求之后运行。<br>在请求钩子函数和视图函数之间共享数据一般使用上下文全局变量g。</li>
</ul>
<h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a><!-- 2.5.4  -->响应</h4><p>Flask调用视图函数后，会将其返回值作为响应的内容。HTTP协议需要作为请求响应的字符串还有状态码，Flask默认设为200， 表明请求已经被成功处理。如果需要使用不同的状态码，就要把数字代码作为第二个返回值，添加到响应文本之后。如400状态码，表示请求无效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@app.route(<span class="string">'/'</span>)</div><div class="line">def index():</div><div class="line">    <span class="built_in">return</span> <span class="string">'&lt;h1&gt;Bad Request&lt;/h1&gt;'</span>, 400</div></pre></td></tr></table></figure></p>
<p>视图函数返回的响应还可以接受第三个参数，这是一个有首部（header）组成的字典，可以添加到HTTP响应中。<br>如果不想返回由1个、2个或3个值组成的元组，Flask视图函数还可以返回Response对象。make_response()函数可接受1个、2个或3个参数，并返回一个Response对象。<br>示例创建了一个响应对象，然后设置了cookie:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">from flask import make_response</div><div class="line"></div><div class="line">@app.route(<span class="string">'/'</span>)</div><div class="line">def index():</div><div class="line">    response = make_response(<span class="string">'&lt;h1&gt;This document carries a cookie!&lt;/h1&gt;'</span>)</div><div class="line">    response.set_cookie(<span class="string">'answer'</span>, <span class="string">'42'</span>)</div><div class="line">    <span class="built_in">return</span> response</div></pre></td></tr></table></figure></p>
<p>重定向（特殊响应类型）没有页面文档，只告诉浏览器一个新地址用以加载新页面，常用在Web表单中。<br>重定向常用302状态码表示，指向的地址由Location首部提供。<br>Flask提供了redirect()辅助函数来生成重定向响应：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from flask import redirect</div><div class="line"></div><div class="line">@app.route(<span class="string">'/'</span>)</div><div class="line">def index():</div><div class="line">    <span class="built_in">return</span> redirect(<span class="string">'http://www.example.com'</span>)</div></pre></td></tr></table></figure></p>
<p>abort函数（特殊响应）用于处理错误。<br>示例中如果URL中动态参数id对应的用户不存在，就返回状态码404：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">from flask import abort</div><div class="line"></div><div class="line">@app.route(<span class="string">'/user/&lt;id&gt;'</span>)</div><div class="line">def get_user(id):</div><div class="line">    user = load_user(id)</div><div class="line">    <span class="keyword">if</span> not user:</div><div class="line">      abort(404)</div><div class="line">    <span class="built_in">return</span> <span class="string">'&lt;h1&gt;Hello, %s&lt;/h1&gt;'</span> % user.name</div></pre></td></tr></table></figure></p>
<p>注意，abort不会把控制权交还给调用它的函数，而是抛出异常把控制权交给Web服务器。</p>
<h4 id="Flask扩展"><a href="#Flask扩展" class="headerlink" title="Flask扩展"></a><!-- 2.6  -->Flask扩展</h4><p>如何把扩展整合到程序中：<br>示例，在hello.py中添加一个扩展，使用命令行参数增强程序的功能。</p>
<h5 id="使用Flask-Script支持命令行选项"><a href="#使用Flask-Script支持命令行选项" class="headerlink" title="使用Flask-Script支持命令行选项"></a>使用Flask-Script支持命令行选项</h5><p>传递设置选项的理想方式是使用命令行参数。<br>Flask-Script是一个Flask扩展，为Flask程序添加了一个命令行解析器。安装方式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(venv) $ pip install flask-script</div><div class="line"></div><div class="line">(venv) C:\Nana\flasky&gt;pip install flask-script</div><div class="line">Collecting flask-script</div><div class="line">Requirement already satisfied: Flask <span class="keyword">in</span> c:\nana\flasky\venv\lib\site-packages (from flask-script)</div><div class="line">Requirement already satisfied: itsdangerous&gt;=0.21 <span class="keyword">in</span> c:\nana\flasky\venv\lib\site-packages (from Flask-&gt;flask-script)</div><div class="line">Requirement already satisfied: Jinja2&gt;=2.4 <span class="keyword">in</span> c:\nana\flasky\venv\lib\site-packages (from Flask-&gt;flask-script)</div><div class="line">Requirement already satisfied: Werkzeug&gt;=0.7 <span class="keyword">in</span> c:\nana\flasky\venv\lib\site-packages (from Flask-&gt;flask-script)</div><div class="line">Requirement already satisfied: click&gt;=2.0 <span class="keyword">in</span> c:\nana\flasky\venv\lib\site-packages (from Flask-&gt;flask-script)</div><div class="line">Requirement already satisfied: MarkupSafe&gt;=0.23 <span class="keyword">in</span> c:\nana\flasky\venv\lib\site-packages (from Jinja2&gt;=2.4-&gt;Flask-&gt;flask-script)</div><div class="line">Installing collected packages: flask-script</div><div class="line">Successfully installed flask-script-2.0.5</div></pre></td></tr></table></figure></p>
<p>示例2-3 hello.py: 使用Flask-Script<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">from flask import Flask</div><div class="line">from flask_script import Manager</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">manager = Manager(app)</div><div class="line"></div><div class="line"></div><div class="line">@app.route(<span class="string">'/'</span>)</div><div class="line">def index():</div><div class="line">    <span class="built_in">return</span> <span class="string">'&lt;h1&gt;Hello World!&lt;/h1&gt;'</span></div><div class="line"></div><div class="line"></div><div class="line">@app.route(<span class="string">'/user/&lt;name&gt;'</span>)</div><div class="line">def user(name):</div><div class="line">    <span class="built_in">return</span> <span class="string">'&lt;h1&gt;Hello, %s!&lt;/h1&gt;'</span> % name</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    manager.run()</div></pre></td></tr></table></figure></p>
<p>专为Flask开发的扩展都暴漏在flask.ext命名空间下。<br>这个扩展的初始化方法也适用于其他很多扩展：把程序实例作为参数传给构造函数， 初始化主类的实例。创建的对象可以在各个扩展中使用。<br>这里，服务器由manager.run()启动，启动后就能解析命令行了。<br>运行后，会显示一个用法消息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">usage: hello.py [-h] &#123;shell,runserver&#125; ...</div><div class="line"></div><div class="line">positional arguments:</div><div class="line">  &#123;shell,runserver&#125;</div><div class="line">    shell            Runs a Python shell inside Flask application context.</div><div class="line">    runserver        Runs the Flask development server i.e. app.run()</div><div class="line"></div><div class="line">optional arguments:</div><div class="line">  -h, --<span class="built_in">help</span>         show this <span class="built_in">help</span> message and <span class="built_in">exit</span></div><div class="line">我的运行结果，和书里有点出入：</div><div class="line">(venv) C:\Nana\flasky&gt;python hello.py</div><div class="line">usage: hello.py [-?] &#123;runserver,shell&#125; ...</div><div class="line"></div><div class="line">positional arguments:</div><div class="line">  &#123;runserver,shell&#125;</div><div class="line">    runserver        Runs the Flask development server i.e. app.run()</div><div class="line">    shell            Runs a Python shell inside Flask application context.</div><div class="line"></div><div class="line">optional arguments:</div><div class="line">  -?, --<span class="built_in">help</span>         show this <span class="built_in">help</span> message and <span class="built_in">exit</span></div></pre></td></tr></table></figure>
<p>shell命令：在程序的上下文中启动Python shell会话。<br>runserver命令：启动Web服务器。<br>运行python hello.py runserver将以调试模式启动Web服务器，但是还有很多选项可用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">我的和书里的有出入</div><div class="line">(venv) C:\Nana\flasky&gt;python hello.py runserver</div><div class="line"> * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</div><div class="line"></div><div class="line">(venv) C:\Nana\flasky&gt;python hello.py runserver --<span class="built_in">help</span></div><div class="line">usage: hello.py runserver [-?] [-h HOST] [-p PORT] [--threaded]</div><div class="line">                          [--processes PROCESSES] [--passthrough-errors] [-d]</div><div class="line">                          [-D] [-r] [-R]</div><div class="line"></div><div class="line">Runs the Flask development server i.e. app.run()</div><div class="line"></div><div class="line">optional arguments:</div><div class="line">  -?, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></div><div class="line">  -h HOST, --host HOST</div><div class="line">  -p PORT, --port PORT</div><div class="line">  --threaded</div><div class="line">  --processes PROCESSES</div><div class="line">  --passthrough-errors</div><div class="line">  -d, --debug           <span class="built_in">enable</span> the Werkzeug debugger (DO NOT use <span class="keyword">in</span> production</div><div class="line">                        code)</div><div class="line">  -D, --no-debug        <span class="built_in">disable</span> the Werkzeug debugger</div><div class="line">  -r, --reload          monitor Python files <span class="keyword">for</span> changes (not 100&#123;<span class="string">'const'</span>:</div><div class="line">                        True, <span class="string">'prog'</span>: <span class="string">'hello.py runserver'</span>, <span class="string">'option_strings'</span>:</div><div class="line">                        [<span class="string">'-r'</span>, <span class="string">'--reload'</span>], <span class="string">'help'</span>: <span class="string">'monitor Python files for</span></div><div class="line"><span class="string">                        changes (not 100% safe for production use)'</span>,</div><div class="line">                        <span class="string">'container'</span>: &lt;argparse._ArgumentGroup object at</div><div class="line">                        0x0338BF30&gt;, <span class="string">'default'</span>: None, <span class="string">'required'</span>: False,</div><div class="line">                        <span class="string">'type'</span>: None, <span class="string">'dest'</span>: <span class="string">'use_reloader'</span>, <span class="string">'choices'</span>: None,</div><div class="line">                        <span class="string">'metavar'</span>: None, <span class="string">'nargs'</span>: 0&#125;afe <span class="keyword">for</span> production use)</div><div class="line">  -R, --no-reload       <span class="keyword">do</span> not monitor Python files <span class="keyword">for</span> changes</div></pre></td></tr></table></figure></p>
<p>…host参数告诉Web服务器在哪个网络接口上监听来自客户端的链接，默认监听localhost上的连接，所以只接受来自服务器所在计算机发起的连接。</p>
<p>python hello.py runserver –host 0.0.0.0命令让Web服务器监听公共网络接口上的连接，允许同网中的其他计算机连接服务器（这样Web服务器可使用<code><a href="http://a.b.c.d:5000/" target="_blank" rel="external">http://a.b.c.d:5000/</a></code>网络中的任一台电脑进行访问，其中“a.b.c.d”是服务器所在计算机的外网IP地址）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(venv) C:\Nana\flasky&gt;python hello.py runserver --host 0.0.0.0</div><div class="line"> * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)</div><div class="line">192.168.1.22 - - [31/Aug/2017 22:10:20] <span class="string">"GET /user/%E5%A8%9C%E5%A8%9C HTTP/1.1"</span> 200 -</div><div class="line">192.168.1.22 - - [31/Aug/2017 22:10:20] <span class="string">"GET /favicon.ico HTTP/1.1"</span> 404 -</div><div class="line">192.168.1.22 - - [31/Aug/2017 22:10:37] <span class="string">"GET /user/Nana HTTP/1.1"</span> 200 -</div><div class="line">调试1：http://192.168.1.22:5000/user/娜娜   显示Hello,娜娜!</div><div class="line">调试2：http://192.168.1.22:5000/user/Nana   显示Hello,Nana!</div><div class="line">CTRL+C 退出 然后输入python hello.py runserver</div><div class="line">调试3：http://192.168.1.22:5000/user/Nana   显示无法访问此网站，192.168.1.22 拒绝了我们的连接请求。</div><div class="line">调试4：http://127.0.0.1:5000/user/Nana   显示Hello,Nana!</div></pre></td></tr></table></figure></p>
<!-- Administrator@DESKTOP-PCS85E7 MINGW64 /c/Nana
$ git clone https://github.com/miguelgrinberg/flasky.git
Cloning into 'flasky'...
remote: Counting objects: 830, done.
Reremote: Total 830 (delta 0), reused 0 (delta 0), pack-reused 830
Receiving objects: 100% (830/830), 146.70 KiB | 172.00 KiB/s, done.
Resolving deltas: 100% (455/455), done.

Administrator@DESKTOP-PCS85E7 MINGW64 /c/Nana
$ cd flasky

Administrator@DESKTOP-PCS85E7 MINGW64 /c/Nana/flasky (master)
$ git checkout la
error: pathspec 'la' did not match any file(s) known to git.

Administrator@DESKTOP-PCS85E7 MINGW64 /c/Nana/flasky (master)
$ git checkout 1a
Note: checking out '1a'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at e4777c9... Chapter 1: initial version (1a)

Administrator@DESKTOP-PCS85E7 MINGW64 /c/Nana/flasky ((1a))
$ pwd
/c/Nana/flasky

Administrator@DESKTOP-PCS85E7 MINGW64 /c/Nana/flasky ((1a))
$ ^C

Administrator@DESKTOP-PCS85E7 MINGW64 /c/Nana/flasky ((1a))
$ git checkout 2a
Previous HEAD position was e4777c9... Chapter 1: initial version (1a)
HEAD is now at 4ae084e... Chapter 2: A complete application (2a)

Administrator@DESKTOP-PCS85E7 MINGW64 /c/Nana/flasky ((2a))
$ git checkout 2b
Previous HEAD position was 4ae084e... Chapter 2: A complete application (2a)
HEAD is now at b39bcb5... Chapter 2: Dynamic routes (2b)

Administrator@DESKTOP-PCS85E7 MINGW64 /c/Nana/flasky ((2b))
$ git checkout 2c
Previous HEAD position was b39bcb5... Chapter 2: Dynamic routes (2b)
HEAD is now at edb0403... Chapter 2: Command line options with Flask-Script (2c)

Administrator@DESKTOP-PCS85E7 MINGW64 /c/Nana/flasky ((2c))
$ -->
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>视图函数的作用很明确，即生成请求的响应。一般而言，请求会改变程序的转台，而这种变化也会在视图函数中产生。<br>业务逻辑和表现逻辑混在一起会导致代码难以理解和维护。把表现逻辑移到模板中能够提升程序的可维护性。<br>模板是一个包含响应文本的文件，其中包含用占位变量表示的动态部分，其具体值只在请求的上下文中才能知道。<br>渲染：使用真实值替换变量，再返回最终得到的响应字符串的过程。Flask使用Jinja2模板引擎来渲染模板。</p>
<h3 id="Jinja2模板引擎"><a href="#Jinja2模板引擎" class="headerlink" title="Jinja2模板引擎"></a>Jinja2模板引擎</h3><p>形式最简单的Jinja2模板就是一个包含响应文本的文件。<br>示例3-1 templates/index.html:  Jinja2模板<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;Hello World!&lt;/h1&gt;</div></pre></td></tr></table></figure></p>
<p>示例3-2 templates/user.html:  Jinja2模板<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;Hello, &#123;&#123; name &#125;&#125;!&lt;/h1&gt;</div></pre></td></tr></table></figure></p>
<h4 id="渲染模板"><a href="#渲染模板" class="headerlink" title="渲染模板"></a>渲染模板</h4><p>默认情况下，Flask在程序文件夹中的templates子文件夹中寻找模板。<br>示例3-3 hello.py: 渲染模板<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">from flask import Flask, render_template</div><div class="line">from flask_script import Manager</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">manager = Manager(app)</div><div class="line"></div><div class="line"></div><div class="line">@app.route(&apos;/&apos;)</div><div class="line">def index():</div><div class="line">    return render_template(&apos;index.html&apos;)</div><div class="line"></div><div class="line"></div><div class="line">@app.route(&apos;/user/&lt;name&gt;&apos;)</div><div class="line">def user(name):</div><div class="line">    return render_template(&apos;user.html&apos;, name=name)   收到一个名为name的变量</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    manager.run()</div></pre></td></tr></table></figure></p>
<p>Flask提供的render_template()函数把Jinja2模板引擎集成到了程序中。<br><code>render_template()函数</code>： 第一个参数是模板的文件名。 随后的参数都是键值对，表示模板中变量对应的真实值。<br><code>name=name</code>：关键字参数，左边的“name”表示参数名，就是模板中使用的占位符;右边的“name”是当前作用域中的变量，表示同名参数的值。</p>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>示例3-2 templates/user.html:  Jinja2模板<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;Hello, &#123;&#123; name &#125;&#125;!&lt;/h1&gt;</div></pre></td></tr></table></figure></p>
<p>示例3-2 模板中使用的结构表示一个变量，它是一种特殊的占位符，告诉模板引擎这个位置的值从渲染模板时使用的数据中获取。<br>Jinja2能识别所有类型的变量，甚至是一些复制的类型，例如列表、字典和对象。<br>p*4</p>
<!-- ['key']字典[3]列表？？？
a list with a variable index？？？

过滤器修改变量

safe不转义？
trim 把值得首尾空格去掉？？？ -->
<p>用户在表单中输入的文本，千万不能使用safe</p>
<!-- ####  控制结构
宏？？？
super获取原来的内容？？？



###  使用Flask-Bootstrap集成Twitter Bootstrap

添加新内容 Super函数？？？




###  自定义错误页面
使用super（）保留基模版中定义的块的原始内容。


###  链接
###  静态文件
###  使用Flask-Moment本地化日期和时间
 -->
<!-- ## 四、Web表单
### 4.1 跨站请求伪造保护
### 4.2 表单类

StringField和TextAreaField的区别？？？
FormField 把表单作为字段嵌入另一个表单？？？
FieldList 一组指定类型的字段？？？

optional 无输入值时跳过其他验证函数？？？

AnyOf  NoneOf


### 4.3 把表单渲染成HTML

改变表单的外观，可以把参数传入渲染字段的函数，传入的参数会被转换成字段的HTML属性？？？

 -->
<h3 id="4-4-在视图函数中处理表单"><a href="#4-4-在视图函数中处理表单" class="headerlink" title="4.4 在视图函数中处理表单"></a>4.4 在视图函数中处理表单</h3><h3 id="4-5-重定向和用户会话"><a href="#4-5-重定向和用户会话" class="headerlink" title="4.5 重定向和用户会话"></a>4.5 重定向和用户会话</h3><p>Post/重定向/Get模式</p>
<p>这里使用get()获取字典中键对应的值来避免未找到键的异常情况？？？</p>
<h3 id="4-6-Flask消息"><a href="#4-6-Flask消息" class="headerlink" title="4.6 Flask消息"></a>4.6 Flask消息</h3><h2 id="五、数据库"><a href="#五、数据库" class="headerlink" title="五、数据库"></a>五、数据库</h2><h3 id="5-1-SQL数据库"><a href="#5-1-SQL数据库" class="headerlink" title="5.1 SQL数据库"></a>5.1 SQL数据库</h3><p>外键，引用同一个表？或不同表中某行的主键？？？</p>
<h3 id="5-2-NoSQL数据库"><a href="#5-2-NoSQL数据库" class="headerlink" title="5.2 NoSQL数据库"></a>5.2 NoSQL数据库</h3><p>NoSQL数据库使用集合代替表，使用文档代替记录。?</p>
<p>减少了表的数量，却增加了数据重复量。<br>好处： 数据重复可以提升查询速度？？？。列出用户及其角色的操作很简单，因为无需联结。</p>
<h3 id="5-3-使用SQL还是NoSQL"><a href="#5-3-使用SQL还是NoSQL" class="headerlink" title="5.3 使用SQL还是NoSQL"></a>5.3 使用SQL还是NoSQL</h3><p>那大型程序呢？</p>
<h3 id="5-4-Python数据库框架"><a href="#5-4-Python数据库框架" class="headerlink" title="5.4 Python数据库框架"></a>5.4 Python数据库框架</h3><p>数据库抽象库代码包？？？使用这些抽象包直接处理高等级的Python对象，而不用处理如表 文档和查询语言此类的数据库实体</p>
<p>ORM ODM</p>
<p>平台提供了那些数据库可供选择</p>
<h3 id="5-5-使用Flask-SQLAlchemy管理数据库"><a href="#5-5-使用Flask-SQLAlchemy管理数据库" class="headerlink" title="5.5 使用Flask-SQLAlchemy管理数据库"></a>5.5 使用Flask-SQLAlchemy管理数据库</h3><p>ad对象是   类的实例？？？</p>
<h3 id="5-6-定义模型"><a href="#5-6-定义模型" class="headerlink" title="5.6 定义模型"></a>5.6 定义模型</h3><p>模型？？？  db.String(64)?<br>默认的表名没有遵守使用复数形式进行命名的约定，？？？<br>index=True是什么意思？？？</p>
<p>BigInterger 不限制精度的整数？？？</p>
<p>Numeric 定点数？</p>
<p>String和Text的区别</p>
<p><strong>repr</strong>()???</p>
<h3 id="5-7-关系"><a href="#5-7-关系" class="headerlink" title="5.7 关系"></a>5.7 关系</h3><p>面向对象视角？？？</p>
<p>关系表？？？多对多？？？</p>
<h3 id="5-8-数据库操作"><a href="#5-8-数据库操作" class="headerlink" title="5.8 数据库操作"></a>5.8 数据库操作</h3><h4 id="5-8-1-创建表"><a href="#5-8-1-创建表" class="headerlink" title="5.8.1 创建表"></a>5.8.1 创建表</h4><h4 id="5-8-2-插入行"><a href="#5-8-2-插入行" class="headerlink" title="5.8.2 插入行"></a>5.8.2 插入行</h4><p>回滚？？？</p>
<h4 id="5-8-3-修改行"><a href="#5-8-3-修改行" class="headerlink" title="5.8.3 修改行"></a>5.8.3 修改行</h4><h4 id="5-8-4-删除行"><a href="#5-8-4-删除行" class="headerlink" title="5.8.4 删除行"></a>5.8.4 删除行</h4><h4 id="5-8-5-查询行"><a href="#5-8-5-查询行" class="headerlink" title="5.8.5 查询行"></a>5.8.5 查询行</h4><p>Query对象<br>paginate对象？？？</p>
<h3 id="5-9-在视图函数中操作数据库"><a href="#5-9-在视图函数中操作数据库" class="headerlink" title="5.9 在视图函数中操作数据库"></a>5.9 在视图函数中操作数据库</h3><h3 id="5-10-集成Python-shell"><a href="#5-10-集成Python-shell" class="headerlink" title="5.10 集成Python shell"></a>5.10 集成Python shell</h3><h3 id="5-11-使用Flask-Migrate实现数据库迁移"><a href="#5-11-使用Flask-Migrate实现数据库迁移" class="headerlink" title="5.11 使用Flask-Migrate实现数据库迁移"></a>5.11 使用Flask-Migrate实现数据库迁移</h3><h4 id="5-11-1-创建迁移仓库"><a href="#5-11-1-创建迁移仓库" class="headerlink" title="5.11.1 创建迁移仓库"></a>5.11.1 创建迁移仓库</h4><h4 id="5-11-2-创建迁移脚本"><a href="#5-11-2-创建迁移脚本" class="headerlink" title="5.11.2 创建迁移脚本"></a>5.11.2 创建迁移脚本</h4><h4 id="5-11-3-更新数据库"><a href="#5-11-3-更新数据库" class="headerlink" title="5.11.3 更新数据库"></a>5.11.3 更新数据库</h4><h2 id="六、电子邮件"><a href="#六、电子邮件" class="headerlink" title="六、电子邮件"></a>六、电子邮件</h2><h3 id="6-1-使用Flask-Mail提供电子邮件支持"><a href="#6-1-使用Flask-Mail提供电子邮件支持" class="headerlink" title="6.1 使用Flask-Mail提供电子邮件支持"></a>6.1 使用Flask-Mail提供电子邮件支持</h3><h4 id="6-1-1-在Python-shell中发送电子邮件"><a href="#6-1-1-在Python-shell中发送电子邮件" class="headerlink" title="6.1.1 在Python shell中发送电子邮件"></a>6.1.1 在Python shell中发送电子邮件</h4><h4 id="6-1-2-在程序中集成发送电子邮件功能"><a href="#6-1-2-在程序中集成发送电子邮件功能" class="headerlink" title="6.1.2 在程序中集成发送电子邮件功能"></a>6.1.2 在程序中集成发送电子邮件功能</h4><h4 id="6-1-3-异步发送电子邮件"><a href="#6-1-3-异步发送电子邮件" class="headerlink" title="6.1.3 异步发送电子邮件"></a>6.1.3 异步发送电子邮件</h4><h2 id="七、大型程序的结构"><a href="#七、大型程序的结构" class="headerlink" title="七、大型程序的结构"></a>七、大型程序的结构</h2><h3 id="7-1-项目结构"><a href="#7-1-项目结构" class="headerlink" title="7.1 项目结构"></a>7.1 项目结构</h3><h3 id="7-2-配置选项"><a href="#7-2-配置选项" class="headerlink" title="7.2 配置选项"></a>7.2 配置选项</h3><h3 id="7-3-程序包"><a href="#7-3-程序包" class="headerlink" title="7.3 程序包"></a>7.3 程序包</h3><h4 id="7-3-1"><a href="#7-3-1" class="headerlink" title="7.3.1"></a>7.3.1</h4><h4 id="7-3-2"><a href="#7-3-2" class="headerlink" title="7.3.2"></a>7.3.2</h4><h3 id="7-4"><a href="#7-4" class="headerlink" title="7.4"></a>7.4</h3><h3 id="7-5"><a href="#7-5" class="headerlink" title="7.5"></a>7.5</h3><h3 id="7-6"><a href="#7-6" class="headerlink" title="7.6"></a>7.6</h3><h2 id="、"><a href="#、" class="headerlink" title="、"></a>、</h2><h3 id="1"><a href="#1" class="headerlink" title=".1"></a>.1</h3><h3 id="2"><a href="#2" class="headerlink" title=".2"></a>.2</h3><h3 id="3"><a href="#3" class="headerlink" title=".3"></a>.3</h3><h3 id="4"><a href="#4" class="headerlink" title=".4"></a>.4</h3><h3 id="5"><a href="#5" class="headerlink" title=".5"></a>.5</h3><h3 id="6"><a href="#6" class="headerlink" title=".6"></a>.6</h3><h2 id="、-1"><a href="#、-1" class="headerlink" title="、"></a>、</h2><h3 id="1-1"><a href="#1-1" class="headerlink" title=".1"></a>.1</h3><h3 id="2-1"><a href="#2-1" class="headerlink" title=".2"></a>.2</h3><h3 id="3-1"><a href="#3-1" class="headerlink" title=".3"></a>.3</h3><h3 id="4-1"><a href="#4-1" class="headerlink" title=".4"></a>.4</h3><h3 id="5-1"><a href="#5-1" class="headerlink" title=".5"></a>.5</h3><h3 id="6-1"><a href="#6-1" class="headerlink" title=".6"></a>.6</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言: 最近开始学习Flask了，学的是经典的图灵系列之《Flask Web开发：基于Python的Web应用开发实战》不定期更新学习笔记。&lt;br&gt;&lt;a href=&quot;http://flask.pocoo.org/&quot; target=&quot;_blank&quot; rel=&quot;external
    
    </summary>
    
      <category term="Flask" scheme="http://yoursite.com/categories/Flask/"/>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
      <category term="Web开发" scheme="http://yoursite.com/tags/Web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Python常见报错及解决办法</title>
    <link href="http://yoursite.com/2017/08/24/Python%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2017/08/24/Python常见报错及解决办法/</id>
    <published>2017-08-24T05:06:16.036Z</published>
    <updated>2017-09-03T12:20:21.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-‘python’-不是内部或外部命令，也不是可运行的程序或批处理文件。"><a href="#1-‘python’-不是内部或外部命令，也不是可运行的程序或批处理文件。" class="headerlink" title="1. ‘python’ 不是内部或外部命令，也不是可运行的程序或批处理文件。"></a>1. ‘python’ 不是内部或外部命令，也不是可运行的程序或批处理文件。</h2><!-- python is not recognized as an internal or external command, operable program or batch file. -->
<p>解决方案：<br>添加python的安装路径到环境变量Path中, 告诉Windows如何找到你安装的Python版本。<br>举例：假设python.exe安装路径是C:\Python27,在计算机系统属性里点击环境变量-系统变量中找到Path变量，编辑-新建-增加一行填上C:\Python27。<br>提示：cmd中输入python，显示python版本信息及提示符&gt;&gt;&gt;，则设置成功。</p>
<h2 id="2-‘pip’-不是内部或外部命令，也不是可运行的程序或批处理文件。"><a href="#2-‘pip’-不是内部或外部命令，也不是可运行的程序或批处理文件。" class="headerlink" title="2. ‘pip’ 不是内部或外部命令，也不是可运行的程序或批处理文件。"></a>2. ‘pip’ 不是内部或外部命令，也不是可运行的程序或批处理文件。</h2><p>解决方案：<br>添加pip.exe的安装路径到环境变量Path中<br>举例：假设pip.exe安装路径是C:\Python27\Scripts,在计算机系统属性里点击环境变量-系统变量中找到Path变量，编辑-新建-增加一行填上C:\Python27\Scripts。</p>
<h2 id="3-pip安装python库超时ReadTimeoutError"><a href="#3-pip安装python库超时ReadTimeoutError" class="headerlink" title="3. pip安装python库超时ReadTimeoutError"></a>3. pip安装python库超时ReadTimeoutError</h2><p>解决方案：安装国内镜像，使用<a href="https://pypi.douban.com/simple/" target="_blank" rel="external">豆瓣源</a>或者<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="external">清华源</a>；<br>cmd运行pip –default-timeout=100 install -U pip,手动设置超时时间。</p>
<!-- C:\Users\娜娜>virtualenv testvir
New python executable in C:\Users\娜娜\testvir\Scripts\python.exe
Traceback (most recent call last):
  File "<string>", line 1, in <module>
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc4 in position 9: ordinal not in range(128)
ERROR: The executable C:\Users\娜娜\testvir\Scripts\python.exe is not functioning
ERROR: It thinks sys.prefix is u'c:\\users\\\u5a1c\u5a1c' (should be u'c:\\users\\\u5a1c\u5a1c\\testvir')
ERROR: virtualenv is not compatible with this system or executable
Note: some Windows users have reported this error when they installed Python for "Only this user" or have multiple versions of Python installed. Copying the appropriate PythonXX.dll to the virtualenv Scripts/ directory may fix this problem.
这个报错当时我没有解决，直接重装了
 -->
<h2 id="4-pip-list的DEPRECATION提示"><a href="#4-pip-list的DEPRECATION提示" class="headerlink" title="4. pip list的DEPRECATION提示"></a>4. pip list的DEPRECATION提示</h2><p>CMD中输入pip list后，显示：<br>DEPRECATION: The default format will switch to columns in the future. You can use –format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning.</p>
<p>解决方案：<br>这是一个警告，告诉你以后pip list的默认格式会换成columns的格式，可以采用命令加上–format=(legacy|columns)或者在[list]下面的pip.conf里定义一个legacy|columns格式来取消这个警告。<br>举例：<br>window10系统下，在C:\Users\Administrator下新建一个文件夹，命名为pip;<br>然后在pip上新建文件，pip.ini，里面输入内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[list]</div><div class="line">format=columns</div></pre></td></tr></table></figure></p>
<p>再次输入pip list，警告就消失了。<br>过程如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">C:\Users\Administrator&gt;pip list</div><div class="line">DEPRECATION: The default format will switch to columns <span class="keyword">in</span> the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) <span class="keyword">in</span> your pip.conf under the [list] section) to <span class="built_in">disable</span> this warning.</div><div class="line">beautifulsoup4 (4.6.0)</div><div class="line">colorama (0.3.9)</div><div class="line">decorator (4.1.2)</div><div class="line"></div><div class="line">C:\Users\Administrator&gt;pip list</div><div class="line">Package               Version</div><div class="line">--------------------- -------</div><div class="line">beautifulsoup4        4.6.0</div><div class="line">colorama              0.3.9</div><div class="line">decorator             4.1.2</div></pre></td></tr></table></figure></p>
<p>格式对比如下：<br>beautifulsoup4 (4.6.0) 旧格式<br>beautifulsoup4        4.6.0 新格式</p>
<h2 id="5-cmd输入pip-报错-UnicodeDecodeError-‘ascii’-codec-can’t-decode-byte-0xc0-in-position-0-ordinal-not-in-range-128"><a href="#5-cmd输入pip-报错-UnicodeDecodeError-‘ascii’-codec-can’t-decode-byte-0xc0-in-position-0-ordinal-not-in-range-128" class="headerlink" title="5. cmd输入pip, 报错: UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xc0 in position 0: ordinal not in range(128)"></a>5. cmd输入pip, 报错: UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xc0 in position 0: ordinal not in range(128)</h2><p>解决方案：</p>
<ol>
<li>Python的安装目录C:/Python27/Lib/里找到mimetypes.py文件；  </li>
<li>打开mimetypes.py文件，在import结束后添加如下代码：<br>import sys<br>reload(sys)<br>sys.setdefaultencoding(‘utf-8’)<br>保存文件,重新执行pip命令。</li>
</ol>
<p>参考<a href="https://segmentfault.com/q/1010000007127889?_ea=1245832" target="_blank" rel="external">segmentfault</a></p>
<!-- ## 'workon' 不是内部或外部命令，也不是可运行的程序或批处理文件。74  -->
<!-- virtualenvwrapper-win -->
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-‘python’-不是内部或外部命令，也不是可运行的程序或批处理文件。&quot;&gt;&lt;a href=&quot;#1-‘python’-不是内部或外部命令，也不是可运行的程序或批处理文件。&quot; class=&quot;headerlink&quot; title=&quot;1. ‘python’ 不是内部或外
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Error" scheme="http://yoursite.com/tags/Error/"/>
    
      <category term="Bug" scheme="http://yoursite.com/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>编程设计资源</title>
    <link href="http://yoursite.com/2017/08/23/%E7%BC%96%E7%A8%8B%E8%AE%BE%E8%AE%A1%E8%B5%84%E6%BA%90/"/>
    <id>http://yoursite.com/2017/08/23/编程设计资源/</id>
    <published>2017-08-23T03:39:59.000Z</published>
    <updated>2018-03-14T13:04:02.746Z</updated>
    
    <content type="html"><![CDATA[<h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><p><a href="https://www.google.com" target="_blank" rel="external">谷歌</a>    –lantern，你懂的(更新，lantern挂了，现在只能自己搭ss了，ORZ)<br><a href="https://www.baidu.com" target="_blank" rel="external">百度</a></p>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p><a href="https://www.w3cschool.cn/" target="_blank" rel="external">W3C</a>    –前端基础<br><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT</a>    –NexT网站主题<br><a href="http://livestyle.io/" target="_blank" rel="external">liveStyle</a>    –前端可视化工具<br><a href="http://livereload.com/" target="_blank" rel="external">liveReload</a>    –前端可视化工具<br><a href="https://browsersync.io/" target="_blank" rel="external">browserSync</a>    –前端可视化工具<br><a href="http://www.imooc.com/learn/668" target="_blank" rel="external">从 psd 到 html</a>    –切图实战教程<br><a href="http://www.imooc.com/learn/506" target="_blank" rel="external">前端工程师必备的PS技能——切图篇</a><br><a href="https://dillinger.io/" target="_blank" rel="external">DILLINGER</a>    –在线编辑Markdown网站</p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>正则表达式在网站url配置以及网络爬虫中非常重要。<br><a href="https://regexper.com/" target="_blank" rel="external">Regexper</a>   –可视化工具<br><a href="https://jex.im/regulex/" target="_blank" rel="external">Regulex</a>     –可视化工具<br><a href="https://www.debuggex.com/" target="_blank" rel="external">Debuggex</a>    –可视化工具<br>相关教程：<br><a href="https://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a>    –虽然作者也承认30分钟是不够的，逃</p>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p><a href="https://www.python.org/" target="_blank" rel="external">Python官网</a><br><a href="https://pypi.python.org/pypi" target="_blank" rel="external">PyPI - the Python Package Index</a><br><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">Unofficial Windows Binaries for Python Extension Packages</a>        –window系统的python第三方包文件<br><a href="http://www.jetbrains.com/pycharm/" target="_blank" rel="external">Pycharm</a>    –Python IDE，带有一整套可以帮助用户在使用Python语言开发时提高其效率的工具<br><a href="https://www.djangoproject.com/" target="_blank" rel="external">django</a>    –Python主流开源Web应用框架<br><a href="http://flask.pocoo.org/" target="_blank" rel="external">flask</a>      –Python轻量级Web应用框架<br><a href="http://www.tornadoweb.org" target="_blank" rel="external">Tornado</a>    –Python异步Web应用框架<br><a href="http://www.cnblogs.com/nianlei/p/5642315.html" target="_blank" rel="external">Python列表、元组、字典和字符串的常用函数</a>    </p>
<h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><p><a href="http://python.usyiyi.cn/translate/Django_111/index.html" target="_blank" rel="external">Django1.11.6的中文文档</a><br><a href="https://docs.djangoproject.com/en/1.11/" target="_blank" rel="external">Django官方文档</a></p>
<h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><p><a href="https://www.qiniu.com" target="_blank" rel="external">七牛云</a><br><a href="https://sm.ms/" target="_blank" rel="external">图床神器</a>    –免注册，免费，上传图片，不过有限制，每个文件大小不能超过5MB, 每次最多只能上传10张图片</p>
<h3 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h3><p><a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a>       –主流前端开发编辑器<br><a href="https://atom.io/" target="_blank" rel="external">ATOM</a>  –GitHub的开源免费代码编辑器<br><a href="https://vim.sourceforge.io/" target="_blank" rel="external">Vim</a>  –类似于Vi的著名的功能强大、高度可定制的文本编辑器<br><a href="http://macromates.com/" target="_blank" rel="external">textmate</a>  –Mac下的著名的文本编辑器软件，与BBedit一起并称苹果机上的emacs和vim</p>
<h3 id="美国服务器搬瓦工"><a href="#美国服务器搬瓦工" class="headerlink" title="美国服务器搬瓦工"></a>美国服务器搬瓦工</h3><p><a href="https://www.banwagong.com/" target="_blank" rel="external">Bangwagon VPS</a>  –美国服务器搬瓦工<br><a href="http://banwagong.cn/" target="_blank" rel="external">Bangwagon VPS China</a>  –美国服务器搬瓦工中国站<br><a href="https://bwh1.net/clientarea.php" target="_blank" rel="external">Bangwagon Host-Client Area</a>   –美国服务器 搬瓦工客户中心</p>
<!-- ### Python书籍推荐
[A Byte of Python](https://python.swaroopch.com/)    --简明 Python 教程 -->
<h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p><a href="https://stackoverflow.com" target="_blank" rel="external">stackoverflow</a>  –遇到报错可以经常来这里找找解决办法<br><a href="https://git-for-windows.github.io/" target="_blank" rel="external">Git For Windows</a>  –Windows系统下的Git<br><a href="https://python.swaroopch.com/" target="_blank" rel="external">A Byte of Python</a>    –简明 Python 教程<br><a href="http://www.wiz.cn/" target="_blank" rel="external">为知笔记</a>    –好记性不如烂笔头，多做笔记，多思考<br><a href="http://wongbingming.me/" target="_blank" rel="external">Ming’s Blog</a>     –明的博客<br><a href="https://w3techs.com/" target="_blank" rel="external">W3Tachs</a>   –网站技术分析<br><a href="https://www.liaoxuefeng.com/" target="_blank" rel="external">廖雪峰官方网站</a>   –Javascript/Python/Git等教程<br><a href="https://github.com/" target="_blank" rel="external">GitHub</a>    –代码托管网站<br><a href="https://www.quora.com/" target="_blank" rel="external">Quora</a>   –国外问答网站<br><a href="https://salttiger.com/" target="_blank" rel="external">SaltTiger</a>   –每天一本编程书，每天进步一点点<br><a href="http://www.imooc.com/" target="_blank" rel="external">慕课网</a><br><a href="https://www.zhihu.com/" target="_blank" rel="external">Zhihu</a><br><a href="https://developers.douban.com/" target="_blank" rel="external">豆瓣开发者服务</a><br><a href="https://developers.douban.com/wiki/?title=guide" target="_blank" rel="external">豆瓣API快速入门</a><br><a href="https://www.linkedin.com" target="_blank" rel="external">LinkedIn</a><br><a href="http://www.ofmonkey.com/" target="_blank" rel="external">程序员在线工具</a><br><a href="http://www.izheteng.com/" target="_blank" rel="external">爱折腾</a><br><a href="http://www.zhetenga.com/" target="_blank" rel="external">好折腾</a><br><a href="http://en.origami-club.com/index.html" target="_blank" rel="external">origami</a><br><a href="https://leancloud.cn/" target="_blank" rel="external">LeanCloud</a><br><a href="https://desktop.github.com/" target="_blank" rel="external">Github Desktop</a><br><a href="http://ueditor.baidu.com/website/" target="_blank" rel="external">UEditor</a><br><a href="https://github.com/zhangfisher/DjangoUeditor/tree/master/DjangoUeditor" target="_blank" rel="external">DjangoUeditor</a><br><a href="https://gitter.im/FreeCodeCamp/chinese" target="_blank" rel="external">FreeCodeCamp/chinese</a><br><a href="projectsedu.com">聚学在线</a><br><a href="https://probberechts.github.io/cactus-dark/2016/11/01/An-overview-of-all-Markdown-elements/" target="_blank" rel="external">An overview of all Markdown elements</a><br><a href="https://www.kennethreitz.org/" target="_blank" rel="external">KENNETH REITZ</a>   –逆袭男神的程序大神<br><a href="https://zhuanlan.zhihu.com/djstudyteam" target="_blank" rel="external">Django 学习小组</a><br><a href="http://littlewin.info/" target="_blank" rel="external">琪中有不凡</a><br><a href="http://www.atool.org" target="_blank" rel="external">ATOOL在线工具</a><br><a href="https://gallery.proficad.eu/tools/autocad-viewer.aspx" target="_blank" rel="external">在线DXF和DWG看图</a><br><a href="http://www.gsxt.gov.cn/index.html" target="_blank" rel="external">国家企业信用信息公示系统</a><br><a href="http://www.chsi.com.cn/" target="_blank" rel="external">学信网</a><br><a href="https://asciinema.org/" target="_blank" rel="external">asciinema</a>    –asciinema [as-kee-nuh-muh] is a free and open source solution for recording terminal sessions and sharing them on the web.<br><a href="http://gsnedders.html5.org/outliner/" target="_blank" rel="external">HTML 5 Outliner</a>    –用标题和分节元素生成一个可导航的页面大纲，HTML5大纲生成页面<br><a href="http://necolas.github.io/normalize.css/" target="_blank" rel="external">Normalize.css</a><br><a href="https://caniuse.com/" target="_blank" rel="external">Can I use</a><br><a href="https://autoprefixer.github.io/" target="_blank" rel="external">Autoprefixer CSS online</a>    –浏览器前缀的后处理程序<br><a href="https://www.letasoft.com/sound-booster-download/" target="_blank" rel="external">Letasoft Sound Booster</a>    –系统音量增大软件<br><a href="https://code.visualstudio.com/Download" target="_blank" rel="external">Visual Studio Code</a><br><a href="http://bigjpg.com/" target="_blank" rel="external">bigjpg 人工智能</a>    –AI人工智能图片放大，亲测效果不错<br><!-- [关于 DIY 的网站](https://www.zhihu.com/question/20029721)
[手工网站](https://www.zhihu.com/question/20107003) --></p>
<p>我们的人生很长，遇到的问题很多，而且经常不带重样的。经验主义显然没办法全部应付。唯有升维思考，多问为什么，对症下药，才能在残酷的现实社会当中，从容面对各种问题，并将它们各个击破。-<a href="https://www.zhihu.com/question/22000194" target="_blank" rel="external">两种思维方式的不同</a></p>
<p>但是啊，人生不一样，人生有很多正确答案，继续读大学是正确答案，不去也是，热衷运动也是，喜欢音乐也好，和朋友一起玩耍也罢，为了某人而绕远路也是，这些都是正确答案。-《龙樱》</p>
<p><a href="https://www.letasoft.com/sound-booster-download/" target="_blank" rel="external">Letasoft Sound Booster</a><br><a href=""></a><br><a href=""></a><br><a href=""></a><br><a href=""></a><br><a href=""></a><br><a href=""></a><br><!-- [Learn Python the Hard Way]() --></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;搜索引擎&quot;&gt;&lt;a href=&quot;#搜索引擎&quot; class=&quot;headerlink&quot; title=&quot;搜索引擎&quot;&gt;&lt;/a&gt;搜索引擎&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.google.com&quot; target=&quot;_blank&quot; rel=&quot;external
    
    </summary>
    
      <category term="资源" scheme="http://yoursite.com/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="资源" scheme="http://yoursite.com/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
</feed>
