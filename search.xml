<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[HTTP协议原理加实战笔记]]></title>
    <url>%2F2018%2F11%2F07%2FHTTP%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86%E5%8A%A0%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[一、导学Cache-Control设置:基本：max-age=100;设置public、private控制只能在客户端进行缓存，还是可以通过代理服务器进行缓存;设置must-revalidate,在缓存过期之后，必须到服务端验证过之后，才能继续使用缓存;设置no-cache、no-store控制我们是否使用缓存。 缓存验证:last-modified配合if-modified-since;etag配合if-none-match。 每个HTTP的头都有使用价值:Content-Type、Content-Encoding等用来约束数据类型;Cookie保持会话信息（常见的session方案就是通过cookie来实现的）;CORS实现跨域并保持安全性限制（如何保证跨域服务安全）。 浏览器输入URL后HTTP请求返回的完整过程如下图所示： Redirect为什么一开始就要做一个redirect? 首先判断需不需要redirect，以及redirect到哪里。App cache第二部，看缓存，因为请求的资源可能已经缓存过了。DNS输入的是域名，域名要对应成IP之后，我们才能真正的访问到服务器。 查找域名对应的IP地址，叫DNS解析。TCP有了IP之后，就要去创建TCP连接。经过TCP的三次握手之后，才能真正的把连接创建起来。如果请求是HTTPS的，要创建一个HTTPS的连接，跟TCP的三次握手不一样，中间要有一个保证安全的数据传输过程。Request连接创建好后，才真正开始发送HTTP请求的数据包。Response发送完成后，服务器接受到数据，进行数据操作后，返回我们请求想要的内容，开始返回数据。返回数据后，这个HTTP请求才真正的完成。这也是我们打开浏览器之后，输入URL之后，整个有关于数据加载的过程所会经历的每个时间点。 二、HTTP协议基础及发展历史2.1 5层网络模型介绍经典五层模型如下图所示： 物理层：主要作用是定义物理设备如何传输数据。简单说，物理层就是电脑的硬件，网卡端口，网线，网线连出去后的光缆。 数据链路层：在通信的实体间建立数据链路连接。 网络层：为数据在结点之间传输创建逻辑链路。逻辑链路包含从我的电脑访问百度的服务器，我们如何去寻找百度这台服务器所在的地址，它就是一个逻辑关系，这个关系是在网络层为我们创建的。 传输层：主要两个协议 TCP/IP协议，另一个UDP协议。更多情况下，使用的是TCP/IP协议，这是一个更可靠的帮我们传输数据的协议。 为用户提供可靠的端到端（End-to-End）服务; 传输层向高层屏蔽了下层数据通信的细节。 应用层： 为应用软件提供了很多服务; 构建于TCP协议之上; 屏蔽网络传输相关细节。 2.2 HTTP协议的发展历史HTTP/0.9：只有一个命令GET;没有HEADER等描述数据的信息;服务器发送完毕，就关闭TCP连接。 HTTP/1.0：增加了很多命令;增加status code和header;还增加多字符集支持、多部分发送、权限、缓存等。 HTTP/1.1：支持持久连接;增加了pipeline;增加host和其他一些命令。 HTTP2:现在还没有普及，但是是未来趋势。 HTTPS：安全版本的HTTP协议，实际使用内容和HTTP/1.1没有特别大的区别。 2.3 HTTP的三次握手TCP连接图如下所示： 三次握手时序图如下所示： 2.4 URI-URL和URN2.5 HTTP报文格式2.6 创建一个最简单的web服务三、HTTP各种特性总览3.1 认识HTTP客户端3.2 CORS跨域请求的限制与解决3.3 CORS跨域限制以及预请求验证3.4 缓存头Cache-Control的含义和使用3.5 缓存验证Last-Modified和Etag的使用3.6 cookie和session3.7 HTTP长连接3.8 数据协商3.9 Redirect3.10 CSP四、Nginx代理以及面向未来的HTTP4.1 Nginx安装和基础代理配置4.2 Nginx代理配置和代理缓存的用处4.3 HTTPS解析4.4 使用Nginx部署HTTPS服务4.5 HTTP2的优势和Nginx配置HTTP2的简单使用五、总结 参考：HTTP协议原理+实践 Web开发工程师必学]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[埋坑间隙碎笔]]></title>
    <url>%2F2018%2F11%2F06%2F%E5%9F%8B%E5%9D%91%E9%97%B4%E9%9A%99%E7%A2%8E%E7%AC%94%2F</url>
    <content type="text"><![CDATA[其实这个标题是参考《病隙碎笔》这本书的书名来的，哈哈。埋坑的点滴， 陆续整理中…… hexo阅读次数设置主要两种方式：LeanCloud和不蒜子参考：不蒜子统计方法LeanCloud统计方法 markdown加粗主要两种方式：121. **娜娜**2. _娜娜_ 显示效果，如下所示： 娜娜 娜娜]]></content>
      <categories>
        <category>埋坑</category>
      </categories>
      <tags>
        <tag>埋坑</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[娜娜的阅读清单]]></title>
    <url>%2F2018%2F11%2F01%2F%E5%A8%9C%E5%A8%9C%E7%9A%84%E9%98%85%E8%AF%BB%E6%B8%85%E5%8D%95%2F</url>
    <content type="text"><![CDATA[娜娜近段时间的阅读清单， 陆续整理中…… 已阅读《番茄工作法图解》《小狗钱钱》《从极简到极致》《即兴的智慧》《把时间当作朋友》《远见》《拆掉思维里的墙》《人生只有一次去做自己喜欢的事》《少有人走的路》 阅读ing《好好学习》《编写高质量代码：改善Python程序的91个建议 张颖//赖勇浩》《高效能人士的七个习惯》《人性的弱点》《走在人生边上》《干法》《穷查理宝典》 尚未阅读《美好人生运营指南》《怎样观察一朵花》《正念的奇迹》《跳着踢踏舞去上班》《非暴力沟通》《我不想活得这么累》《天真的幽默家》《人间便利店》《术与道》《黑天鹅》《细节》《滚雪球》]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python编程技巧（持续更新）]]></title>
    <url>%2F2018%2F10%2F30%2FPython%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[数据结构和算法序列分解成单独变量（序列解包）适用：任何序列（或可迭代的对象）解决方案：通过简单的赋值操作，但变量的总数和结构要与序列相吻合，如果元素的数量不匹配，将得到一个错误提示，如ValueError: not enough values to unpack (expected 3, got 2)。12345678910data = [&apos;ACME&apos;, 50, 91.1, (2012, 12, 21)]name, shares, price, (year, mon, day) = dataprint(name)print(year)print(mon)print(day)# ACME# 2012# 12# 21 分解元素适用：未知或任意长度的可迭代对象解决方案：”*表达式“应用场景：迭代一个变长的元组序列或和某些特定的字符串处理操作如拆分等。1234567891011121314151617181920212223records = [ (&apos;foo&apos;, 1, 2), (&apos;bar&apos;, &apos;hello&apos;), (&apos;foo&apos;, 3, 4)]def do_foo(x, y): print(&apos;foo&apos;, x, y)def do_bar(s): print(&apos;bar&apos;, s)for tag, *args in records: if tag == &apos;foo&apos;: do_foo(*args) elif tag == &apos;bar&apos;: do_bar(*args)# foo 1 2# bar hello# foo 3 4 12345678line = &apos;nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false&apos;uname, *fields, homedir, sh = line.split(&apos;:&apos;)print(uname)print(homedir)print(sh)# nobody# /var/empty# /usr/bin/false 保存最后N个元素适用：迭代或其他形式的处理过程中解决方案：collections.deque应用场景：文本匹配等somefile.txt:1234567Ilovepythonpythonyesyesyeslovepythonoppspythonnononopythonpython code:1234567891011121314151617181920212223242526272829303132333435363738394041from collections import dequedef search(lines, pattern, history=5): previous_lines = deque(maxlen=history) for line in lines: if pattern in line: yield line, previous_lines previous_lines.append(line)if __name__ == &apos;__main__&apos;: with open(&apos;somefile.txt&apos;) as f: for line, prevlines in search(f, &apos;python&apos;, 5): for pline in prevlines: print(pline, end=&apos;&apos;) print(line, end=&apos;&apos;) print(&apos;-&apos; * 20)# Ilovepython# --------------------# Ilovepython# python# --------------------# Ilovepython# python# yesyesyes# lovepython# --------------------# Ilovepython# python# yesyesyes# lovepython# oppspython# --------------------# python# yesyesyes# lovepython# oppspython# nonono# pythonpython-------------------- 参考资料《Python Cookbook（第3版）》]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我回来了]]></title>
    <url>%2F2018%2F10%2F29%2F%E6%88%91%E5%9B%9E%E6%9D%A5%E4%BA%86%2F</url>
    <content type="text"><![CDATA[今年三月以来，发生了很多事情，感觉这几个月自己就像坐在过山车上一样。感情始终是白卷，母胎单身狗默哀三分钟。若职业发展顺利也罢，不料却屡屡受挫。很长时间，这个个人网站也没有再打理了。 不过经过这段时间的反思后，对很多事情的看法也变了。 8月份，我花了一个月左右的时间，旅行、和各种有趣的人交流。旅行回来后，我花了很多时间阅读思考，题材涉及职业规划、个人成长等。中途也兼职晚上去教学生功课，主要是英语和数学哈。和学生一起的时光特别愉快。不过我知道，我还有我自己的职业目标。 这段时间我坚持早起、运动、每天晚上写日记、每天写一篇公众号文章后，发现自己也渐渐在内心里找回了以前的热情。 感谢这段时间家人的支持和理解，职场空白期不是一个很容易度过的时期，个中滋味就不在这里说了。也感谢舒帆姐帮忙把我的社保挂靠在她的舞蹈培训中心，使我不用担心社保断保的问题。还要感谢最近各种朋友推荐的工作机会。但是鉴于前段时间，处在职场调整期，不敢轻易应允，怕辜负各种期望。 网站也会继续更新了，希望我的分享可以帮到大家。大家一起成长，一起进步，一起加油哈。]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>个人感悟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git常见命令小结]]></title>
    <url>%2F2018%2F03%2F12%2FGit%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[一、前言Git是目前世界上最先进的分布式版本控制系统。Git是Linux创始人Linus花了两周时间自己用C写的一个分布式版本控制系统。学习Git分布式版本控制系统，可以帮助我们告别手动管理多个“版本”的痛苦过去，拥抱版本控制的美好明天。 二、安装Git具体安装教程请参考廖雪峰老师的官方网站。安装完成后，需要设置Git的用户名和邮箱，在命令行输入：12$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot; 注意git config命令的–global参数，表示全局配置。 三、创建版本库Repository3.1 创建空目录：123$ mkdir xxx （创建指定的名称的目录）$ cd xxx （切换工作目录）$ pwd （显示当前目录） 3.2 初始化仓库12$ git init （把当前目录变成Git可以管理的仓库）Initialized empty Git repository in /xxx/xxx/xxx/.git/ 初始化仓库后，当前目录下多了一个.git目录，这个目录是Git用来跟踪管理版本库的。如果没有看到.git目录，用ls-ah命令可以看见默认隐藏的目录。 3.3 添加文件到版本库 git add命令告诉Git把文件添加到仓库： 1$ git add &lt;file&gt; (如git add readme.md) git commit命令告诉Git把文件提交到仓库： 1$ git commit -m &quot;xxx&quot; -m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。 注意commit可以一次提交很多文件，所以可以多次add不同的文件。 四、查看日志4.1 查看提交日志git log命令显示从最近到最远的提交日志：1$ git log 精简日志，加上–pretty=oneline参数：1$ git log --pretty=oneline 用git log可以查看提交历史，以便确定要回退到哪个版本。 4.2 查看命令日志1$ git reflog $ git reflog命令用来记录每一次命令用git reflog查看命令历史，以便确定要回到未来的哪个版本。 五、版本回退在Git中，用HEAD表示当前版本，也就是最新的提交，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写成HEAD~100。 5.1 当前版本回退到上一个版本1$ git reset --hard HEAD^ 5.2 根据commit id指定某个版本12$ git reset --hard commit_id HEAD is now at commit_id xxx 六、管理文件操作6.1 显示文件内容1$ cat filename 6.2 查看仓库状态1$ git status 6.3 查看工作区和版本库最新版本的区别1$ git diff HEAD -- &lt;file&gt; 6.4 撤销工作区修改 1git checkout -- &lt;file&gt; git checkout – 让文件回到最近一次git commit或git add时的状态。命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令。 6.5 撤销暂存区修改1$ git reset HEAD &lt;file&gt; 把暂存区的修改撤销掉（unstage），重新放回工作区 6.6 删除文件删除工作区文件可以直接在文件管理器删除，或者用rm命令删除：1$ rm &lt;file&gt; 工作区文件删除后，工作区和版本库就不一致了。如果确定要从版本库删除文件，用命令git rm删掉，并且git commit:1$ git rm &lt;file&gt; 如果想撤销工作区文件的删除，因为版本库里还有文件，所以可以很轻松地把误删的文件恢复到最新版本：1$ git checkout -- &lt;file&gt; git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。 七、远程仓库7.1 GitHub设置7.1.1 注册GitHub账号登录GitHub官网，注册GitHub账号。 7.1.2 创建SSH Key如果用户主目录没有.ssh目录，打开Shell（Windows下打开Git Bash），创建SSH Key：1$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 按照默认设置完成后，在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对。注意，id_rsa是私钥，不能泄露出去，而id_rsa.pub是公钥，可以放心地告诉任何人。 7.1.3 Github设置SSH KeyGitHub-Account settings-SSH Keys-Add SSH Key，在Key文本框里粘贴id_rsa.pub文件的内容。 7.2 本地Git仓库添加远程库 GitHub-“Create a new repo 本地Git仓库下运行命令： 1$ git remote add origin git@github.com:username/repo_name.git 将本地Git仓库的所有内容推送到远程库上 1$ git push -u origin master 注意：由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。命令简化如下：1$ git push origin master 7.3 创建远程库并克隆到本地 登陆GitHub，创建一个新的仓库，名字叫repo_name，记得勾选勾选Initialize this repository with a README。 克隆一个本地库：$ git clone git@github.com:username/repo_name.git 八、分支管理8.1 创建与合并分支以dev分支为例 创建dev分支，并切换到dev分支：$ git checkout -b devgit checkout命令加上-b参数表示创建并切换，相当于以下两条命令：$ git branch dev$ git checkout dev 查看当前分支：$ git branch dev分支操作，和master分支的操作是一样的。 切换回master分支：$ git checkout master 把dev分支的工作成果合并到master分支上：$ git merge devgit merge命令用于合并指定分支到当前分支。 合并完成后，删除dev分支：$ git branch -d dev 查看branch，此时只剩下master分支：$ git branch 8.2 解决分支冲突当Git无法自动合并分支时，并且出现如下提示：Automatic merge failed; fix conflicts and then commit the result.就必须首先解决冲突。解决冲突后，再提交，合并完成。用git log –graph命令可以看到。1$ git log --graph --pretty=oneline --abbrev-commit 分支合并图缩略显示。 8.3 普通模式合并分支合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。1$ git merge --no-ff -m &quot;版本说明&quot; 分支名 –no-ff参数，表示禁用Fast forward 8.4 “储藏”当前工作现场修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。1$ git stash 查看工作现场保存位置，用git stash list命令看看：1$ git stash list 恢复工作现场： 是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；12$ git stash apply stash@&#123;0&#125; 恢复指定的stash$ git stash drop 另一种方式是用git stash pop，恢复的同时把stash内容也删了1$ git stash pop 8.5 Feature分支开发一个新feature，最好新建一个分支；1$ git checkout -b feature-xxx 如果要丢弃一个没有被合并过的分支，可以通过git branch -D 强行删除。1$ git branch -D feature-xxx 8.6 多人协作查看远程库信息，用git remote：1$ git remote 使用git remote -v显示更详细的信息：1$ git remote -v； 本地新建的分支如果不推送到远程，对其他人就是不可见的；从本地推送分支，使用git push origin branch-name:1$ git push origin branch-name 如果推送失败，先用git pull抓取远程的新提交:1$ git pull 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致:1git checkout -b branch-name origin/branch-name 建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin/branch-name:1git branch --set-upstream branch-name origin/branch-name 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。 九、标签管理发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。 9.1 创建标签命令git tag 用于新建一个标签，默认为HEAD，也可以指定一个commit id:1$ git tag &lt;name&gt; 命令git tag可以查看所有标签。 git show 查看标签信息：1$ git show &lt;tagname&gt; git tag -a -m “标签说明”可以指定标签信息:1git tag -a &lt;tagname&gt; -m &quot;标签说明&quot; -a指定标签名，-m指定说明文字 git tag -s -m “标签说明”可以用PGP签名标签，-s用私钥签名一个标签。 9.2 操作标签命令git push origin 可以推送一个本地标签：1$ git push origin &lt;tagname&gt; 命令git push origin –tags可以推送全部未推送过的本地标签：1$ git push origin --tags 命令git tag -d 可以删除一个本地标签：1git tag -d &lt;tagname&gt; 命令git push origin :refs/tags/可以删除一个远程标签。1git push origin :refs/tags/&lt;tagname&gt; 十、参与GitHub开源项目在GitHub上，可以任意Fork开源仓库。如果在GitHub上有个感兴趣的开源项目，可以在它的项目主页点“Fork”，在自己的账号下克隆了一个开源项目的仓库。然后从自己的账号下clone：git clone git@github.com:myusername/仓库名.git注意：一定要从自己的账号下clone仓库，这样你才能推送修改。如果你希望开源项目的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。可以推送pull request给官方仓库来贡献代码。 十一、更多国内的Git托管服务——码云。自定义Gitgit for windows 参考资料：Git教程-廖雪峰的官方网站更详细的Git使用教程，请详见廖雪峰老师的官方网站。这里只是整理了廖雪峰老师Git使用教程里的常用命令。]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[电脑多版本Python共存的方法]]></title>
    <url>%2F2018%2F02%2F12%2F%E7%94%B5%E8%84%91%E5%AE%89%E8%A3%85%E5%A4%9A%E7%89%88%E6%9C%ACpython%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[常说一山不容二虎，但是通过一些小技巧，一电脑还是可以容二python的（一机可容二蛇，逃）。如果电脑里有多个不同版本的python，安装python虚拟环境经常会出现python版本混乱的情况。比如通过mkvirtualenv新建虚拟环境后，进入虚拟环境后，命令行输入python,结果发现当前虚拟环境的python版本不是自己要的。网上查了常用的方法是修改python文件名，比如python2下的python.exe或pip.exe或virtualenv.exe或mkvirtualenv.bat等文件名改成python2.exe或pip2.exe或virtualenv2.exe或mkvirtualenv2.bat，python3同理。然后在命令行指定，比如基于python2的，就使用pip2 install xxx, mkvirtualenv2 xxx等。但是这样设置有点麻烦，而且有时虽然运行的是xx2,但是输入python验证后，发现还是基于python3的。这里我来介绍一个命令行指明python安装路径来指定python版本的方法，来安装对应的虚拟环境。这种方法我个人用起来觉得非常方便，但是具体因人而异。 本文例子基于以下电脑配置参数： 操作系统：windows10 64位python版本如下： Python 2.7.12，安装路径：C:\Python27 Python 3.5.3，安装路径：C:\Users\Administrator\AppData\Local\Programs\Python\Python35-32 经常使用python的童鞋知道，如果我们安装python的时候勾选了Add python.exe to path，则环境变量里面已经有python安装路径了。如果我们安装python的时候没有勾选Add python.exe to path，我们需要把python安装路径添加到环境变量。这是使用命令行运行pythond的前提, 否则会报错。这样找到python安装路径的方法就非常简单了，直接打开环境变量，复制里面的python路径就可以了。 假设我们要安装两个python虚拟环境，一个基于python2的虚拟环境apple2, 一个基于python3的虚拟环境apple3 基于python2的虚拟环境打开cmd，输入mkvirtualenv –python C:\Python27\python.exe apple2，然后再新建的虚拟环境下运行python,查看对应的python版本。运行结果如下：123456789C:\Users\Administrator&gt;mkvirtualenv --python C:\Python27\python.exe apple2Running virtualenv with interpreter C:\Python27\python.exeNew python executable in C:\Users\Administrator\Envs\apple2\Scripts\python.exeInstalling setuptools, pip, wheel...done.(apple2) C:\Users\Administrator&gt;pythonPython 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:24:40) [MSC v.1500 64 bit (AMD64)] on win32Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; ^Z 基于python3的虚拟环境（注意这里因为之前要安装一个只支持32位python的python第三方包，所以我安装python3的版本是32位的。）12345678910C:\Users\Administrator&gt;mkvirtualenv --python C:\Users\Administrator\AppData\Local\Programs\Python\Python35-32\python.exe apple3Running virtualenv with interpreter C:\Users\Administrator\AppData\Local\Programs\Python\Python35-32\python.exeUsing base prefix 'C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35-32'New python executable in C:\Users\Administrator\Envs\apple3\Scripts\python.exeInstalling setuptools, pip, wheel...done.(apple3) C:\Users\Administrator&gt;pythonPython 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 15:51:26) [MSC v.1900 32 bit (Intel)] on win32Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; ^Z 命令格式从上面看出创建不同版本的python虚拟环境的命令如下：mkvirtualenv –python xxx(python安装路径\python.exe) 虚拟环境名 也可以写成如下，亲测有效：mkvirtualenv –python==xxx(python安装路径\python.exe) 虚拟环境名]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>版本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[科学上网，开阔眼界]]></title>
    <url>%2F2017%2F12%2F12%2F%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%EF%BC%8C%E5%BC%80%E9%98%94%E7%9C%BC%E7%95%8C%2F</url>
    <content type="text"><![CDATA[Bandwagon Host VPS Hosting - Services - My Services - KiwiVM Control Panel - Shadowsocks Server - Install Shadowsocks Server - Go back(when Completed) - Remember your encryption/port/passaprd for Shadowsocks. 启动系统代理 - 全局模式 好了，可以科学上网，开阔眼界了。 下次有空折腾下多用户的设置，今天太晚了，好困啊。]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为元组元素命名提高程序可读性]]></title>
    <url>%2F2017%2F12%2F01%2F%E4%B8%BA%E5%85%83%E7%BB%84%E5%85%83%E7%B4%A0%E5%91%BD%E5%90%8D%E6%8F%90%E9%AB%98%E7%A8%8B%E5%BA%8F%E5%8F%AF%E8%AF%BB%E6%80%A7%2F</url>
    <content type="text"><![CDATA[数据格式固定，意味字段总数是确定的，字段相对位置也是确定的。这时可以使用元组存储信息。元组优势存储空间小，访问速度快。但是使用元组的时候会遇到一些问题，访问是，使用引索index访问，大量引索降低程序可读性。 student = (‘Jim’, 16, ‘male’, ‘jim8721@gmail.com’) nameprint student[0] ageif student[1] &gt;= 18:… sexif student[2] == ‘male’:… 程序将大量充斥着0 1 2 3这样的一些引索值，这些数字对于程序的维护是不利的，因为很难一眼就看出这些0 1 2代表是什么含义 C语言宏定义 #define NAME 0 #define AGE 1 c语言的枚举类型enum Studnet { NAME, AGE, SEX}它们分别等于0 1 2这些数字 方案1： 定义类似于其他语言的枚举类型，也就是定义一系列数值常量。方案2：使用标准库中collections.nametuple替代内置tuple 方案1： 定义类似于其他语言的枚举类型，也就是定义一系列数值常量。 python没有真正的枚举类型，但是我们可以定义一些常量，访问元组的字段就可以用这些常量了。NAME = 0AGE = 1SEX = 2EMAIL = 3 student = (‘Jim’, 16, ‘male’, ‘jim8721@gmail.com’) nameprint student[NAME] ageif student[AGE] &gt;= 18:… sexif student[SEX] == ‘male’:… 列表拆包的形式：NAME. AGE, SEX, EMAIL = xrange(4) student = (‘Jim’, 16, ‘male’, ‘jim8721@gmail.com’) nameprint student[NAME] ageif student[AGE] &gt;= 18:… sexif student[SEX] == ‘male’:…会分别把0 1 2 3赋给这些变量 方案2：使用标准库中collections.nametuple替代内置tuple from collections import nametuple Student = nametuple(‘Student’, [‘name’, ‘age’, ‘sex’, ‘email’]) nametuple函数能返回一个内置元组的子类第一个参数，新创建的类起个名字然后传入每个引索的名字相当于类的工厂 s就是一个命名的元组 s = Student(‘Jim’, 16, ‘male’, ‘jim@gmail.com’)sStudent(name=’Jim’, age=16, sex=’male’, email=’jim@gmail.com’) 位置传参 还可以使用关键字传参s2 = Student(name=’Jim’, age=16, sex=’male’, email=’jim@gmail.com’) s.names.ages.sex 我们以类对象的形式访问元组，整个开销仅比普通元组大了一点点 并且s是内置元组的子类 任何使用普通元组的地方都可以使用nametuple from collections import nametupleTraceback (most recent call last): File ““, line 1, in ImportError: cannot import name nametuple???? 这是怎么回事？]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[列表字典集合中根据条件筛选数据]]></title>
    <url>%2F2017%2F11%2F30%2F%E5%88%97%E8%A1%A8%E5%AD%97%E5%85%B8%E9%9B%86%E5%90%88%E4%B8%AD%E6%A0%B9%E6%8D%AE%E6%9D%A1%E4%BB%B6%E7%AD%9B%E9%80%89%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[实际案例； 过滤掉列表[3,9,-1,10,20,-2…中的负数] 筛出字典{‘Lilei’:79, ‘Jim’:88, ‘Lucy’:92…}中值高于90的项 筛出集合{77，89，32，20…}中能被3整除的元素 通用做法=迭代：123456789101112131415161718192021222324252627282930data = [1, 5, -3, -2, 6, 0 , 9]res = []for x in data: 依次迭代列表中每个项 if x &gt;= 0: 条件判断 res.append(x)print res函数式编程 解析等解决方案：## 列表#### filter函数 filter(lambda x: x &gt;=0, data)#### 列表解析 [x for x in data if x &gt;= 0]## 字典#### 字典解析 &#123;k:v for k,v in d.iteritems() if v &gt; 90&#125;## 集合#### 集合解析 &#123;x for x in s if x % 3 == 0&#125;生成随机列表 from random import randintdata = [randint(-10, 10) for _ in xrange(10)]过滤掉其中负数### filter函数filter(lambda x: x &gt;= 0, data) C:\Windows\system32&gt;python2Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:24:40) [MSC v.1500 64 bit (AMD64)] on win32Type “help”, “copyright”, “credits” or “license” for more information. from random import randintdata = [randint(-10, 10) for _ in xrange(10)]data[-1, 8, 9, 9, 4, 1, -9, 7, -7, -1]filter? File ““, line 1 filter? ^SyntaxError: invalid syntaxfilter help(filter)Help on built-in function filter in module builtin: filter(…) filter(function or None, sequence) -&gt; list, tuple, or string Return those items of sequence for which function(item) is true. If function is None, return the items that are true. If sequence is a tuple or string, return the same type, else return a list. filter(lambda x: x &gt;= 0, data)[8, 9, 9, 4, 1, 7] 123### 列表解析 [x for x in data if x &gt;= 0][8, 9, 9, 4, 1, 7]``` filter和列表解析对比 timeit filter(lambda x:x &gt;= 0, data) timeit filter(lambda x: x &gt;= 0, data) File ““, line 1 timeit filter(lambda x: x &gt;= 0, data) ^SyntaxError: invalid syntaxtimeitTraceback (most recent call last): File ““, line 1, in NameError: name ‘timeit’ is not definedhelp(timeit)Traceback (most recent call last): File ““, line 1, in NameError: name ‘timeit’ is not definedimport timeittimeit filter(lambda x: x &gt;= 0, data) File ““, line 1 timeit filter(lambda x: x &gt;= 0, data) ^SyntaxError: invalid syntaxtimeit(‘filter(lambda x: x &gt;= 0, data)’)Traceback (most recent call last): File ““, line 1, in TypeError: ‘module’ object is not callablefrom timeit import timeittimeit(‘filter(lambda x: x &gt;= 0, data)’)Traceback (most recent call last): File ““, line 1, in File “C:\Python27\lib\timeit.py”, line 237, in timeit return Timer(stmt, setup, timer).timeit(number) File “C:\Python27\lib\timeit.py”, line 202, in timeit timing = self.inner(it, self.timer) File ““, line 6, in innerNameError: global name ‘data’ is not definedfrom random import randintdata = [randint(-10, 10) for in xrange(10)]data[-10, -6, 8, 2, -6, -1, -3, -6, -9, -7]filter(lambda x: x &gt;= 0, data)[8, 2]from timeit import timeittimeit(‘filter(lambda x: x &gt;= 0, data)’)Traceback (most recent call last): File ““, line 1, in File “C:\Python27\lib\timeit.py”, line 237, in timeit return Timer(stmt, setup, timer).timeit(number) File “C:\Python27\lib\timeit.py”, line 202, in timeit timing = self.inner(it, self.timer) File ““, line 6, in innerNameError: global name ‘data’ is not definedfrom timeit import timeitfrom random import randinttimeit(‘filter(lambda x: x &gt;= 0, data=[randint(-10, 10) for in xrange(10)])’)Traceback (most recent call last): File ““, line 1, in File “C:\Python27\lib\timeit.py”, line 237, in timeit return Timer(stmt, setup, timer).timeit(number) File “C:\Python27\lib\timeit.py”, line 202, in timeit timing = self.inner(it, self.timer) File ““, line 6, in innerNameError: global name ‘randint’ is not definedtimeit filter(lambda x:x &gt;= 0, [-1, 8, 9, 9, 4, 1, -9, 7, -7, -1]) File ““, line 1 timeit filter(lambda x:x &gt;= 0, [-1, 8, 9, 9, 4, 1, -9, 7, -7, -1]) ^SyntaxError: invalid syntaxtimeit(‘filter(lambda x: x &gt;= 0, [-1, 8, 9, 9, 4, 1, -9, 7, -7, -1])’)4.256596223743941 timeit(‘[x for x in [-1, 8, 9, 9, 4, 1, -9, 7, -7, -1] if x &gt;= 0]’)2.2746409958225513 通常认为列表解析更快一点，首选也是列表解析这两种方式都远快于迭代的方式 字典d = {x：randint(60, 100) for x in xrange(1, 21)} from random import randintd = {x：randint(60, 100) for x in xrange(1, 21)} File ““, line 1 d = {x：randint(60, 100) for x in xrange(1, 21)} ^SyntaxError: invalid syntaxd = {x: randint(60, 100) for x in xrange(1, 21)}d{1: 67, 2: 87, 3: 79, 4: 76, 5: 78, 6: 61, 7: 75, 8: 97, 9: 83, 10: 71, 11: 94, 12: 87, 13: 65, 14: 88, 15: 90, 16: 91, 17: 76, 18: 73, 19: 67, 20: 77} {k: v for k, v in d.iteritems() if v &gt; 90} from random import randintd = {x：randint(60, 100) for x in xrange(1, 21)} File ““, line 1 d = {x：randint(60, 100) for x in xrange(1, 21)} ^SyntaxError: invalid syntaxd = {x: randint(60, 100) for x in xrange(1, 21)}d{1: 67, 2: 87, 3: 79, 4: 76, 5: 78, 6: 61, 7: 75, 8: 97, 9: 83, 10: 71, 11: 94, 12: 87, 13: 65, 14: 88, 15: 90, 16: 91, 17: 76, 18: 73, 19: 67, 20: 77}{k: v for k, v in d.iteritems() if v &gt; 90}{8: 97, 16: 91, 11: 94} 集合data转换成集合s = set(data)集合解析类似字典解析{x for x in s if x % 3 == 0} from random import randintdata = [randint(-10, 10) for _ in xrange(10)]data[-8, -6, 6, -3, 10, -10, 8, -5, 2, 9]s = set(data){for x in s if x % 3 == 0} File ““, line 1 {for x in s if x % 3 == 0} ^SyntaxError: invalid syntax{x for x in s if x % 3 == 0}set([9, -6, -3, 6])]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SS in Ubuntu14.04]]></title>
    <url>%2F2017%2F10%2F20%2FSS%20in%20Ubuntu14.04%2F</url>
    <content type="text"><![CDATA[To set ss in your computer, please follow below steps:First register in http://banwagong.cn/ and select and create an account.Details: http://blog.csdn.net/win_turn/article/details/51559867 After set up your ss, please follow below steps to create one in your computer(My computer is Ubuntu14.04): Installation:sudo apt-get updatesudo apt-get install python-pipsudo apt-get install python-setuptools m2crypto pip install shadowsocks(or sudo pip install sxxxxxxxxxs) Download:download sxxxxxxxxxs.json file from email attachment to your computer example: /home/nana/Documents/sxxxxxxxxxs.json SwitchyOmega Setting:Visit https://pan.baidu.com/s/1gfHupSR and download SwitchyOmega plugin;Visit chrome://extensions/ in your Chrome browser and drag SwitchyOmega plugin to your extensions; Click proxy in the left sidebar and make sure below setting is applied:Protocol: SOCKS5Server: 127.0.0.1Port: 1080 And click Apply Changes Auto Switch:Click the SwitchyOmega plugin in your browser and make sure it’s auto switch. Startup in your terminal:sslocal -c /xxx/xxx/xxx/sxxxxxxxxxs.jsonexample: sslocal -c /home/nana/Documents/sxxxxxxxxxs.json]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu14.04,nginx,uwsgi部署django项目]]></title>
    <url>%2F2017%2F10%2F14%2FUbuntu14.04%20nginx%20uwsigi%E9%83%A8%E7%BD%B2django%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[自从我这Windows党在配置Ubuntu14.04开发环境的时候，把Ubuntu系统折腾奔溃了以后（千万不要手贱重装Ubuntu14.04的python, 升级或者多python共存都可以，就是不要把默认的卸载了重装，活生生的教训摆在眼前）。我就暗下决心要在家用虚拟机装个Ubuntu14.04好好折腾。趁着周末，抽出了几个小时，折腾了下如何用Ubuntu14.04,nginx,uwsgi部署django项目。中间遇到了几个坑。幸好这几个坑都没有很深，看来平时要多折腾多部署。今晚有点晚了，博客内容有点乱，下次复习部署的过程再把博客细节完善好。 1.下载虚拟机和Ubuntu1.1 下载Ubuntu14.04Ubuntu14.04官网下载ubuntu-14.04.5-desktop-amd64.iso 1.2 下载虚拟机下载虚拟机VM Workstation 14 虚拟机名称：ubuntu14 虚拟磁盘存储单个文件 2.安装nginx sudo apt-get install nginx 安装nginxps aux|grep nginx 查看进程是否启动 ifconfig查看IP地址，浏览器打开Welcome to nginx!欢迎界面安装成功！ 3.安装mysqlsudo apt-get install mysql-server提示输入mysql密码安装完成会自动启动mysql-serverps aux|grep mysql 查看进程是否启动 有个进程叫/usr/sbin/mysqld，就是mysql的server进入mysql mysql -u root -pshow databases; 记得分号 vim - gnome 安装sudo vim /etc/mysql/my.cnf 注意这里是my.cnf文件了mysql的ip绑定 bind-addressi 进入编辑模式bind-address = 127.0.0.1更改为：bind-address = 0.0.0.0 就可以通过IP地址来连接我们的mysql这里更改只是为了windows连接进来，真正部署尽量用127.0.0.1，这样就不会让我们的端口暴露出来。esc退出编辑模式，按shift加冒号，wq退出并保存配置文件修改完后，重启mysqlsudo service mysql restartmysql重启成功 ifconfig查看ip地址192.168.77.128navicat 主机名或ip地址填写ip地址连接测试 1130 - Host ‘192.168.77.128’ is not allowed to connect to this MySQL server默认mysql是只允许本地连接 mysql -h 192.168.77.128 -u root -pERROR 1130 (HY000): Host ‘192.168.77.128’ is not allowed to connect to this MySQL server用host连接也是不允许的 修改配置让所有ip地址都可以连接进来呢？GRANT ALL PRIVILEGES ON . TO ‘root’@’192.168.77.128’ IDENTIFIED BY ‘8xxxxxxxxn’ WITH GRANT OPTION;GRANT ALL PRIVILEGES ON . TO ‘root’@’%’ IDENTIFIED BY ‘8xxxxxxxxn’ WITH GRANT OPTION;.-指的是所有表 这里也可以指明某张表% 所有IP都可以访问123456789101112131415161718nana@ubuntu:~/Music$ mysql -u root -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 39Server version: 5.5.57-0ubuntu0.14.04.1 (Ubuntu)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;8xxxxxxxxn&apos; WITH GRANT OPTION;Query OK, 0 rows affected (0.00 sec)mysql&gt; 生效了 还需要刷新权限mysql&gt; FLUSH PRIVILEGES;Query OK, 0 rows affected (0.00 sec) 连接测试-连接成功这样就能通过主机的navicat去连接虚拟机上的数据库了 新建数据库 完成数据库的连接配置 Mysql配置完成 4.安装虚拟环境不管开发还是生产环境都尽量用虚拟环境来做nana@ubuntu:~/Music$ pip install virtualenv程序“pip”尚未安装。 您可以使用以下命令安装：12345678910111213141516171819202122232425262728sudo apt-get install python-pipnana@ubuntu:~/Music$ sudo apt-get install python-pipnana@ubuntu:~/Music$ pip install virtualenvDownloading/unpacking virtualenv Downloading virtualenv-15.1.0-py2.py3-none-any.whl (1.8MB): 1.8MB downloadedInstalling collected packages: virtualenvCleaning up...Exception:Traceback (most recent call last): File &quot;/usr/lib/python2.7/dist-packages/pip/basecommand.py&quot;, line 122, in main status = self.run(options, args) File &quot;/usr/lib/python2.7/dist-packages/pip/commands/install.py&quot;, line 283, in run requirement_set.install(install_options, global_options, root=options.root_path) File &quot;/usr/lib/python2.7/dist-packages/pip/req.py&quot;, line 1436, in install requirement.install(install_options, global_options, *args, **kwargs) File &quot;/usr/lib/python2.7/dist-packages/pip/req.py&quot;, line 672, in install self.move_wheel_files(self.source_dir, root=root) File &quot;/usr/lib/python2.7/dist-packages/pip/req.py&quot;, line 902, in move_wheel_files pycompile=self.pycompile, File &quot;/usr/lib/python2.7/dist-packages/pip/wheel.py&quot;, line 206, in move_wheel_files clobber(source, lib_dir, True) File &quot;/usr/lib/python2.7/dist-packages/pip/wheel.py&quot;, line 193, in clobber os.makedirs(destsubdir) File &quot;/usr/lib/python2.7/os.py&quot;, line 157, in makedirs mkdir(name, mode)OSError: [Errno 13] Permission denied: &apos;/usr/local/lib/python2.7/dist-packages/virtualenv-15.1.0.dist-info&apos;Storing debug log for failure in /home/nana/.pip/pip.log 安装虚拟环境报错命令前面加sudo，问题解决了sudo pip install virtualenv sudo pip install virtualenvwrapper安装完virtualenvwrapper之后，实际上workon命令是不能用的需要编辑一个文件主目录下面有个bashrc文件，编辑这个文件：vim ~/.bashrcexport WORKON_HOME=$HOME/.virtualenvssource /home/nana/.local/bin/virtualenvwrapper.sh（WORKON_HOME virtualenvwrapper集中保存虚拟环境的路径 凡是通过mkvirtualenv命令创建的虚拟环境都会放到这里来） nana@ubuntu:~/Music$ source ~/.bashrcbash: /home/nana/.local/bin/virtualenvwrapper.sh: 没有那个文件或目录nana@ubuntu:~/Music$ vim ~/.bashrcnana@ubuntu:~/Music$ source ~/.bashrcbash: /home/nana/.local/usr/bin/virtualenvwrapper.sh: 没有那个文件或目录 export WORKON_HOME=$HOME/.virtualenvssource /usr/local/bin/virtualenvwrapper.sh改成这样，注意Ubuntu14.04这里要这样写http://blog.csdn.net/yilovexing/article/details/72961594123456789101112131415161718192021222324252627282930nana@ubuntu:~/Music$ vim ~/.bashrcnana@ubuntu:~/Music$ source ~/.bashrcvirtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/premkprojectvirtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/postmkprojectvirtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/initializevirtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/premkvirtualenvvirtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/postmkvirtualenvvirtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/prermvirtualenvvirtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/postrmvirtualenvvirtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/predeactivatevirtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/postdeactivatevirtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/preactivatevirtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/postactivatevirtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/get_env_detailsnana@ubuntu:~/Music$ workonnana@ubuntu:~/Music$ nana@ubuntu:~/Music$ mkvirtualenv molNew python executable in /home/nana/.virtualenvs/mol/bin/pythonInstalling setuptools, pip, wheel...done.virtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/mol/bin/predeactivatevirtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/mol/bin/postdeactivatevirtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/mol/bin/preactivatevirtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/mol/bin/postactivatevirtualenvwrapper.user_scripts creating /home/nana/.virtualenvs/mol/bin/get_env_details(mol) nana@ubuntu:~/Music$ pip listDEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning.pip (9.0.1)setuptools (36.6.0)wheel (0.30.0) 虚拟环境创建完成了 5.安装开发包本地开发包导出来1234567891011121314151617181920212223242526272829303132333435363738394041424344454647C:\Windows\system32&gt;workonPass a name to activate one of the following virtualenvs:==============================================================================article_spiderFreshShopmolnanablogportuspy22scrapypy2scrapypy3scrapypython_learningtestvir2tp_supplier_platformC:\Windows\system32&gt;workon mol(mol) C:\Windows\System32&gt;pip listPackage Version---------------------- ---------certifi 2017.4.17chardet 3.0.4Django 1.9.8django-crispy-forms 1.6.1django-formtools 2.0django-pure-pagination 0.3.0django-simple-captcha 0.4.6DjangoUeditor 1.8.143future 0.16.0httplib2 0.9.2idna 2.5MySQL-python 1.2.5olefile 0.44Pillow 4.2.0pip 9.0.1requests 2.18.1setuptools 36.0.1six 1.10.0urllib3 1.21.1wheel 0.29.0xlrd 1.0.0XlsxWriter 0.9.8xlwt 1.2.0(mol) C:\Windows\System32&gt;pip freeze &gt; requirements.txt(mol) C:\Windows\System32&gt; 拷贝这个文件的内容到虚拟机的新建文件里 虚拟机里通过requriemtns来安装它从这个文件读取，然后一个一个的开发包安装到虚拟环境里面 报错12345678910sh: 1: mysql_config: not foundTraceback (most recent call last): File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt; File &quot;/tmp/pip-build-O8vP9C/MySQL-python/setup.py&quot;, line 17, in &lt;module&gt; metadata, options = get_config() File &quot;setup_posix.py&quot;, line 43, in get_config libs = mysql_config(&quot;libs_r&quot;) File &quot;setup_posix.py&quot;, line 25, in mysql_config raise EnvironmentError(&quot;%s not found&quot; % (mysql_config.path,))EnvironmentError: mysql_config not found https://stackoverflow.com/questions/5178292/pip-install-mysql-python-fails-with-environmenterror-mysql-config-not-foundsudo apt-get install libmysqlclient-dev 发现某个开发包安装比较慢，Ctrl C停掉整个过程，单独安装这个开发包，使用豆瓣源加速安装。http://pypi.douban.com/simple/https://www.douban.com/note/302711300/注意不要用https 用豆瓣源下载pillow失败 清华源也是同样的问题 正常安装先 Failed building wheel for MySQL-pythonsudo apt-get install libmysqlclient-dev 发现我之前安装了这个，是不是可以暂时不安装呢Failed building wheel for mysqlclient 又报错了，然后发现两个报错都提到这个fatal error: Python.h: 没有那个文件或目录解决方法：sudo apt-get install python-dev 6.启动项目查看项目是否可以启动123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293nana@ubuntu:~/Music/MOl$ python manage.py runserverTraceback (most recent call last): File &quot;manage.py&quot;, line 8, in &lt;module&gt; from django.core.management import execute_from_command_lineImportError: No module named django.core.managementnana@ubuntu:~/Music/MOl$ workonmolnana@ubuntu:~/Music/MOl$ workon mol(mol) nana@ubuntu:~/Music/MOl$ python manage.py runserverPerforming system checks.../home/nana/.virtualenvs/mol/local/lib/python2.7/site-packages/DjangoUeditor/urls.py:11: RemovedInDjango110Warning: django.conf.urls.patterns() is deprecated and will be removed in Django 1.10. Update your urlpatterns to be a list of django.conf.urls.url() instances instead. url(r&apos;^controller/$&apos;,get_ueditor_controller)System check identified no issues (0 silenced).You have unapplied migrations; your app may not work properly until they are applied.Run &apos;python manage.py migrate&apos; to apply them.October 15, 2017 - 11:21:49Django version 1.9.8, using settings &apos;MOl.settings&apos;Starting development server at http://127.0.0.1:8000/Quit the server with CONTROL-C.^CUnhandled exception in thread started by &lt;function wrapper at 0x7fc6d4f4e320&gt;Traceback (most recent call last): File &quot;/home/nana/.virtualenvs/mol/local/lib/python2.7/site-packages/django/utils/autoreload.py&quot;, line 234, in wrapper filename = traceback.extract_tb(tb)[-1][0]TypeError: &apos;NoneType&apos; object is not callable(mol) nana@ubuntu:~/Music/MOl$ python manage.py makemigrations/home/nana/.virtualenvs/mol/local/lib/python2.7/site-packages/DjangoUeditor/urls.py:11: RemovedInDjango110Warning: django.conf.urls.patterns() is deprecated and will be removed in Django 1.10. Update your urlpatterns to be a list of django.conf.urls.url() instances instead. url(r&apos;^controller/$&apos;,get_ueditor_controller)No changes detected(mol) nana@ubuntu:~/Music/MOl$ python manage.py migrate/home/nana/.virtualenvs/mol/local/lib/python2.7/site-packages/DjangoUeditor/urls.py:11: RemovedInDjango110Warning: django.conf.urls.patterns() is deprecated and will be removed in Django 1.10. Update your urlpatterns to be a list of django.conf.urls.url() instances instead. url(r&apos;^controller/$&apos;,get_ueditor_controller)Operations to perform: Apply all migrations: xadmin, users, courses, admin, sessions, auth, captcha, contenttypes, organization, operationRunning migrations: Rendering model states... DONE Applying contenttypes.0001_initial... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0001_initial... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying users.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying captcha.0001_initial... OK Applying organization.0001_initial... OK Applying organization.0002_auto_20170712_2240... OK Applying organization.0003_auto_20170723_2037... OK Applying organization.0004_auto_20170725_1731... OK Applying organization.0005_teacher_image... OK Applying courses.0001_initial... OK Applying courses.0002_auto_20170712_2240... OK Applying courses.0003_course_course_org... OK Applying courses.0004_course_category... OK Applying courses.0005_course_tag... OK Applying courses.0006_video_url... OK Applying courses.0007_video_learn_times... OK Applying courses.0008_course_teacher... OK Applying courses.0009_auto_20170728_2318... OK Applying courses.0010_course_is_banner... OK Applying courses.0011_auto_20170826_1149... OK Applying operation.0001_initial... OK Applying organization.0006_teacher_age... OK Applying organization.0007_courseorg_tag... OK Applying sessions.0001_initial... OK Applying users.0002_banner_emailverifyrecord... OK Applying users.0003_auto_20170708_1210... OK Applying users.0004_auto_20170708_1523... OK Applying users.0005_auto_20170708_2220... OK Applying users.0006_auto_20170802_0829... OK Applying xadmin.0001_initial... OK Applying xadmin.0002_log... OK Applying xadmin.0003_auto_20160715_0100... OK(mol) nana@ubuntu:~/Music/MOl$ python manage.py runserverPerforming system checks.../home/nana/.virtualenvs/mol/local/lib/python2.7/site-packages/DjangoUeditor/urls.py:11: RemovedInDjango110Warning: django.conf.urls.patterns() is deprecated and will be removed in Django 1.10. Update your urlpatterns to be a list of django.conf.urls.url() instances instead. url(r&apos;^controller/$&apos;,get_ueditor_controller)System check identified no issues (0 silenced).October 15, 2017 - 11:22:58Django version 1.9.8, using settings &apos;MOl.settings&apos;Starting development server at http://127.0.0.1:8000/Quit the server with CONTROL-C. 记得要在虚拟环境里这样弄记得migrate 192.168.77.128:8000 但是这里显示的是nginx192.168.77.128:8080 网站访问成功，但是静态文件没有显示成功 navicat数据传输 从主机传输到虚拟机 7.uwsgi方式启动项目uwsgi方式启动起来 安装uwsgi pip install uwsgiSuccessfully installed uwsgi-2.0.15 测试uwsgi 用http的方式测试uwsgi –http :8080 –module MOl.wsgi注意命令要写对http://192.168.77.128:8080/ 浏览器访问 没问题 1234567891011121314151617181920212223242526272829303132# the upstream component nginx needs to connect toupstream django &#123;# server unix:///path/to/your/mysite/mysite.sock; # for a file socketserver 127.0.0.1:8000; # for a web port socket (we&apos;ll use this first)&#125;# configuration of the serverserver &#123;# the port your site will be served onlisten 80;# the domain name it will serve forserver_name 你的ip地址 ; # substitute your machine&apos;s IP address or FQDNcharset utf-8;# max upload sizeclient_max_body_size 75M; # adjust to taste# Django medialocation /media &#123; alias 你的目录/Mol/media; # 指向django的media目录&#125;location /static &#123; alias 你的目录/Mol/static; # 指向django的static目录&#125;# Finally, send all non-media requests to the Django server.location / &#123; uwsgi_pass django; include uwsgi_params; # the uwsgi_params file you installed&#125;&#125; 你的ip地址 ip地址或者域名都可以 1234567891011121314151617181920212223242526272829303132# the upstream component nginx needs to connect toupstream django &#123;# server unix:///path/to/your/mysite/mysite.sock; # for a file socketserver 127.0.0.1:8000; # for a web port socket (we&apos;ll use this first)&#125;# configuration of the serverserver &#123;# the port your site will be served onlisten 80;# the domain name it will serve forserver_name 192.168.77.128 ; # substitute your machine&apos;s IP address or FQDNcharset utf-8;# max upload sizeclient_max_body_size 75M; # adjust to taste# Django medialocation /media &#123; alias /home/nana/Music/MOl/media; # 指向django的media目录&#125;location /static &#123; alias /home/nana/Music/MOl/static; # 指向django的static目录&#125;# Finally, send all non-media requests to the Django server.location / &#123; uwsgi_pass django; include uwsgi_params; # the uwsgi_params file you installed&#125;&#125; 建立软链接sudo cp uc_nginx.conf /etc/nginx/conf.d/ 重启nginxsudo service nginx restart ps aux|grep nginx 查看nginx是否已经启动 所有static文件全部放到一个目录下面来 collectstatic会将所有static文件放到一个目录上面来 STATICFILES_DIRS注释掉，这两个不能同时存在 甚至Xadmin的静态文件也会拷贝到这里来 8.uwsgi的socket方式启动项目新建uwsgi的配置文件 uwsgi不对外暴露http方式 通过读配置文件来启动我们的uwsgisocket方式启动，而不是http方式来启动 socket比http方式传输效率更快 nginx指明转发到8000端口，所有uwsgi也要指明8000端口123456789101112131415161718192021222324# mysite_uwsgi.ini file[uwsgi]# Django-related settings# the base directory (full path)chdir = /home/nana/Music/MOl# Django&apos;s wsgi filemodule = MOl.wsgi# the virtualenv (full path)# process-related settings# mastermaster = true# maximum number of worker processesprocesses = 10# the socket (use the full path to be safesocket = 127.0.0.1:8000# ... with appropriate permissions - may be needed# chmod-socket = 664# clear environment on exitvacuum = truevirtualenv = /home/nana/.virtualenvs/mol# logto = /tmp/mylog.log 注意这里要注释掉 保存后，通过uwsgi来启动 http://192.168.77.128/ 访问网站 没有问题 注意这里不要加上8000端口完成uwsgi的配置完成ip地址访问 测试域名访问修改hosts文件 uwsgi的重启 参考教程]]></content>
      <categories>
        <category>部署</category>
      </categories>
      <tags>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[404和500页面配置]]></title>
    <url>%2F2017%2F10%2F14%2F404%E5%92%8C500%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[生产环境需要配置404和500页面，如果没有配置404和500页面，给用户的体验不是很好。 Django配置404和500页面具体如下： templates设置404和500页面拷贝到templates目录下。 View设置views.py:1234567891011121314def page_not_found(request): # 全局404处理函数 from django.shortcuts import render_to_response response = render_to_response(&apos;404.html&apos;, &#123;&#125;) response.status_code = 404 return responsedef page_error(request): # 全局500处理函数 from django.shortcuts import render_to_response response = render_to_response(&apos;500.html&apos;, &#123;&#125;) response.status_code = 500 return response url设置根urls.py文件设置：123# 全局404和500页面配置handler404 = &apos;users.views.page_not_found&apos;handler500 = &apos;users.views.page_error&apos; settings设置123settings.py：Debug=False （生成环境部署的时候必须改为False,否则报错提示信息可能会泄漏网站的关键信息)ALLOWED_HOSTS = [&apos;*&apos;] (所有客户端都可以连接) 注意，Debug=False的情况下，Django是不会再帮你代管static文件的访问。部署的时候Apache或者Nginx会自动代理这些静态文件。如下这种方式就会失效：1234STATIC_URL = &apos;/static/&apos;STATICFILES_DIRS = ( os.path.join(BASE_DIR, &quot;static&quot;),) 我们给static配置url处理函数：setting.py:STATIC_ROOT = os.path.join(BASE_DIR, ‘static’)urls.py:url(r’^static/(?P.*)$’, serve, {“document_root”: STATIC_ROOT}), 重启系统]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python2.7项目升级python3.6]]></title>
    <url>%2F2017%2F10%2F12%2Fpython2-7%E9%A1%B9%E7%9B%AE%E5%8D%87%E7%BA%A7python3-6%2F</url>
    <content type="text"><![CDATA[新建python3虚拟环境首先新建python3.6的虚拟环境，关于python2和python3虚拟环境的共存，之前的博客电脑多版本Python共存的方法。这里就不讲了。 重装虚拟环境安装的开发包 打包安装：requirements.txtpip freeze &gt; requirements.txtpip install -r requirements.txt搭配豆瓣源清华源加速安装。 单个安装：或者一个一个开发包安装，比较可控。注意：mysqlclient(支持python3和python2)替换MySQL-Python(只支持python2.7)xlrd/XlwtWriter/xlwt - Excel输入有关 Project Interpreter配置虚拟环境开发包升级加了新功能的要合并 setting配置django升级到1.11的，记得将django.core.context_processors.media更改成django.template.context_processors.media(django版本不同的原因) models.py里面定义的unicode()函数改成str()函数]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Text使用技巧]]></title>
    <url>%2F2017%2F09%2F01%2FSublime%20Text%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[前言：本文基于Windows系统 一、安装Sublime Text安装地址：Sublime Text 二、常用快捷键sublime快捷键配置：Shift+Ctrl+P打开命令面板，输入keybin（sublime支持模糊匹配），点击提示里的Preferences: Key Bindings - Default这一项，就可以看到所有sublime的快捷键配置。 Ctrl+N: 打开新页面Ctrl+Tab: 两个页面之间做跳转Ctrl+J: 合并两个代码行（光标需要定位在第一个代码行后面）Ctrl+[: 回退一个级别Ctrl+]: 缩进一个级别Ctrl+L: 选择当前行Ctrl+C: 拷贝Ctrl+V: 粘贴Ctrl+Enter: 当前行之下新增一行Shift+Ctrl+Enter: 当前行之上新增一行Ctrl+Z: 撤销操作Ctrl+D: 选中相同关键词Ctrl+鼠标左键: 进入多点编辑模式Esc: 跳出多点编辑模式Ctrl+A: 全选Ctrl+K+B: 打开侧边栏Shift+Ctrl+P： 打开命令面板Command Palette。Sublime的命令面板非常强大，可以减少对鼠标的以来，多用键盘。输入相应的单词，就可以执行想要的操作。 操作粒度：方向键左右键： 移动单位的是一个字符Alt+方向键左右键： 移动单位的是一个单词Ctrl+方向键左右键： 移动到一行代码的头部和末尾Shift+方向键左右键： 选中光标左/右边一个字符Shift+Alt+方向键左右键： 选中光标左/右边一个单词 Shift+Ctrl+方向键左右键： 选中光标左/右边整行代码 Shift+Ctrl+方向键下键： 选中光标后到文件末尾的全部代码 Shift+Ctrl+方向键上键： 选中光标前到文件头部的全部代码 三、自定制Sublime所有自定制的数据都会保存到一个特殊的文件夹当中，点击Preferences-Browse Packages, 显示的User文件夹就是存放用户所有自定制数据的文件夹。User文件夹中的文件作用如下：Default (Windows).sublime-keymap：保存用户绑定的快捷键配置Preferences.sublime-settings：保存用户自定制的配置 示例显示如何自定制一个自动调整缩进的快捷键： 3.1 调整缩进 Shift+Ctrl+P：打开命令面板 输入rein(模糊匹配)，选择Indentation: Reindent Lines 3.2 Indentation: Reindent Lines命令绑定快捷键 Shift+Ctrl+P：打开命令面板, 输入keybin（sublime支持模糊匹配），点击提示里的Preferences: Key Bindings - User这一项，输入以下代码:123[&#123; &quot;keys&quot;: [&quot;shift+tab&quot;], &quot;command&quot;: &quot;reindent&quot;, &quot;args&quot;: &#123;&quot;single_line&quot;: false&#125; &#125;,] 这里如何知道精确的命令名呢？ Ctrl+`：打开工作台； 输入sublime.log_commands命令设置为True，回车执行。代码如下： 1sublime.log_commands(True) 命令面板中输入rein,选择Indentation: Reindent Lines； 工作台就可以看到精确的命令名以及参数：command: reindent {“single_line”: false} Esc退出 四、Package Control安装扩展包Sublime默认自带了很多包，如果需要安装扩展包，首先需要安装Package Control工具。 4.1 安装Package Control 进入Package Control官网，点击右上角的Installation, 根据电脑的Sublime Text版本复制左侧相应的代码： 12345Sublime Text 3:import urllib.request,os,hashlib; h = &apos;df21e130d211cfc94d9b0905775a7c0f&apos; + &apos;1e3d39e33b79698005270310898eea76&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)Sublime Text 2:import urllib2,os,hashlib; h = &apos;df21e130d211cfc94d9b0905775a7c0f&apos; + &apos;1e3d39e33b79698005270310898eea76&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), &apos;wb&apos; ).write(by) if dh == h else None; print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h) if dh != h else &apos;Please restart Sublime Text to finish installation&apos;) Sublime Text中按Ctrl+`打开工作台，粘贴代码，回车执行。 安装完成之后，Ctrl+Q退出，重启Sublime。 打开Sublime之后，Shift+Ctrl+P打开命令面板, 敲Install, 选择Package Control:Install Package， 回车执行，读取包的列表。 打开后搜索包名，比如AdvanceNewFile，Emmet，Git等，回车进行安装，Sublime就会自动安装好指定的包。注意：Ctrl+W可以关闭说明文档。 4.2 常用扩展包AdvanceNewFile： 新建层级比较复杂的文件，如app/views/comments/show.html.erb。Alt+Ctrl+N 打开对话框之后，输入路径及文件名，回车就可打开输入内容。Git：安装后可以直接在Sublime上执行Git命令，把修改推送到GitHub上。SyncedSideBar： 侧边栏同步显示当前文件在目录树中的具体位置。 五、Goto Anything5.1 速查文件Ctrl+P打开Goto Anything，输入文件名，回车打开文件。 5.2 速查文件代码具体行输入文件名+“:”+代码行数，回车可以打开指明的文件并定位到指定的代码行。如shohtm:10可以打开show.html.erb文件并定位到第十行，光标会停留在文件中的第十行。 5.3 速查文件中的函数输入文件名+@+函数名，回车，光标定位到指定文件的指明函数代码行。 5.4 速查字符串#+字符串，可以快速定位到指定字符串, 不过这种方式，用得不多。 5.5 专门查找字符串 使用苹果电脑的同学可以参考如下的Mac和PC键盘布局对比图，比如Windows系统的Ctrl键对应Mac系统的Command键。其他好用的代码编辑器：ATOM： GitHub的开源免费代码编辑器Vim： 类似于Vi的著名的功能强大、高度可定制的文本编辑器textmate： Mac下的著名的文本编辑器软件，与BBedit一起并称苹果机上的emacs和vim 参考资料：快乐的sublime编辑器前端开发工具技巧介绍—Sublime篇前端开发必备！Emmet使用手册]]></content>
      <categories>
        <category>Sublime</category>
      </categories>
      <tags>
        <tag>Sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flask Web开发：基于Python的Web应用开发实战(不定期更新)]]></title>
    <url>%2F2017%2F08%2F31%2FFlask%20Web%E5%BC%80%E5%8F%91%EF%BC%9A%E5%9F%BA%E4%BA%8EPython%E7%9A%84Web%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%2F</url>
    <content type="text"><![CDATA[前言: 最近开始学习Flask了，学的是经典的图灵系列之《Flask Web开发：基于Python的Web应用开发实战》不定期更新学习笔记。Flask官方文档 示例代码Flasky 和其他框架相比，Flask的优点：扩展性高，让开发者做主，使其能对程序具有全面的创意控制。Flask支持所有的关系型数据库，还可以自主选择程序的组件，如果没有合适的，还可以自己开发。 课前须知： 一定的Python编程经验 熟练使用操作系统命令行 HTML、CSS、JavaScript 基本的Git使用技巧 首先安装Git客户端Administrator@DESKTOP-PCS85E7 MINGW64 /c/Nana/TP&amp;TACH/折腾来折腾去123456$ git clone https://github.com/miguelgrinberg/flasky.gitCloning into 'flasky'...remote: Counting objects: 830, done.remote: Total 830 (delta 0), reused 0 (delta 0), pack-reused 830Receiving objects: 100% (830/830), 146.70 KiB | 44.00 KiB/s, done.Resolving deltas: 100% (455/455), done. git clone命令从Github上下载源码，安装到当前目录下的flasky文件夹中。这个文件夹有源码，还有一个包含了程序修改完整历史的Git仓库。 Hexo 创建日志的时候报错ERROR Process failed: _posts/Flask Web开发：基于Python的Web应用开发实战.mdYAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 2, column 5: date: 2017-08-31 11:34:02 ^解决：[Flask]把这个删掉试试， 问题解决了切换提交历史的Git命令：1$ git checkout xxx（标签，项目中某次提交历史的名字） 修改程序源文件，Git会阻止你签出其他历史版本，因为这会导致本地修改历史的丢失？？？签出其他历史版本之前，要把文件还原到原始状态。最简单的方法是使用git reset命令：1$ git reset --hard 这个命令会损坏本地修改，所以执行此命令前你需要保存所有不想丢失的改动。？？？ 从GitHub上下载修正和改进后的源码用于更新本地仓库。命令如下：123$ git fetch --all$ git fetch --tags$ git reset --hard origin/master （git reset命令 用于更新文件的操作，执行git reset命令后，本地修改会丢失） git fetch命令用于利用GitHub上的远程仓库更新本地仓库的提交历史和标签，但不会改动真正的源文件查看程序两个版本之间的区别，以便了解改动详情：1$ git diff xxx xxx 补丁以Patch形式显示区别。 补丁文件？？？ GitHub网站显示的图形化对比更容易让人理解，查看两个历史版本的区别，可访问https://github.com/miguelgrinberg/flasky/compare/2a...2b 安装Flask有两个主要依赖：路由、调试和Web服务器网关接口（Web Server Gateway Interface, WSGI),子系统由Werkzeug提供; 模版系统由Jinja2 提供。python版本：Python2.7 / Python3.3 使用虚拟环境虚拟环境是Python解释器的一个私有副本，这个环境中可以安装私有包，而且不会影响系统中安装的全局Python解释器。优点：1. 系统的Python解释器中避免包的混乱和版本的冲突。2. 为每个程序单独创建虚拟环境可以保证程序智能访问虚拟环境中的包，从而保持全局解释器的干净整洁，使其只作为创建（更多）虚拟环境的源。3. 不需要管理员权限。虚拟环境用第三方实用工具virtualenv创建。 检查系统是否安装了virtualenv命令：$ virtualenv –versionPython3.3 venv模块原生支持虚拟环境，命令为pyvenv。pyvenv 不包含pip Python3.4改进，pyvenv完全代替virtualenv。安装： Linux 1$ sudo apt-get install python-virtualenv Mac OS X 1$ sudo easy_install virtualenv Windows 1pip install virtualenv 书上的方式不一样注意： 上述命令必须以具有管理员权限的用户身份执行。Windows系统“以管理员身份运行”， 基于Unix系统，命令前面加上sudo,或以根用户身份执行。安装完毕，virtualenv实用工具就可以从常规账户中调用。 从GitHub下载示例代码：123$ git clone https://github.com/miguelgrinberg/flasky.git$ cd flasky$ git checkout 1a Administrator@DESKTOP-PCS85E7 MINGW64 /c/Nana$ git clone https://github.com/miguelgrinberg/flasky.gitCloning into ‘flasky’…remote: Counting objects: 830, done.Reremote: Total 830 (delta 0), reused 0 (delta 0), pack-reused 830Receiving objects: 100% (830/830), 146.70 KiB | 172.00 KiB/s, done.Resolving deltas: 100% (455/455), done. Administrator@DESKTOP-PCS85E7 MINGW64 /c/Nana$ cd flasky Administrator@DESKTOP-PCS85E7 MINGW64 /c/Nana/flasky (master)$ git checkout 1aNote: checking out ‘1a’. You are in ‘detached HEAD’ state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -b with the checkout command again. Example: git checkout -b HEAD is now at e4777c9… Chapter 1: initial version (1a)使用virtualenv命令（只有一个必需的参数，即虚拟环境的名字，一般命名venv）在flasky文件夹中创建Python虚拟环境：子文件夹 名字是虚拟环境的名字 虚拟环境相关文件都保存在子文件夹中1$ virtualenv venv cmd中C:\Nana\flasky&gt;virtualenv venvUsing base prefix ‘c:\users\administrator\appdata\local\programs\python\python35-32’New python executable in C:\Nana\flasky\venv\Scripts\python.exeInstalling setuptools, pip, wheel…done.使用虚拟环境之前，先要“激活”。bash命令行（Linux和Mac OS X）1$ source venv/bin/activate Windows系统：1$ venv\Scripts\activate C:\Nana\flasky&gt;venv\Scripts\activate (venv) C:\Nana\flasky&gt;激活后，Python解释器的路径就被添加进PATH中，不是永久性的，只会影响当前的命令行对话。激活虚拟环境的命令会修改命令行提示符，加入环境名，提醒你已经激活了虚拟环境：1(venv) $ 虚拟环境的工作完成后，命令行输入deactivate,回到全局Python解释器中。 使用pip安装Python包大多数Python包都使用pip实用工具安装，使用virtualenv创建虚拟环境时会自动安装pip。激活虚拟环境后，pip所在的路径会被添加进PATH。我用的python3.5的版本来做的’虚拟环境中安装Flask:1(venv) $ pip install flask (venv) C:\Nana\flasky&gt;pip install flaskCollecting flask Downloading Flask-0.12.2-py2.py3-none-any.whl (83kB) 100% |████████████████████████████████| 92kB 264kB/sCollecting click&gt;=2.0 (from flask) Downloading click-6.7-py2.py3-none-any.whl (71kB) 100% |████████████████████████████████| 71kB 863kB/sCollecting itsdangerous&gt;=0.21 (from flask) Downloading itsdangerous-0.24.tar.gz (46kB) 100% |████████████████████████████████| 51kB 624kB/sCollecting Jinja2&gt;=2.4 (from flask) Downloading Jinja2-2.9.6-py2.py3-none-any.whl (340kB) 100% |████████████████████████████████| 348kB 635kB/sCollecting Werkzeug&gt;=0.7 (from flask) Downloading Werkzeug-0.12.2-py2.py3-none-any.whl (312kB) 100% |████████████████████████████████| 317kB 424kB/sCollecting MarkupSafe&gt;=0.23 (from Jinja2&gt;=2.4-&gt;flask) Downloading MarkupSafe-1.0.tar.gzBuilding wheels for collected packages: itsdangerous, MarkupSafe Running setup.py bdist_wheel for itsdangerous … done Stored in directory: C:\Users\Administrator\AppData\Local\pip\Cache\wheels\fc\a8\66\24d655233c757e178d45dea2de22a04c6d92766abfb741129a Running setup.py bdist_wheel for MarkupSafe … done Stored in directory: C:\Users\Administrator\AppData\Local\pip\Cache\wheels\88\a7\30\e39a54a87bcbe25308fa3ca64e8ddc75d9b3e5afa21ee32d57Successfully built itsdangerous MarkupSafeInstalling collected packages: click, itsdangerous, MarkupSafe, Jinja2, Werkzeug, flaskSuccessfully installed Jinja2-2.9.6 MarkupSafe-1.0 Werkzeug-0.12.2 click-6.7 flask-0.12.2 itsdangerous-0.24 验证Flask是否正确安装，启动Python解释器，导入Flask：123(venv) $ python&gt;&gt;&gt; import flask&gt;&gt;&gt; 没有错误提醒，则成功。 程序的基本结构初始化所有Flask程序都必须创建一个程序实例。Web服务器使用一种名为Web服务器网关接口（Web Server Gateway Interface, WSGI)的协议，把接受自客户端的所有请求都转交给这个对象处理。程序实例是Flask类的对象，常用如下代码创建：12from flask import Flaskapp = Flask(__name__) Flask类的构造函数只有一个必须指定的参数，即程序主模块或包的名字。大多数程序中，Python的name变量就是所需的值。更多：将构造函数的name参数传给Flask程序，Flask用这个参数决定程序的根目录，以便找到相对于程序根目录的资源文件位置。 路由和视图函数请求：客户端–&gt;Web服务器–&gt;Flask程序实例。 程序实例需要知道对每个URL请求运行哪些代码，所以保存了一个URL到Python函数的映射关系。路由：处理URL和函数之间关系的程序。Flask程序定义路由，最简便方式是用程序实例提供的app.route修饰器(装饰器)，把修饰的函数注册为路由。使用app.route修饰器(装饰器)声明路由：123@app.route('/')def index(): return '&lt;h1&gt;Hello World!&lt;/h1&gt;' 修饰器(装饰器)？？？第八页这个例子把index()函数注册为程序根地址的处理程序。像index()这样的函数称为视图函数（view function)。python代码嵌入响应式字符串导致代码难以维护？？？8日常所用服务的某些URL格式，很多地址都包含可变部分。Flask支持这种形态的URL,只需在route修饰器重使用特殊的句法即可。定义有一部分是动态名字的路由：123@app.route('/user/&lt;name&gt;')def user(name): return '&lt;h1&gt;Hello, %s!&lt;/h1&gt;' % name 尖括号中的内容-动态部分，调用视图函数时。Flask会把动态部分作为参数传入函数。路由中的动态部分默认使用字符串，不过也可使用类型定义。 如路由/user/只会匹配动态片段id为整数的URL。Flask支持在路由中使用int、float和path类型。path类型也是字符串，但不把斜线视作分隔符，而将其作为动态片段的一部分。 启动服务器程序实例用run方法启动Flask集成的开发Web服务器：if name == ‘main‘: app.run(debug=True) name == ‘main‘是Python的惯常用法，这里确保直接执行这个脚本时才启动开发Web服务器。如果这个脚本由其他脚本引入，不会执行app.run()。服务器启动-轮询，等待并处理请求。一直运行到程序停止，如按Ctrl+C。有一些选项参数可被app.run()函数接受用于设置Web服务器的操作模式。 启动调试模式（如激活调试器和重载程序），可将debug参数设为True。更多：Flask提供的Web服务器不适合在生产环境中使用。 一个完整的程序示例2-1 hello.py: 一个完整的Flask程序12345678910111213from flask import Flaskapp = Flask(__name__)@app.route('/')def index(): return '&lt;h1&gt;Hello World!&lt;/h1&gt;'if __name__ == '__main__': app.run(debug=True) 调试地址启动程序：123(venv) $ python hello.py * Running on http://127.0.0.1:5000/ * Restarting with reloader 我的运行如下，不过浏览器显示一样1234567(venv) C:\Nana\flasky&gt;python hello.py * Restarting with stat * Debugger is active! * Debugger PIN: 929-772-137 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)127.0.0.1 - - [31/Aug/2017 18:06:47] "GET / HTTP/1.1" 200 -127.0.0.1 - - [31/Aug/2017 18:06:47] "GET /favicon.ico HTTP/1.1" 404 - 示例2-2 hello.py: 包含动态路由的Flask程序12345678910111213141516171819from flask import Flaskapp = Flask(__name__)@app.route('/')def index(): return '&lt;h1&gt;Hello World!&lt;/h1&gt;'@app.route('/user/&lt;name&gt;')def user(name): return '&lt;h1&gt;Hello, %s!&lt;/h1&gt;' % nameif __name__ == '__main__': app.run(debug=True) 调试地址1 浏览器显示：Hello, Dave!调试地址2 浏览器显示：Hello, Nana!1234567891011121314(venv) C:\Nana\flasky&gt;python hello.py * Restarting with stat * Debugger is active! * Debugger PIN: 929-772-137 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)127.0.0.1 - - [31/Aug/2017 18:06:47] "GET / HTTP/1.1" 200 -127.0.0.1 - - [31/Aug/2017 18:06:47] "GET /favicon.ico HTTP/1.1" 404 - * Detected change in 'C:\\Nana\\flasky\\hello.py', reloading 从这里开始变化了 * Restarting with stat * Debugger is active! * Debugger PIN: 929-772-137 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)127.0.0.1 - - [31/Aug/2017 18:18:31] "GET /user/Dave HTTP/1.1" 200 -127.0.0.1 - - [31/Aug/2017 18:19:01] "GET /user/Nana HTTP/1.1" 200 - 请求 - 响应循环程序和请求上下文请求对象封装了客户端发送的HTTP请求。将请求对象做为参数传入视图函数，能让视图函数访问请求对象。但会导致程序中的每个视图函数都增加一个参数。而且如果视图函数在处理请求时还要访问其他对象，情况会变糟。Flask使用上下文临时把某些对象变为全局可访问。123456from flask import request@app.route('/')def index(): user_agent = request.headers.get('User_Agent') return '&lt;p&gt;Your brower is %s&lt;/p&gt;' % user_agent 事实上，request不可能是全局变量。多线程服务器中，Flask使用上下文让特定的变量在一个线程中全局可访问，于此同时却不会干扰其他线程。更多：线程是可单独管理的最小指令集。多线程Web服务器会创建一个线程池，再从线程池中选择一个线程用于处理接收到的请求。 Flask中两种上下文： 程序上下文和请求上下文。 变量名 上下文 说明 current_app 程序上下文 当前激活程序的程序实例 g 程序上下文 处理请求时用作临时存储的对象，每次请求都会重设这个变量 request 请求上下文 请求对象，封装了客户端发出的HTTP请求中的内容 session 请求上下文 用户会话，用于存储请求之间需要“记住”的值的词典 Flask发送请求之前激活（或推送）程序和请求上下文，推送后，可以在线程中使用current_app，g，request，session变量，请求处理完成后再将其删除。如果使用这些变量时没有激活程序或请求上下文，就会导致错误。示例：123456789101112131415161718192021222324252627282930313233343536373839404142&gt;&gt;&gt; from hello import app&gt;&gt;&gt; from flask import current_app&gt;&gt;&gt; current_app.nameTraceback (most recent call last):...RuntimeError: Working outside of application context.&gt;&gt;&gt; app_ctx = app.app_context()&gt;&gt;&gt; app_ctx.push()&gt;&gt;&gt; current_app.name'hello'&gt;&gt;&gt; app_ctx.pop()C:\Nana\flasky\venv\Scripts&gt;activate(venv) C:\Nana\flasky\venv\Scripts&gt;cd C:\Nana\flasky(venv) C:\Nana\flasky&gt;pythonPython 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 15:51:26) [MSC v.1900 32 bit (Intel)] on win32Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; from hello import app&gt;&gt;&gt; from flask import current_app&gt;&gt;&gt; current_app.nameTraceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; File "C:\Nana\flasky\venv\lib\site-packages\werkzeug\local.py", line 347, in __getattr__ return getattr(self._get_current_object(), name) File "C:\Nana\flasky\venv\lib\site-packages\werkzeug\local.py", line 306, in _get_current_object return self.__local() File "C:\Nana\flasky\venv\lib\site-packages\flask\globals.py", line 51, in _find_app raise RuntimeError(_app_ctx_err_msg)RuntimeError: Working outside of application context.This typically means that you attempted to use functionality that neededto interface with the current application object in a way. To solvethis set up an application context with app.app_context(). See thedocumentation for more information.&gt;&gt;&gt; app_ctx = app.app_context()&gt;&gt;&gt; app_ctx.push()&gt;&gt;&gt; current_app.name'hello'&gt;&gt;&gt; app_ctx.pop() 这里没激活程序上下文前就调用current_app.name会导致错误，但推送完上下文之后就可以调用了。注意，在程序实例上调用app.app_context()可获得一个程序上下文。 请求调度Flask使用app.route修饰器或者非修饰器形式的app.add_url_rule()生成映射。在Python shell中测试为hello.py生成的映射：12345678910111213141516(venv) $ python&gt;&gt;&gt; from hello import app&gt;&gt;&gt; app.url_mapMap([&lt;Rule '/' (HEAD, GET, OPTIONS) -&gt; index&gt;, &lt;Rule '/static/&lt;filename&gt;' (HEAD, GET, OPTIONS) -&gt; static&gt;, &lt;Rule '/user/&lt;name&gt;' (HEAD, GET, OPTIONS) -&gt; user&gt;])(venv) C:\Nana\flasky&gt;pythonPython 3.5.3 (v3.5.3:1880cb95a742, Jan 16 2017, 15:51:26) [MSC v.1900 32 bit (Intel)] on win32Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; from hello import app&gt;&gt;&gt; app.url_mapMap([&lt;Rule '/' (HEAD, GET, OPTIONS) -&gt; index&gt;, &lt;Rule '/static/&lt;filename&gt;' (HEAD, GET, OPTIONS) -&gt; static&gt;, &lt;Rule '/user/&lt;name&gt;' (HEAD, GET, OPTIONS) -&gt; user&gt;]) /和/user/路由在程序中使用app.route修饰器定义。/static/路由是Flask添加的特殊路由，用于访问静态文件。URL映射中的HEAD, GET, OPTIONS是请求方法，由路由进行处理。 请求钩子有时在处理请求之前或之后执行代码会很有用。Flask提供了注册通用函数的功能，注册的函数可在请求之前或之后调用。请求钩子使用修饰器实现。Flask支持四种钩子。 before_first_request: 注册一个函数，在处理第一个请求之前运行。 before_request: 注册一个函数，在每次请求之前运行。 after_request: 注册一个函数，如果没有未处理的异常抛出，在每次请求之后运行。 teardown_request: 注册一个函数，如果有未处理的异常抛出，也在每次请求之后运行。在请求钩子函数和视图函数之间共享数据一般使用上下文全局变量g。 响应Flask调用视图函数后，会将其返回值作为响应的内容。HTTP协议需要作为请求响应的字符串还有状态码，Flask默认设为200， 表明请求已经被成功处理。如果需要使用不同的状态码，就要把数字代码作为第二个返回值，添加到响应文本之后。如400状态码，表示请求无效：123@app.route('/')def index(): return '&lt;h1&gt;Bad Request&lt;/h1&gt;', 400 视图函数返回的响应还可以接受第三个参数，这是一个有首部（header）组成的字典，可以添加到HTTP响应中。如果不想返回由1个、2个或3个值组成的元组，Flask视图函数还可以返回Response对象。make_response()函数可接受1个、2个或3个参数，并返回一个Response对象。示例创建了一个响应对象，然后设置了cookie:1234567from flask import make_response@app.route('/')def index(): response = make_response('&lt;h1&gt;This document carries a cookie!&lt;/h1&gt;') response.set_cookie('answer', '42') return response 重定向（特殊响应类型）没有页面文档，只告诉浏览器一个新地址用以加载新页面，常用在Web表单中。重定向常用302状态码表示，指向的地址由Location首部提供。Flask提供了redirect()辅助函数来生成重定向响应：12345from flask import redirect@app.route('/')def index(): return redirect('http://www.example.com') abort函数（特殊响应）用于处理错误。示例中如果URL中动态参数id对应的用户不存在，就返回状态码404：12345678from flask import abort@app.route('/user/&lt;id&gt;')def get_user(id): user = load_user(id) if not user: abort(404) return '&lt;h1&gt;Hello, %s&lt;/h1&gt;' % user.name 注意，abort不会把控制权交还给调用它的函数，而是抛出异常把控制权交给Web服务器。 Flask扩展如何把扩展整合到程序中：示例，在hello.py中添加一个扩展，使用命令行参数增强程序的功能。 使用Flask-Script支持命令行选项传递设置选项的理想方式是使用命令行参数。Flask-Script是一个Flask扩展，为Flask程序添加了一个命令行解析器。安装方式：123456789101112(venv) $ pip install flask-script(venv) C:\Nana\flasky&gt;pip install flask-scriptCollecting flask-scriptRequirement already satisfied: Flask in c:\nana\flasky\venv\lib\site-packages (from flask-script)Requirement already satisfied: itsdangerous&gt;=0.21 in c:\nana\flasky\venv\lib\site-packages (from Flask-&gt;flask-script)Requirement already satisfied: Jinja2&gt;=2.4 in c:\nana\flasky\venv\lib\site-packages (from Flask-&gt;flask-script)Requirement already satisfied: Werkzeug&gt;=0.7 in c:\nana\flasky\venv\lib\site-packages (from Flask-&gt;flask-script)Requirement already satisfied: click&gt;=2.0 in c:\nana\flasky\venv\lib\site-packages (from Flask-&gt;flask-script)Requirement already satisfied: MarkupSafe&gt;=0.23 in c:\nana\flasky\venv\lib\site-packages (from Jinja2&gt;=2.4-&gt;Flask-&gt;flask-script)Installing collected packages: flask-scriptSuccessfully installed flask-script-2.0.5 示例2-3 hello.py: 使用Flask-Script1234567891011121314151617181920from flask import Flaskfrom flask_script import Managerapp = Flask(__name__)manager = Manager(app)@app.route('/')def index(): return '&lt;h1&gt;Hello World!&lt;/h1&gt;'@app.route('/user/&lt;name&gt;')def user(name): return '&lt;h1&gt;Hello, %s!&lt;/h1&gt;' % nameif __name__ == '__main__': manager.run() 专为Flask开发的扩展都暴漏在flask.ext命名空间下。这个扩展的初始化方法也适用于其他很多扩展：把程序实例作为参数传给构造函数， 初始化主类的实例。创建的对象可以在各个扩展中使用。这里，服务器由manager.run()启动，启动后就能解析命令行了。运行后，会显示一个用法消息： 1234567891011121314151617181920usage: hello.py [-h] &#123;shell,runserver&#125; ...positional arguments: &#123;shell,runserver&#125; shell Runs a Python shell inside Flask application context. runserver Runs the Flask development server i.e. app.run()optional arguments: -h, --help show this help message and exit我的运行结果，和书里有点出入：(venv) C:\Nana\flasky&gt;python hello.pyusage: hello.py [-?] &#123;runserver,shell&#125; ...positional arguments: &#123;runserver,shell&#125; runserver Runs the Flask development server i.e. app.run() shell Runs a Python shell inside Flask application context.optional arguments: -?, --help show this help message and exit shell命令：在程序的上下文中启动Python shell会话。runserver命令：启动Web服务器。运行python hello.py runserver将以调试模式启动Web服务器，但是还有很多选项可用：123456789101112131415161718192021222324252627282930我的和书里的有出入(venv) C:\Nana\flasky&gt;python hello.py runserver * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)(venv) C:\Nana\flasky&gt;python hello.py runserver --helpusage: hello.py runserver [-?] [-h HOST] [-p PORT] [--threaded] [--processes PROCESSES] [--passthrough-errors] [-d] [-D] [-r] [-R]Runs the Flask development server i.e. app.run()optional arguments: -?, --help show this help message and exit -h HOST, --host HOST -p PORT, --port PORT --threaded --processes PROCESSES --passthrough-errors -d, --debug enable the Werkzeug debugger (DO NOT use in production code) -D, --no-debug disable the Werkzeug debugger -r, --reload monitor Python files for changes (not 100&#123;'const': True, 'prog': 'hello.py runserver', 'option_strings': ['-r', '--reload'], 'help': 'monitor Python files for changes (not 100% safe for production use)', 'container': &lt;argparse._ArgumentGroup object at 0x0338BF30&gt;, 'default': None, 'required': False, 'type': None, 'dest': 'use_reloader', 'choices': None, 'metavar': None, 'nargs': 0&#125;afe for production use) -R, --no-reload do not monitor Python files for changes …host参数告诉Web服务器在哪个网络接口上监听来自客户端的链接，默认监听localhost上的连接，所以只接受来自服务器所在计算机发起的连接。 python hello.py runserver –host 0.0.0.0命令让Web服务器监听公共网络接口上的连接，允许同网中的其他计算机连接服务器（这样Web服务器可使用http://a.b.c.d:5000/网络中的任一台电脑进行访问，其中“a.b.c.d”是服务器所在计算机的外网IP地址）：12345678910(venv) C:\Nana\flasky&gt;python hello.py runserver --host 0.0.0.0 * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)192.168.1.22 - - [31/Aug/2017 22:10:20] "GET /user/%E5%A8%9C%E5%A8%9C HTTP/1.1" 200 -192.168.1.22 - - [31/Aug/2017 22:10:20] "GET /favicon.ico HTTP/1.1" 404 -192.168.1.22 - - [31/Aug/2017 22:10:37] "GET /user/Nana HTTP/1.1" 200 -调试1：http://192.168.1.22:5000/user/娜娜 显示Hello,娜娜!调试2：http://192.168.1.22:5000/user/Nana 显示Hello,Nana!CTRL+C 退出 然后输入python hello.py runserver调试3：http://192.168.1.22:5000/user/Nana 显示无法访问此网站，192.168.1.22 拒绝了我们的连接请求。调试4：http://127.0.0.1:5000/user/Nana 显示Hello,Nana! 模板视图函数的作用很明确，即生成请求的响应。一般而言，请求会改变程序的转台，而这种变化也会在视图函数中产生。业务逻辑和表现逻辑混在一起会导致代码难以理解和维护。把表现逻辑移到模板中能够提升程序的可维护性。模板是一个包含响应文本的文件，其中包含用占位变量表示的动态部分，其具体值只在请求的上下文中才能知道。渲染：使用真实值替换变量，再返回最终得到的响应字符串的过程。Flask使用Jinja2模板引擎来渲染模板。 Jinja2模板引擎形式最简单的Jinja2模板就是一个包含响应文本的文件。示例3-1 templates/index.html: Jinja2模板1&lt;h1&gt;Hello World!&lt;/h1&gt; 示例3-2 templates/user.html: Jinja2模板1&lt;h1&gt;Hello, &#123;&#123; name &#125;&#125;!&lt;/h1&gt; 渲染模板默认情况下，Flask在程序文件夹中的templates子文件夹中寻找模板。示例3-3 hello.py: 渲染模板1234567891011121314151617181920from flask import Flask, render_templatefrom flask_script import Managerapp = Flask(__name__)manager = Manager(app)@app.route(&apos;/&apos;)def index(): return render_template(&apos;index.html&apos;)@app.route(&apos;/user/&lt;name&gt;&apos;)def user(name): return render_template(&apos;user.html&apos;, name=name) 收到一个名为name的变量if __name__ == &apos;__main__&apos;: manager.run() Flask提供的render_template()函数把Jinja2模板引擎集成到了程序中。render_template()函数： 第一个参数是模板的文件名。 随后的参数都是键值对，表示模板中变量对应的真实值。name=name：关键字参数，左边的“name”表示参数名，就是模板中使用的占位符;右边的“name”是当前作用域中的变量，表示同名参数的值。 变量示例3-2 templates/user.html: Jinja2模板1&lt;h1&gt;Hello, &#123;&#123; name &#125;&#125;!&lt;/h1&gt; 示例3-2 模板中使用的结构表示一个变量，它是一种特殊的占位符，告诉模板引擎这个位置的值从渲染模板时使用的数据中获取。Jinja2能识别所有类型的变量，甚至是一些复制的类型，例如列表、字典和对象。p*4 用户在表单中输入的文本，千万不能使用safe 4.4 在视图函数中处理表单4.5 重定向和用户会话Post/重定向/Get模式 这里使用get()获取字典中键对应的值来避免未找到键的异常情况？？？ 4.6 Flask消息五、数据库5.1 SQL数据库外键，引用同一个表？或不同表中某行的主键？？？ 5.2 NoSQL数据库NoSQL数据库使用集合代替表，使用文档代替记录。? 减少了表的数量，却增加了数据重复量。好处： 数据重复可以提升查询速度？？？。列出用户及其角色的操作很简单，因为无需联结。 5.3 使用SQL还是NoSQL那大型程序呢？ 5.4 Python数据库框架数据库抽象库代码包？？？使用这些抽象包直接处理高等级的Python对象，而不用处理如表 文档和查询语言此类的数据库实体 ORM ODM 平台提供了那些数据库可供选择 5.5 使用Flask-SQLAlchemy管理数据库ad对象是 类的实例？？？ 5.6 定义模型模型？？？ db.String(64)?默认的表名没有遵守使用复数形式进行命名的约定，？？？index=True是什么意思？？？ BigInterger 不限制精度的整数？？？ Numeric 定点数？ String和Text的区别 repr()??? 5.7 关系面向对象视角？？？ 关系表？？？多对多？？？ 5.8 数据库操作5.8.1 创建表5.8.2 插入行回滚？？？ 5.8.3 修改行5.8.4 删除行5.8.5 查询行Query对象paginate对象？？？ 5.9 在视图函数中操作数据库5.10 集成Python shell5.11 使用Flask-Migrate实现数据库迁移5.11.1 创建迁移仓库5.11.2 创建迁移脚本5.11.3 更新数据库六、电子邮件6.1 使用Flask-Mail提供电子邮件支持6.1.1 在Python shell中发送电子邮件6.1.2 在程序中集成发送电子邮件功能6.1.3 异步发送电子邮件七、大型程序的结构7.1 项目结构7.2 配置选项7.3 程序包7.3.17.3.27.47.57.6、.1.2.3.4.5.6、.1.2.3.4.5.6]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Flask</tag>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python常见报错及解决办法]]></title>
    <url>%2F2017%2F08%2F24%2FPython%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1. ‘python’ 不是内部或外部命令，也不是可运行的程序或批处理文件。 解决方案：添加python的安装路径到环境变量Path中, 告诉Windows如何找到你安装的Python版本。举例：假设python.exe安装路径是C:\Python27,在计算机系统属性里点击环境变量-系统变量中找到Path变量，编辑-新建-增加一行填上C:\Python27。提示：cmd中输入python，显示python版本信息及提示符&gt;&gt;&gt;，则设置成功。 2. ‘pip’ 不是内部或外部命令，也不是可运行的程序或批处理文件。解决方案：添加pip.exe的安装路径到环境变量Path中举例：假设pip.exe安装路径是C:\Python27\Scripts,在计算机系统属性里点击环境变量-系统变量中找到Path变量，编辑-新建-增加一行填上C:\Python27\Scripts。 3. pip安装python库超时ReadTimeoutError解决方案：安装国内镜像，使用豆瓣源或者清华源；cmd运行pip –default-timeout=100 install -U pip,手动设置超时时间。 4. pip list的DEPRECATION提示CMD中输入pip list后，显示：DEPRECATION: The default format will switch to columns in the future. You can use –format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning. 解决方案：这是一个警告，告诉你以后pip list的默认格式会换成columns的格式，可以采用命令加上–format=(legacy|columns)或者在[list]下面的pip.conf里定义一个legacy|columns格式来取消这个警告。举例：window10系统下，在C:\Users\Administrator下新建一个文件夹，命名为pip;然后在pip上新建文件，pip.ini，里面输入内容如下：12[list]format=columns 再次输入pip list，警告就消失了。过程如下：123456789101112C:\Users\Administrator&gt;pip listDEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning.beautifulsoup4 (4.6.0)colorama (0.3.9)decorator (4.1.2)C:\Users\Administrator&gt;pip listPackage Version--------------------- -------beautifulsoup4 4.6.0colorama 0.3.9decorator 4.1.2 格式对比如下：beautifulsoup4 (4.6.0) 旧格式beautifulsoup4 4.6.0 新格式 5. cmd输入pip, 报错: UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xc0 in position 0: ordinal not in range(128)解决方案： Python的安装目录C:/Python27/Lib/里找到mimetypes.py文件； 打开mimetypes.py文件，在import结束后添加如下代码：import sysreload(sys)sys.setdefaultencoding(‘utf-8’)保存文件,重新执行pip命令。 参考segmentfault]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Error</tag>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编程设计资源]]></title>
    <url>%2F2017%2F08%2F23%2F%E7%BC%96%E7%A8%8B%E8%AE%BE%E8%AE%A1%E8%B5%84%E6%BA%90%2F</url>
    <content type="text"><![CDATA[搜索引擎谷歌 –lantern，你懂的(更新，lantern挂了，现在只能自己搭ss了，ORZ)百度 前端W3C –前端基础NexT –NexT网站主题liveStyle –前端可视化工具liveReload –前端可视化工具browserSync –前端可视化工具从 psd 到 html –切图实战教程前端工程师必备的PS技能——切图篇DILLINGER –在线编辑Markdown网站 正则表达式正则表达式在网站url配置以及网络爬虫中非常重要。Regexper –可视化工具Regulex –可视化工具Debuggex –可视化工具相关教程：正则表达式30分钟入门教程 –虽然作者也承认30分钟是不够的，逃 PythonPython官网PyPI - the Python Package IndexUnofficial Windows Binaries for Python Extension Packages –window系统的python第三方包文件Pycharm –Python IDE，带有一整套可以帮助用户在使用Python语言开发时提高其效率的工具django –Python主流开源Web应用框架flask –Python轻量级Web应用框架Tornado –Python异步Web应用框架Python列表、元组、字典和字符串的常用函数 DjangoDjango1.11.6的中文文档Django官方文档 图床七牛云图床神器 –免注册，免费，上传图片，不过有限制，每个文件大小不能超过5MB, 每次最多只能上传10张图片 文本编辑器Sublime Text –主流前端开发编辑器ATOM –GitHub的开源免费代码编辑器Vim –类似于Vi的著名的功能强大、高度可定制的文本编辑器textmate –Mac下的著名的文本编辑器软件，与BBedit一起并称苹果机上的emacs和vim 美国服务器搬瓦工Bangwagon VPS –美国服务器搬瓦工Bangwagon VPS China –美国服务器搬瓦工中国站Bangwagon Host-Client Area –美国服务器 搬瓦工客户中心 更多stackoverflow –遇到报错可以经常来这里找找解决办法Git For Windows –Windows系统下的GitA Byte of Python –简明 Python 教程为知笔记 –好记性不如烂笔头，多做笔记，多思考Ming’s Blog –明的博客W3Tachs –网站技术分析廖雪峰官方网站 –Javascript/Python/Git等教程GitHub –代码托管网站Quora –国外问答网站SaltTiger –每天一本编程书，每天进步一点点慕课网Zhihu豆瓣开发者服务豆瓣API快速入门LinkedIn程序员在线工具爱折腾好折腾origamiLeanCloudGithub DesktopUEditorDjangoUeditorFreeCodeCamp/chinese聚学在线An overview of all Markdown elementsKENNETH REITZ –逆袭男神的程序大神Django 学习小组琪中有不凡ATOOL在线工具在线DXF和DWG看图国家企业信用信息公示系统学信网asciinema –asciinema [as-kee-nuh-muh] is a free and open source solution for recording terminal sessions and sharing them on the web.HTML 5 Outliner –用标题和分节元素生成一个可导航的页面大纲，HTML5大纲生成页面Normalize.cssCan I useAutoprefixer CSS online –浏览器前缀的后处理程序Letasoft Sound Booster –系统音量增大软件Visual Studio Codebigjpg 人工智能 –AI人工智能图片放大，亲测效果不错 我们的人生很长，遇到的问题很多，而且经常不带重样的。经验主义显然没办法全部应付。唯有升维思考，多问为什么，对症下药，才能在残酷的现实社会当中，从容面对各种问题，并将它们各个击破。-两种思维方式的不同 但是啊，人生不一样，人生有很多正确答案，继续读大学是正确答案，不去也是，热衷运动也是，喜欢音乐也好，和朋友一起玩耍也罢，为了某人而绕远路也是，这些都是正确答案。-《龙樱》 Letasoft Sound Booster]]></content>
      <categories>
        <category>资源</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>资源</tag>
      </tags>
  </entry>
</search>
